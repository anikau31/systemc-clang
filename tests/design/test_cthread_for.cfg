sc_user()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_user(const sc_core::sc_user &)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_halt()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_halt(const sc_core::sc_halt &)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_kill()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_kill(const sc_core::sc_kill &)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool is_reset() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_is_reset
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_unwind_exception::sc_unwind_exception(const sc_core::sc_unwind_exception &that)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: that
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class std::exception)
   3: [B1.2] (CXXConstructExpr, exception([B1.2]) (Base initializer), std::exception)
   4: exception([B1.3]) (Base initializer)
   5: that
   6: [B1.5].m_proc_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_process_b *)
   8: m_proc_p([B1.7]) (Member initializer)
   9: that
  10: [B1.9].m_is_reset
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: m_is_reset([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_process_b *)
  15: that
  16: [B1.15].m_proc_p
  17: [B1.16] = [B1.14]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *get_msg() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->msg
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const char *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_severity get_severity() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->severity
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_severity)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *get_file_name() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const char *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int get_line_number() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->line
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_time &get_time() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->timestamp
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_time *)
   4: *[B1.3]
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int get_verbosity() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_verbosity_level
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *what() const noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_what
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const char *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cltn
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_attr_cltn::iterator begin()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cltn
   3: [B1.2].begin
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_attr_cltn::iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_attr_cltn::const_iterator begin() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cltn
   3: [B1.2].begin
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_attr_cltn::const_iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_attr_cltn::iterator end()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cltn
   3: [B1.2].end
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_attr_cltn::iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_attr_cltn::const_iterator end() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cltn
   3: [B1.2].end
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_attr_cltn::const_iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *name() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_name
   3: [B1.2].c_str
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_object"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_simcontext *simcontext() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_simc
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const std::vector<sc_event *> &get_child_events() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_child_events
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const std::vector<sc_object *> &get_child_objects() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_child_objects
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_object *get_parent_object() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_parent
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_object &sc_object::operator=(const sc_core::sc_object &)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_object *sc_get_parent(const sc_core::sc_object *obj_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_object *)
   3: [B1.2]->get_parent_object
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *if_typename() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->get_interface_type
   3: [B1.2]() (CXXRecordTypedCall, [B1.4])
   4: [B1.3]
   5: [B1.4] (ImplicitCastExpr, NoOp, const struct std::type_index)
   6: [B1.5].name
   7: [B1.6]()
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_export_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_process_host()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_process_host() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void defunct()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_process_monitor() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_monitor::signal(sc_core::sc_thread_handle, int)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_throw_it_helper()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_throw_it_helper() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int current_state()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_state
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool dont_initialize() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_dont_init
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool dynamic() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_dynamic_proc
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_process_b::spawn_t)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: SPAWN_ELAB
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.4] != [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_report *get_last_report()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_last_report_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void set_last_report(sc_core::sc_report *last_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_last_report_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   4: [B1.3]->~sc_report() (Implicit destructor)
   5: delete [B1.3]
   6: last_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   8: this
   9: [B1.8]->m_last_report_p
  10: [B1.9] = [B1.7]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_b::add_child_object(sc_core::sc_object *object_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_object *)
   3: [B1.2]->sc_object::add_child_object
   4: object_p
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   6: [B1.3]([B1.5])
   7: this
   8: [B1.7]->reference_increment
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_b::remove_child_object(sc_core::sc_object *object_p)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->reference_decrement
   3: [B2.2]()
   4: true
   5: return [B2.4];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_object *)
   3: [B3.2]->sc_object::remove_child_object
   4: object_p
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   6: [B3.3]([B3.5])
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline const ::std::vector<sc_object *> &sc_process_b::get_child_objects() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_object *)
   3: [B1.2]->m_child_objects
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_b::initially_in_reset(bool async)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_active_reset_n
   3: [B1.2]++
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_active_areset_n
   3: [B2.2]++
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: async
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool sc_process_b::is_disabled() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.7] ? [B2.1] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_state
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: ps_bit_disabled
   5: [B4.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B4.3] & [B4.5]
   7: ([B4.6]) (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B4.7] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_b::is_runnable() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_runnable_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_process_b *)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_process_b *)
   6: [B1.3] != [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_b::is_unwinding() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_unwinding
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_b::start_unwinding()
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: false
   2: return [B1.1];
   Preds (2): B3 B8
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_throw_status
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_process_b::process_throw_type)
   4: [B2.3] (ImplicitCastExpr, IntegralCast, int)
   T: switch [B2.4]
   Preds (1): B8
   Succs (5): B4 B6 B7 B5 B3

 [B3]
  default:
   T: break;
   Preds (2): B4 B2
   Succs (1): B1

 [B4]
  case THROW_USER:
   Preds (1): B2
   Succs (1): B3

 [B5]
  case THROW_SYNC_RESET:
   1: true
   2: this
   3: [B5.2]->m_unwinding
   4: [B5.3] = [B5.1]
   5: true
   6: return [B5.5];
   Preds (2): B2 B7
   Succs (1): B0

 [B6]
  case THROW_KILL:
   Preds (1): B2
   Succs (1): B7

 [B7]
  case THROW_ASYNC_RESET:
   Preds (2): B6 B2
   Succs (1): B5

 [B8]
   1: this
   2: [B8.1]->m_unwinding
   3: [B8.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: ![B8.3]
   T: if [B8.4]
   Preds (1): B9
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B5

inline bool sc_process_b::clear_unwinding()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: this
   3: [B1.2]->m_unwinding
   4: [B1.3] = [B1.1]
   5: true
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_process_b *sc_process_b::last_created_process_base()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: m_last_created_process_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_process_b *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_curr_proc_kind sc_process_b::proc_kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_process_kind
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_curr_proc_kind)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_b::reference_decrement()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->delete_process
   3: [B1.2]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_references_n
   3: [B2.2]--
   4: this
   5: [B2.4]->m_references_n
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: 0
   8: [B2.6] == [B2.7]
   T: if [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_b::reference_increment()
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.5]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B1.3]->m_references_n
   5: [B1.4]++
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_references_n != 0"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 631
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_references_n
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B5.3] != [B5.4]
   T: ([B5.5]) ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

scoped_flag(bool &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b
   2: ref([B1.1]) (Member initializer)
   3: true
   4: this
   5: [B1.4]->ref
   6: [B1.5] = [B1.3]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~scoped_flag() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: this
   3: [B1.2]->ref
   4: [B1.3] = [B1.1]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_b::semantics()
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: [B7.4] ? [B2.1] : ([B3.1])
   2: this
   3: [B1.2]->m_throw_status
   4: [B1.3] = [B1.1]
   5: this
   6: [B1.5]->m_semantics_host_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_process_host *)
   8: this
   9: [B1.8]->m_semantics_method_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, sc_core::SC_ENTRY_FUNC)
  11: [B1.7] ->* [B1.10]
  12: ([B1.11])()
  13: [B15.4].~sc_core::scoped_flag() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: THROW_ASYNC_RESET
   Preds (1): B7
   Succs (1): B1

 [B3]
   1: [B6.4] ? [B4.1] : [B5.1]
   Preds (2): B4 B5
   Succs (1): B1

 [B4]
   1: THROW_SYNC_RESET
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: THROW_NONE
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: this
   2: [B6.1]->m_active_reset_n
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B6.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B6.4] ? ... : ...
   Preds (1): B7
   Succs (2): B4 B5

 [B7]
   1: this
   2: [B7.1]->m_active_areset_n
   3: [B7.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B7.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B7.4] ? ... : ...
   Preds (3): B8 B9 B11
   Succs (2): B2 B6

 [B8]
   1: this
   2: [B8.1]->trigger_reset_event
   3: [B8.2]()
   Preds (2): B9 B10
   Succs (1): B7

 [B9]
   1: this
   2: [B9.1]->m_throw_status
   3: [B9.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_process_b::process_throw_type)
   4: [B9.3] (ImplicitCastExpr, IntegralCast, int)
   5: THROW_ASYNC_RESET
   6: [B9.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B9.4] == [B9.6]
   T: if [B11.6] && (([B10.7]) || ([B9.7]))
   Preds (1): B10
   Succs (2): B8 B7

 [B10]
   1: this
   2: [B10.1]->m_throw_status
   3: [B10.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_process_b::process_throw_type)
   4: [B10.3] (ImplicitCastExpr, IntegralCast, int)
   5: THROW_SYNC_RESET
   6: [B10.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B10.4] == [B10.6]
   T: ([B10.7]) || ...
   Preds (1): B11
   Succs (2): B8 B9

 [B11]
   1: ([B15.11]) ? [B12.1] : ([B13.2])
   2: (void)([B11.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B11.3]->m_reset_event_p
   5: [B11.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   6: [B11.5] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B11.6] && ...
   Preds (2): B12 B13
   Succs (2): B10 B7

 [B12]
   1: 0
   Preds (1): B15
   Succs (1): B11

 [B13]
   1: 0
   2: ... , [B13.1]
   Preds (1): B14(Unreachable)
   Succs (1): B11

 [B14 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B14.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_process_kind != SC_NO_PROC_"
   4: [B14.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process.h"
   6: [B14.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 661
   8: [B14.2]([B14.4], [B14.6], [B14.7])
   Preds (1): B15
   Succs (1): B0

 [B15]
   1: this
   2: [B15.1]->m_has_stack
   3: [B15.2] (CXXConstructExpr, [B15.4], struct sc_core::scoped_flag)
   4: sc_core::scoped_flag scoped_stack_flag(this->m_has_stack);
   5: this
   6: [B15.5]->m_process_kind
   7: [B15.6] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_curr_proc_kind)
   8: [B15.7] (ImplicitCastExpr, IntegralCast, int)
   9: SC_NO_PROC_
  10: [B15.9] (ImplicitCastExpr, IntegralCast, int)
  11: [B15.8] != [B15.10]
   T: ([B15.11]) ? ... : ...
   Preds (1): B16
   Succs (2): B12 B14

 [B0 (EXIT)]
   Preds (2): B1 B14

inline bool sc_process_b::terminated() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_state
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: ps_bit_zombie
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B1.3] & [B1.5]
   7: 0
   8: ([B1.6]) != [B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_b::timed_out() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_timed_out
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_module_name::clear_module(sc_core::sc_module *module_p)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.6]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, class sc_core::sc_module *)
   5: module_p
   6: [B1.5] = [B1.4]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_module *)
   8: this
   9: [B1.8]->m_module_p
  10: [B1.9] = [B1.7]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_module_p == module_p"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_module_name.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 87
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_module_p
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_module *)
   4: module_p
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_module *)
   6: [B5.3] == [B5.5]
   T: ([B5.6]) ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

inline void sc_module_name::set_module(sc_core::sc_module *module_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: module_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_module *)
   3: this
   4: [B1.3]->m_module_p
   5: [B1.4] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_numrep sc_io_base(::std::ostream &os, sc_dt::sc_numrep def_base)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: def_base
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: SC_OCT
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: operator&
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: flags
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, std::ios::fmtflags)
   5: ::std::ios::oct
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, std::ios_base::fmtflags)
   7: [B3.4] & [B3.6] (OperatorCall)
   8: [B3.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.8]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: SC_HEX
   2: return [B4.1];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: operator&
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: flags
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, std::ios::fmtflags)
   5: ::std::ios::hex
   6: [B5.5] (ImplicitCastExpr, LValueToRValue, std::ios_base::fmtflags)
   7: [B5.4] & [B5.6] (OperatorCall)
   8: [B5.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.8]
   Preds (1): B7
   Succs (2): B4 B3

 [B6]
   1: SC_DEC
   2: return [B6.1];
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator&
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: os
   4: [B7.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class std::ios_base)
   5: [B7.4].flags
   6: [B7.5]()
   7: std::ios::basefield
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, std::ios_base::fmtflags)
   9: [B7.6] & [B7.8] (OperatorCall)
  10: std::ios::fmtflags flags = os.flags() & std::ios::basefield;
  11: operator&
  12: [B7.11] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
  13: flags
  14: [B7.13] (ImplicitCastExpr, LValueToRValue, std::ios::fmtflags)
  15: ::std::ios::dec
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, std::ios_base::fmtflags)
  17: [B7.14] & [B7.16] (OperatorCall)
  18: [B7.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.18]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (4): B1 B2 B4 B6

inline bool sc_io_show_base(::std::ostream &os)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum std::_Ios_Fmtflags (*)(enum std::_Ios_Fmtflags, enum std::_Ios_Fmtflags))
   3: os
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class std::ios_base)
   5: [B1.4].flags
   6: [B1.5]()
   7: ::std::ios::showbase
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, std::ios_base::fmtflags)
   9: [B1.6] & [B1.8] (OperatorCall)
  10: ([B1.9]) (ImplicitCastExpr, IntegralCast, int)
  11: 0
  12: [B1.10] != [B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_numrep numrep)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_numrep))
   6: numrep
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: os
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit low_half(sc_dt::sc_digit d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: 1UL
   5: 30
   6: 2
   7: [B1.5] / [B1.6]
   8: [B1.4] << ([B1.7])
   9: 1
  10: [B1.9] (ImplicitCastExpr, IntegralCast, unsigned long)
  11: ([B1.8]) - [B1.10]
  12: [B1.3] & ([B1.11])
  13: ([B1.12]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit high_half(sc_dt::sc_digit d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: 30
   4: 2
   5: [B1.3] / [B1.4]
   6: [B1.2] >> ([B1.5])
   7: return ([B1.6]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit high_half_masked(sc_dt::sc_digit d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: high_half
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(sc_dt::sc_digit))
   3: d
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   5: [B1.2]([B1.4])
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: 1UL
   8: 30
   9: 2
  10: [B1.8] / [B1.9]
  11: [B1.7] << ([B1.10])
  12: 1
  13: [B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: ([B1.11]) - [B1.13]
  15: [B1.6] & ([B1.14])
  16: ([B1.15]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit concat(sc_dt::sc_digit h, sc_dt::sc_digit l)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: h
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: 30
   4: 2
   5: [B1.3] / [B1.4]
   6: [B1.2] << ([B1.5])
   7: l
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   9: ([B1.6]) | [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit one_and_ones(int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
   3: (sc_dt::sc_digit)[B1.2] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
   4: n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3] << [B1.5]
   7: 1
   8: [B1.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: ([B1.6]) - [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_digit one_and_zeros(int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
   3: (sc_dt::sc_digit)[B1.2] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
   4: n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3] << [B1.5]
   7: return ([B1.6]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int digit_ord(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 30
   4: [B1.2] / [B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int bit_ord(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 30
   4: [B1.2] % [B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int vec_cmp(int ulen, const sc_dt::sc_digit *u, int vlen, const sc_dt::sc_digit *v)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: u
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   3: ulen
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2][[B1.4]]
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: v
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   9: ulen
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  13: [B1.6] - [B1.12]
  14: ([B1.13]) (ImplicitCastExpr, IntegralCast, int)
  15: (int)[B1.14] (CStyleCastExpr, NoOp, int)
  16: return [B1.15];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: ulen
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: if [B3.4]
   Preds (2): B5 B6
   Succs (2): B2 B1

 [B4]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: u
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   3: ulen
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: v
   8: [B5.7] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   9: ulen
  10: [B5.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B5.8][[B5.10]]
  12: [B5.11] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  13: [B5.6] == [B5.12]
   T: while ([B6.5]) && ([B5.13])
   Preds (1): B6
   Succs (2): B4 B3

 [B6]
   1: ulen
   2: --[B6.1]
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B6.3] >= [B6.4]
   T: ([B6.5]) && ...
   Preds (2): B4 B8
   Succs (2): B5 B3

 [B7]
   1: ulen
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: vlen
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2] - [B7.4]
   6: return ([B7.5]);
   Preds (1): B8
   Succs (1): B0

 [B8]
   1: ulen
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: vlen
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] != [B8.4]
   T: if [B8.5]
   Preds (1): B9
   Succs (2): B7 B6

 [B0 (EXIT)]
   Preds (3): B1 B2 B7

inline int vec_find_first_nonzero(int ulen, const sc_dt::sc_digit *u)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ulen
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B3 B4
   Succs (1): B0

 [B2]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: u
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   3: ulen
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: [B3.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   8: ![B3.7]
   T: while ([B4.5]) && ([B3.8])
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: ulen
   2: --[B4.1]
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B4.3] >= [B4.4]
   T: ([B4.5]) && ...
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline int vec_skip_leading_zeros(int ulen, const sc_dt::sc_digit *u)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: vec_find_first_nonzero
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *))
   4: ulen
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: u
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   8: [B1.3]([B1.5], [B1.7])
   9: [B1.1] + [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int vec_skip_and_cmp(int ulen, const sc_dt::sc_digit *u, int vlen, const sc_dt::sc_digit *v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: vec_skip_leading_zeros
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *))
   3: ulen
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: u
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   7: [B1.2]([B1.4], [B1.6])
   8: ulen
   9: [B1.8] = [B1.7]
  10: vec_skip_leading_zeros
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *))
  12: vlen
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  16: [B1.11]([B1.13], [B1.15])
  17: vlen
  18: [B1.17] = [B1.16]
  19: vec_cmp
  20: [B1.19] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *, int, const sc_dt::sc_digit *))
  21: ulen
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: u
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  25: vlen
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: v
  28: [B1.27] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  29: [B1.20]([B1.22], [B1.24], [B1.26], [B1.28])
  30: return [B1.29];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void vec_zero(int from, int ulen, sc_dt::sc_digit *u)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: i
   2: [B1.1]++
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: 0
   2: [B2.1] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
   3: u
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   5: i
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B2.4][[B2.6]]
   8: [B2.7] = [B2.2]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ulen
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (...; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: from
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: int i = from;
   Preds (1): B5
   Succs (1): B3

 [B0 (EXIT)]
   Preds (1): B3

inline void vec_zero(int ulen, sc_dt::sc_digit *u)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: vec_zero
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, int, sc_dt::sc_digit *))
   3: 0
   4: ulen
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: u
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   8: [B1.2]([B1.3], [B1.5], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void vec_copy(int n, sc_dt::sc_digit *u, const sc_dt::sc_digit *v)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: v
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: u
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: i
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.8][[B2.10]]
  12: [B2.11] = [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (...; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: 0
   2: int i = 0;
   Preds (1): B5
   Succs (1): B3

 [B0 (EXIT)]
   Preds (1): B3

inline void vec_copy_and_zero(int ulen, sc_dt::sc_digit *u, int vlen, const sc_dt::sc_digit *v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: vec_copy
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *, const sc_dt::sc_digit *))
   3: vlen
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: u
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: v
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: vec_zero
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, int, sc_dt::sc_digit *))
  12: vlen
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: ulen
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: u
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  18: [B1.11]([B1.13], [B1.15], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void vec_complement(int ulen, sc_dt::sc_digit *u)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: carry
   2: u
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: i
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3][[B2.5]]
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned long)
  10: 1UL
  11: 30
  12: [B2.10] << [B2.11]
  13: 1
  14: [B2.13] (ImplicitCastExpr, IntegralCast, unsigned long)
  15: ([B2.12]) - [B2.14]
  16: [B2.9] & ([B2.15])
  17: [B2.1] += ([B2.16])
  18: carry
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: [B2.19] (ImplicitCastExpr, IntegralCast, unsigned long)
  21: 1UL
  22: 30
  23: [B2.21] << [B2.22]
  24: 1
  25: [B2.24] (ImplicitCastExpr, IntegralCast, unsigned long)
  26: ([B2.23]) - [B2.25]
  27: [B2.20] & ([B2.26])
  28: [B2.27] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  29: u
  30: [B2.29] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  31: i
  32: [B2.31] (ImplicitCastExpr, LValueToRValue, int)
  33: [B2.30][[B2.32]]
  34: [B2.33] = [B2.28]
  35: carry
  36: 30
  37: [B2.35] >>= [B2.36]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ulen
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (...; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: 1
   2: [B4.1] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
   3: sc_dt::sc_digit carry = 1;
   4: 0
   5: int i = 0;
   Preds (1): B5
   Succs (1): B3

 [B0 (EXIT)]
   Preds (1): B3

inline sc_dt::small_type mul_signs(sc_dt::small_type us, sc_dt::small_type vs)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: 1
   2: -[B1.1]
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 1
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: us
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: vs
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: 0
   2: return [B4.1];
   Preds (2): B5 B6
   Succs (1): B0

 [B5]
   1: vs
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: 0
   4: [B5.2] == [B5.3]
   T: if ([B6.4]) || ([B5.4])
   Preds (1): B6
   Succs (2): B4 B3

 [B6]
   1: us
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: 0
   4: [B6.2] == [B6.3]
   T: ([B6.4]) || ...
   Preds (1): B7
   Succs (2): B4 B5

 [B0 (EXIT)]
   Preds (3): B1 B2 B4

inline sc_dt::small_type check_for_zero(sc_dt::small_type s, int ulen, const sc_dt::sc_digit *u)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: s
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 0
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: vec_find_first_nonzero
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *))
   3: ulen
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: u
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   7: [B3.2]([B3.4], [B3.6])
   8: 0
   9: [B3.7] < [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool check_for_zero(int ulen, const sc_dt::sc_digit *u)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: true
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: vec_find_first_nonzero
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const sc_dt::sc_digit *))
   3: ulen
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: u
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   7: [B3.2]([B3.4], [B3.6])
   8: 0
   9: [B3.7] < [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_dt::small_type make_zero(int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: vec_zero
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *))
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: d
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: [B1.2]([B1.4], [B1.6])
   8: 0
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void trim(sc_dt::small_type added, int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] - [B1.5]
   7: [B1.2][[B1.6]]
   8: one_and_ones
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
  10: bit_ord
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: 1
  15: [B1.13] - [B1.14]
  16: [B1.11]([B1.15])
  17: added
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
  19: [B1.16] + [B1.18]
  20: [B1.9]([B1.19])
  21: [B1.7] &= [B1.20]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void convert_SM_to_2C_trimmed(sc_dt::small_type added, sc_dt::small_type s, int nb, int nd, sc_dt::sc_digit *d)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: vec_complement
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *))
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: d
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: [B1.2]([B1.4], [B1.6])
   8: trim
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, int, sc_dt::sc_digit *))
  10: added
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: nd
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: d
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  18: [B1.9]([B1.11], [B1.13], [B1.15], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: s
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: 1
   4: -[B2.3]
   5: [B2.2] == [B2.4]
   T: if [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void convert_SM_to_2C(sc_dt::small_type s, int nd, sc_dt::sc_digit *d)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: vec_complement
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *))
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: d
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: s
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: 1
   4: -[B2.3]
   5: [B2.2] == [B2.4]
   T: if [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void trim_signed(int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] - [B1.5]
   7: [B1.2][[B1.6]]
   8: one_and_ones
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
  10: bit_ord
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: 1
  15: [B1.13] - [B1.14]
  16: [B1.11]([B1.15])
  17: 1
  18: [B1.16] + [B1.17]
  19: [B1.9]([B1.18])
  20: [B1.7] &= [B1.19]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::small_type convert_signed_2C_to_SM(int nb, int nd, sc_dt::sc_digit *d)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: s
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: check_for_zero
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, const sc_dt::sc_digit *))
   3: s
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: nd
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B2.8] (ImplicitCastExpr, NoOp, const sc_dt::sc_digit *)
  10: [B2.2]([B2.4], [B2.6], [B2.9])
  11: return [B2.10];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: d
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: nd
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B3.4] - [B3.5]
   7: [B3.2][[B3.6]]
   8: one_and_ones
   9: [B3.8] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
  10: xnb
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B3.9]([B3.11])
  13: [B3.7] &= [B3.12]
  14: s
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
  16: 1
  17: [B3.15] == [B3.16]
   T: if [B3.17]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: 1
   2: s
   3: [B4.2] = [B4.1]
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: 1
   2: -[B5.1]
   3: s
   4: [B5.3] = [B5.2]
   5: vec_complement
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *))
   7: nd
   8: [B5.7] (ImplicitCastExpr, LValueToRValue, int)
   9: d
  10: [B5.9] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  11: [B5.6]([B5.8], [B5.10])
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: sc_dt::small_type s;
   2: bit_ord
   3: [B6.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
   4: nb
   5: [B6.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B6.5] - [B6.6]
   8: [B6.3]([B6.7])
   9: 1
  10: [B6.8] + [B6.9]
  11: int xnb = bit_ord(nb - 1) + 1;
  12: d
  13: [B6.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  14: nd
  15: [B6.14] (ImplicitCastExpr, LValueToRValue, int)
  16: 1
  17: [B6.15] - [B6.16]
  18: [B6.13][[B6.17]]
  19: [B6.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: one_and_zeros
  21: [B6.20] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
  22: xnb
  23: [B6.22] (ImplicitCastExpr, LValueToRValue, int)
  24: 1
  25: [B6.23] - [B6.24]
  26: [B6.21]([B6.25])
  27: [B6.19] & [B6.26]
  28: [B6.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B6.28]
   Preds (1): B7
   Succs (2): B5 B4

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_dt::small_type convert_signed_SM_to_2C_to_SM(sc_dt::small_type s, int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: nd
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: convert_signed_2C_to_SM
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, int, sc_dt::sc_digit *))
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: nd
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: d
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  18: [B1.11]([B1.13], [B1.15], [B1.17])
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void convert_signed_SM_to_2C_trimmed(sc_dt::small_type s, int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C_trimmed
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: 1
   4: s
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: nb
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: nd
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: d
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void convert_signed_SM_to_2C(sc_dt::small_type s, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: nd
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void trim_unsigned(int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: nd
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] - [B1.5]
   7: [B1.2][[B1.6]]
   8: one_and_ones
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
  10: bit_ord
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: 1
  15: [B1.13] - [B1.14]
  16: [B1.11]([B1.15])
  17: [B1.9]([B1.16])
  18: [B1.7] &= [B1.17]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::small_type convert_unsigned_2C_to_SM(int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: trim_unsigned
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, int, sc_dt::sc_digit *))
   3: nb
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: nd
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: check_for_zero
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, const sc_dt::sc_digit *))
  12: 1
  13: nd
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: d
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  17: [B1.16] (ImplicitCastExpr, NoOp, const sc_dt::sc_digit *)
  18: [B1.11]([B1.12], [B1.14], [B1.17])
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::small_type convert_unsigned_SM_to_2C_to_SM(sc_dt::small_type s, int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: nd
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
  10: convert_unsigned_2C_to_SM
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, int, sc_dt::sc_digit *))
  12: nb
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: nd
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: d
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  18: [B1.11]([B1.13], [B1.15], [B1.17])
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void convert_unsigned_SM_to_2C_trimmed(sc_dt::small_type s, int nb, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C_trimmed
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: 0
   4: s
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: nb
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: nd
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: d
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void convert_unsigned_SM_to_2C(sc_dt::small_type s, int nd, sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: s
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: nd
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.4], [B1.6], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void copy_digits_signed(sc_dt::small_type &us, int unb, int und, sc_dt::sc_digit *ud, int vnb, int vnd, const sc_dt::sc_digit *vd)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: vec_copy_and_zero
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *, int, const sc_dt::sc_digit *))
   3: und
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ud
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: vnd
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: vd
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  11: [B1.2]([B1.4], [B1.6], [B1.8], [B1.10])
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: convert_signed_SM_to_2C_to_SM
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: us
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: unb
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: und
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ud
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  11: [B2.2]([B2.4], [B2.6], [B2.8], [B2.10])
  12: us
  13: [B2.12] = [B2.11]
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: vec_copy
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *, const sc_dt::sc_digit *))
   3: und
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ud
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: vd
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   9: [B3.2]([B3.4], [B3.6], [B3.8])
  10: unb
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: vnb
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.11] <= [B3.13]
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B0

 [B4]
   1: und
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: vnd
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] <= [B4.4]
   T: if [B4.5]
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (3): B1 B2 B3

inline void copy_digits_unsigned(sc_dt::small_type &us, int unb, int und, sc_dt::sc_digit *ud, int, int vnd, const sc_dt::sc_digit *vd)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: convert_unsigned_SM_to_2C_to_SM
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: us
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   5: unb
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: und
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: ud
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  11: [B1.2]([B1.4], [B1.6], [B1.8], [B1.10])
  12: us
  13: [B1.12] = [B1.11]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: vec_copy_and_zero
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *, int, const sc_dt::sc_digit *))
   3: und
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ud
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: vnd
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: vd
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  11: [B2.2]([B2.4], [B2.6], [B2.8], [B2.10])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: vec_copy
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, sc_dt::sc_digit *, const sc_dt::sc_digit *))
   3: und
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: ud
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   7: vd
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
   9: [B3.2]([B3.4], [B3.6], [B3.8])
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: und
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: vnd
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] <= [B4.4]
   T: if [B4.5]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

inline void safe_set(int i, bool v, sc_dt::sc_digit *d)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: digit_num
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2][[B1.4]]
   6: one_and_zeros
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
   8: bit_num
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B1.7]([B1.9])
  11: ~([B1.10])
  12: [B1.5] &= [B1.11]
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: d
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: digit_num
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: one_and_zeros
   7: [B2.6] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::sc_digit (*)(int))
   8: bit_num
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B2.7]([B2.9])
  11: [B2.5] |= [B2.10]
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: bit_ord
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
   3: i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2]([B3.4])
   6: int bit_num = bit_ord(i);
   7: digit_ord
   8: [B3.7] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
   9: i
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8]([B3.10])
  12: int digit_num = digit_ord(i);
  13: v
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool is_nan(double v)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.2] && ([B2.5])
   2: return [B1.1];
   Preds (2): B2 B3(Unreachable)
   Succs (1): B0

 [B2]
   1: v
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, double)
   3: v
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, double)
   5: [B2.2] != [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: std::numeric_limits<double>::has_quiet_NaN
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.2] && ...
   Preds (1): B4
   Succs (2): B2 B1(Unreachable)

 [B0 (EXIT)]
   Preds (1): B1

inline bool is_inf(double v)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.6] || [B2.7]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: v
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, double)
   3: std::numeric_limits<double>::infinity
   4: [B2.3] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(void) noexcept)
   5: [B2.4]()
   6: -[B2.5]
   7: [B2.2] == [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: v
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, double)
   3: std::numeric_limits<double>::infinity
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(void) noexcept)
   5: [B3.4]()
   6: [B3.2] == [B3.5]
   T: [B3.6] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

inline void is_bad_double(double v)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_ERROR
   4: sc_core::SC_ID_VALUE_NOT_VALID_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "is_bad_double( double v ) : v is not finite - NaN or Inf"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/int/sc_nbutils.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 1019
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: is_inf
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(double))
   3: v
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, double)
   5: [B2.2]([B2.4])
   T: if [B3.5] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: is_nan
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(double))
   3: v
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, double)
   5: [B3.2]([B3.4])
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_enc enc)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_enc))
   6: enc
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_enc)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_q_mode q_mode)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_q_mode))
   6: q_mode
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_q_mode)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_o_mode o_mode)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_o_mode))
   6: o_mode
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_o_mode)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_switch sw)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_switch))
   6: sw
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_switch)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, sc_dt::sc_fmt fmt)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: to_string
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const std::string (*)(enum sc_dt::sc_fmt))
   6: fmt
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_fmt)
   8: [B1.5]([B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] << [B1.10] (OperatorCall)
  12: ~const std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_double::scfx_ieee_double()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_id() (Member initializer), union sc_dt::ieee_double)
   2: m_id([B1.1]) (Member initializer)
   3: 0.
   4: this
   5: [B1.4]->m_id
   6: [B1.5].d
   7: [B1.6] = [B1.3]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_double::scfx_ieee_double(double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_id() (Member initializer), union sc_dt::ieee_double)
   2: m_id([B1.1]) (Member initializer)
   3: d
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: this
   6: [B1.5]->m_id
   7: [B1.6].d
   8: [B1.7] = [B1.4]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_double::scfx_ieee_double(const sc_dt::scfx_ieee_double &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_id
   3: [B1.2] (CXXConstructExpr, m_id([B1.2]) (Member initializer), union sc_dt::ieee_double)
   4: m_id([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::scfx_ieee_double &scfx_ieee_double::operator=(double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: d
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, double)
   3: this
   4: [B1.3]->m_id
   5: [B1.4].d
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::scfx_ieee_double &scfx_ieee_double::operator=(const sc_dt::scfx_ieee_double &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_id
   3: [B1.2].d
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: this
   6: [B1.5]->m_id
   7: [B1.6].d
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_double::operator double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_id
   3: [B1.2].d
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int scfx_ieee_double::negative() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_id
   3: [B1.2].s
   4: [B1.3].negative
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::negative(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1U
   4: 1
   5: [B1.3] << ([B1.4])
   6: 1U
   7: ([B1.5]) - [B1.6]
   8: [B1.2] & ([B1.7])
   9: this
  10: [B1.9]->m_id
  11: [B1.10].s
  12: [B1.11].negative
  13: [B1.12] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int scfx_ieee_double::exponent() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_id
   3: [B1.2].s
   4: [B1.3].exponent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: SCFX_IEEE_DOUBLE_BIAS
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: [B1.6] - [B1.8]
  10: [B1.9] (ImplicitCastExpr, IntegralCast, int)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::exponent(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SCFX_IEEE_DOUBLE_BIAS
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: [B1.2] + [B1.5]
   7: 1U
   8: SCFX_IEEE_DOUBLE_E_SIZE
   9: ([B1.8]) (ImplicitCastExpr, LValueToRValue, unsigned int)
  10: [B1.7] << [B1.9]
  11: 1U
  12: ([B1.10]) - [B1.11]
  13: ([B1.6]) & ([B1.12])
  14: this
  15: [B1.14]->m_id
  16: [B1.15].s
  17: [B1.16].exponent
  18: [B1.17] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int scfx_ieee_double::mantissa0() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_id
   3: [B1.2].s
   4: [B1.3].mantissa0
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::mantissa0(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1U
   4: SCFX_IEEE_DOUBLE_M0_SIZE
   5: ([B1.4]) (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.3] << [B1.5]
   7: 1U
   8: ([B1.6]) - [B1.7]
   9: [B1.2] & ([B1.8])
  10: this
  11: [B1.10]->m_id
  12: [B1.11].s
  13: [B1.12].mantissa0
  14: [B1.13] = [B1.9]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int scfx_ieee_double::mantissa1() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_id
   3: [B1.2].s
   4: [B1.3].mantissa1
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::mantissa1(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: this
   4: [B1.3]->m_id
   5: [B1.4].s
   6: [B1.5].mantissa1
   7: [B1.6] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_double::is_zero() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.8] && [B3.5] && [B2.5]
   2: return ([B1.1]);
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa1
   3: [B2.2]()
   4: 0U
   5: [B2.3] == [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->mantissa0
   3: [B3.2]()
   4: 0U
   5: [B3.3] == [B3.4]
   T: [B4.8] && [B3.5] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1]->exponent
   3: [B4.2]()
   4: SCFX_IEEE_DOUBLE_E_MIN
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B4.5] - [B4.6]
   8: [B4.3] == [B4.7]
   T: [B4.8] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_double::is_subnormal() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.8] && ([B3.5] || [B2.5])
   2: return ([B1.1]);
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa1
   3: [B2.2]()
   4: 0U
   5: [B2.3] != [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->mantissa0
   3: [B3.2]()
   4: 0U
   5: [B3.3] != [B3.4]
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B4]
   1: this
   2: [B4.1]->exponent
   3: [B4.2]()
   4: SCFX_IEEE_DOUBLE_E_MIN
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B4.5] - [B4.6]
   8: [B4.3] == [B4.7]
   T: [B4.8] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_double::is_normal() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.6] && [B2.6]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->exponent
   3: [B2.2]()
   4: SCFX_IEEE_DOUBLE_E_MAX
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3] <= [B2.5]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_DOUBLE_E_MIN
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.3] >= [B3.5]
   T: [B3.6] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_double::is_inf() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.8] && [B3.5] && [B2.5]
   2: return ([B1.1]);
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa1
   3: [B2.2]()
   4: 0U
   5: [B2.3] == [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->mantissa0
   3: [B3.2]()
   4: 0U
   5: [B3.3] == [B3.4]
   T: [B4.8] && [B3.5] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1]->exponent
   3: [B4.2]()
   4: SCFX_IEEE_DOUBLE_E_MAX
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B4.5] + [B4.6]
   8: [B4.3] == [B4.7]
   T: [B4.8] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_double::is_nan() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.8] && ([B3.5] || [B2.5])
   2: return ([B1.1]);
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa1
   3: [B2.2]()
   4: 0U
   5: [B2.3] != [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->mantissa0
   3: [B3.2]()
   4: 0U
   5: [B3.3] != [B3.4]
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B4]
   1: this
   2: [B4.1]->exponent
   3: [B4.2]()
   4: SCFX_IEEE_DOUBLE_E_MAX
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B4.5] + [B4.6]
   8: [B4.3] == [B4.7]
   T: [B4.8] && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::set_inf()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->exponent
   3: SCFX_IEEE_DOUBLE_E_MAX
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] + [B1.5]
   7: [B1.2]([B1.6])
   8: this
   9: [B1.8]->mantissa0
  10: 0U
  11: [B1.9]([B1.10])
  12: this
  13: [B1.12]->mantissa1
  14: 0U
  15: [B1.13]([B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_double::set_nan()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->exponent
   3: SCFX_IEEE_DOUBLE_E_MAX
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] + [B1.5]
   7: [B1.2]([B1.6])
   8: this
   9: [B1.8]->mantissa0
  10: 1
  11: -[B1.10]
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: (unsigned int)[B1.12] (CStyleCastExpr, NoOp, unsigned int)
  14: [B1.9]([B1.13])
  15: this
  16: [B1.15]->mantissa1
  17: 1
  18: -[B1.17]
  19: [B1.18] (ImplicitCastExpr, IntegralCast, unsigned int)
  20: (unsigned int)[B1.19] (CStyleCastExpr, NoOp, unsigned int)
  21: [B1.16]([B1.20])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int scfx_ieee_double::msb() const
 [B26 (ENTRY)]
   Succs (1): B25

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B13
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 52
   4: [B2.2] - [B2.3]
   5: return ([B2.4]);
   Preds (2): B3 B4
   Succs (1): B0

 [B3]
   1: m1
   2: 1
   3: [B3.1] >>= [B3.2]
   4: i
   5: 1
   6: [B3.4] += [B3.5]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: m1
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1
   4: [B4.2] >> [B4.3]
   5: [B4.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.5]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: m1
   2: 2
   3: [B5.1] >>= [B5.2]
   4: i
   5: 2
   6: [B5.4] += [B5.5]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: m1
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 2
   4: [B6.2] >> [B6.3]
   5: [B6.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B6.5]
   Preds (2): B7 B8
   Succs (2): B5 B4

 [B7]
   1: m1
   2: 4
   3: [B7.1] >>= [B7.2]
   4: i
   5: 4
   6: [B7.4] += [B7.5]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: m1
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 4
   4: [B8.2] >> [B8.3]
   5: [B8.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B8.5]
   Preds (2): B9 B10
   Succs (2): B7 B6

 [B9]
   1: m1
   2: 8
   3: [B9.1] >>= [B9.2]
   4: i
   5: 8
   6: [B9.4] += [B9.5]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: m1
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 8
   4: [B10.2] >> [B10.3]
   5: [B10.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B10.5]
   Preds (2): B11 B12
   Succs (2): B9 B8

 [B11]
   1: m1
   2: 16
   3: [B11.1] >>= [B11.2]
   4: i
   5: 16
   6: [B11.4] += [B11.5]
   Preds (1): B12
   Succs (1): B10

 [B12]
   1: 0
   2: int i = 0;
   3: m1
   4: [B12.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: 16
   6: [B12.4] >> [B12.5]
   7: [B12.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B12.7]
   Preds (1): B13
   Succs (2): B11 B10

 [B13]
   1: m1
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 0
   4: [B13.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: [B13.2] != [B13.4]
   T: if [B13.5]
   Preds (1): B25
   Succs (2): B12 B1

 [B14]
   1: i
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 20
   4: [B14.2] - [B14.3]
   5: return ([B14.4]);
   Preds (2): B15 B16
   Succs (1): B0

 [B15]
   1: m0
   2: 1
   3: [B15.1] >>= [B15.2]
   4: i
   5: 1
   6: [B15.4] += [B15.5]
   Preds (1): B16
   Succs (1): B14

 [B16]
   1: m0
   2: [B16.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1
   4: [B16.2] >> [B16.3]
   5: [B16.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B16.5]
   Preds (2): B17 B18
   Succs (2): B15 B14

 [B17]
   1: m0
   2: 2
   3: [B17.1] >>= [B17.2]
   4: i
   5: 2
   6: [B17.4] += [B17.5]
   Preds (1): B18
   Succs (1): B16

 [B18]
   1: m0
   2: [B18.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 2
   4: [B18.2] >> [B18.3]
   5: [B18.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B18.5]
   Preds (2): B19 B20
   Succs (2): B17 B16

 [B19]
   1: m0
   2: 4
   3: [B19.1] >>= [B19.2]
   4: i
   5: 4
   6: [B19.4] += [B19.5]
   Preds (1): B20
   Succs (1): B18

 [B20]
   1: m0
   2: [B20.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 4
   4: [B20.2] >> [B20.3]
   5: [B20.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B20.5]
   Preds (2): B21 B22
   Succs (2): B19 B18

 [B21]
   1: m0
   2: 8
   3: [B21.1] >>= [B21.2]
   4: i
   5: 8
   6: [B21.4] += [B21.5]
   Preds (1): B22
   Succs (1): B20

 [B22]
   1: m0
   2: [B22.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 8
   4: [B22.2] >> [B22.3]
   5: [B22.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B22.5]
   Preds (2): B23 B24
   Succs (2): B21 B20

 [B23]
   1: m0
   2: 16
   3: [B23.1] >>= [B23.2]
   4: i
   5: 16
   6: [B23.4] += [B23.5]
   Preds (1): B24
   Succs (1): B22

 [B24]
   1: 0
   2: int i = 0;
   3: m0
   4: [B24.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: 16
   6: [B24.4] >> [B24.5]
   7: [B24.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B24.7]
   Preds (1): B25
   Succs (2): B23 B22

 [B25]
   1: this
   2: [B25.1]->mantissa0
   3: [B25.2]()
   4: unsigned int m0 = this->mantissa0();
   5: this
   6: [B25.5]->mantissa1
   7: [B25.6]()
   8: unsigned int m1 = this->mantissa1();
   9: m0
  10: [B25.9] (ImplicitCastExpr, LValueToRValue, unsigned int)
  11: 0
  12: [B25.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: [B25.10] != [B25.12]
   T: if [B25.13]
   Preds (1): B26
   Succs (2): B24 B13

 [B0 (EXIT)]
   Preds (3): B1 B2 B14

inline int scfx_ieee_double::lsb() const
 [B26 (ENTRY)]
   Succs (1): B25

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B13
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 20
   4: [B2.2] - [B2.3]
   5: return ([B2.4]);
   Preds (2): B3 B4
   Succs (1): B0

 [B3]
   1: m0
   2: 1
   3: [B3.1] <<= [B3.2]
   4: i
   5: 1
   6: [B3.4] -= [B3.5]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: m0
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1
   4: [B4.2] << [B4.3]
   5: [B4.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.5]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: m0
   2: 2
   3: [B5.1] <<= [B5.2]
   4: i
   5: 2
   6: [B5.4] -= [B5.5]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: m0
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 2
   4: [B6.2] << [B6.3]
   5: [B6.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B6.5]
   Preds (2): B7 B8
   Succs (2): B5 B4

 [B7]
   1: m0
   2: 4
   3: [B7.1] <<= [B7.2]
   4: i
   5: 4
   6: [B7.4] -= [B7.5]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: m0
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 4
   4: [B8.2] << [B8.3]
   5: [B8.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B8.5]
   Preds (2): B9 B10
   Succs (2): B7 B6

 [B9]
   1: m0
   2: 8
   3: [B9.1] <<= [B9.2]
   4: i
   5: 8
   6: [B9.4] -= [B9.5]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: m0
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 8
   4: [B10.2] << [B10.3]
   5: [B10.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B10.5]
   Preds (2): B11 B12
   Succs (2): B9 B8

 [B11]
   1: m0
   2: 16
   3: [B11.1] <<= [B11.2]
   4: i
   5: 16
   6: [B11.4] -= [B11.5]
   Preds (1): B12
   Succs (1): B10

 [B12]
   1: 31
   2: int i = 31;
   3: m0
   4: [B12.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: 16
   6: [B12.4] << [B12.5]
   7: [B12.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B12.7]
   Preds (1): B13
   Succs (2): B11 B10

 [B13]
   1: m0
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 0
   4: [B13.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: [B13.2] != [B13.4]
   T: if [B13.5]
   Preds (1): B25
   Succs (2): B12 B1

 [B14]
   1: i
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 52
   4: [B14.2] - [B14.3]
   5: return ([B14.4]);
   Preds (2): B15 B16
   Succs (1): B0

 [B15]
   1: m1
   2: 1
   3: [B15.1] <<= [B15.2]
   4: i
   5: 1
   6: [B15.4] -= [B15.5]
   Preds (1): B16
   Succs (1): B14

 [B16]
   1: m1
   2: [B16.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1
   4: [B16.2] << [B16.3]
   5: [B16.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B16.5]
   Preds (2): B17 B18
   Succs (2): B15 B14

 [B17]
   1: m1
   2: 2
   3: [B17.1] <<= [B17.2]
   4: i
   5: 2
   6: [B17.4] -= [B17.5]
   Preds (1): B18
   Succs (1): B16

 [B18]
   1: m1
   2: [B18.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 2
   4: [B18.2] << [B18.3]
   5: [B18.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B18.5]
   Preds (2): B19 B20
   Succs (2): B17 B16

 [B19]
   1: m1
   2: 4
   3: [B19.1] <<= [B19.2]
   4: i
   5: 4
   6: [B19.4] -= [B19.5]
   Preds (1): B20
   Succs (1): B18

 [B20]
   1: m1
   2: [B20.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 4
   4: [B20.2] << [B20.3]
   5: [B20.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B20.5]
   Preds (2): B21 B22
   Succs (2): B19 B18

 [B21]
   1: m1
   2: 8
   3: [B21.1] <<= [B21.2]
   4: i
   5: 8
   6: [B21.4] -= [B21.5]
   Preds (1): B22
   Succs (1): B20

 [B22]
   1: m1
   2: [B22.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 8
   4: [B22.2] << [B22.3]
   5: [B22.4] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B22.5]
   Preds (2): B23 B24
   Succs (2): B21 B20

 [B23]
   1: m1
   2: 16
   3: [B23.1] <<= [B23.2]
   4: i
   5: 16
   6: [B23.4] -= [B23.5]
   Preds (1): B24
   Succs (1): B22

 [B24]
   1: 31
   2: int i = 31;
   3: m1
   4: [B24.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: 16
   6: [B24.4] << [B24.5]
   7: [B24.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B24.7]
   Preds (1): B25
   Succs (2): B23 B22

 [B25]
   1: this
   2: [B25.1]->mantissa0
   3: [B25.2]()
   4: unsigned int m0 = this->mantissa0();
   5: this
   6: [B25.5]->mantissa1
   7: [B25.6]()
   8: unsigned int m1 = this->mantissa1();
   9: m1
  10: [B25.9] (ImplicitCastExpr, LValueToRValue, unsigned int)
  11: 0
  12: [B25.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: [B25.10] != [B25.12]
   T: if [B25.13]
   Preds (1): B26
   Succs (2): B24 B13

 [B0 (EXIT)]
   Preds (3): B1 B2 B14

inline const sc_dt::scfx_ieee_double scfx_ieee_double::nan()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], class sc_dt::scfx_ieee_double)
   2: sc_dt::scfx_ieee_double id;
   3: id
   4: [B1.3].set_nan
   5: [B1.4]()
   6: id
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::scfx_ieee_double)
   8: [B1.7] (CXXConstructExpr, [B1.9], const class sc_dt::scfx_ieee_double)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::scfx_ieee_double scfx_ieee_double::inf(int sign)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sign
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B1.2] (ImplicitCastExpr, IntegralToFloating, double)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::scfx_ieee_double)
   5: sc_dt::scfx_ieee_double id(sign);
   6: id
   7: [B1.6].set_inf
   8: [B1.7]()
   9: id
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::scfx_ieee_double)
  11: [B1.10] (CXXConstructExpr, [B1.12], const class sc_dt::scfx_ieee_double)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_float::scfx_ieee_float()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_if() (Member initializer), union sc_dt::ieee_float)
   2: m_if([B1.1]) (Member initializer)
   3: 0.
   4: [B1.3] (ImplicitCastExpr, FloatingCast, float)
   5: this
   6: [B1.5]->m_if
   7: [B1.6].f
   8: [B1.7] = [B1.4]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_float::scfx_ieee_float(float f)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_if() (Member initializer), union sc_dt::ieee_float)
   2: m_if([B1.1]) (Member initializer)
   3: f
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, float)
   5: this
   6: [B1.5]->m_if
   7: [B1.6].f
   8: [B1.7] = [B1.4]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_float::scfx_ieee_float(const sc_dt::scfx_ieee_float &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_if
   3: [B1.2] (CXXConstructExpr, m_if([B1.2]) (Member initializer), union sc_dt::ieee_float)
   4: m_if([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::scfx_ieee_float &scfx_ieee_float::operator=(float f)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: f
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, float)
   3: this
   4: [B1.3]->m_if
   5: [B1.4].f
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::scfx_ieee_float &scfx_ieee_float::operator=(const sc_dt::scfx_ieee_float &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_if
   3: [B1.2].f
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, float)
   5: this
   6: [B1.5]->m_if
   7: [B1.6].f
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline scfx_ieee_float::operator float() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_if
   3: [B1.2].f
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, float)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int scfx_ieee_float::negative() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_if
   3: [B1.2].s
   4: [B1.3].negative
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_float::negative(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1U
   4: 1
   5: [B1.3] << ([B1.4])
   6: 1U
   7: ([B1.5]) - [B1.6]
   8: [B1.2] & ([B1.7])
   9: this
  10: [B1.9]->m_if
  11: [B1.10].s
  12: [B1.11].negative
  13: [B1.12] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int scfx_ieee_float::exponent() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_if
   3: [B1.2].s
   4: [B1.3].exponent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned int)
   7: SCFX_IEEE_FLOAT_BIAS
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: [B1.6] - [B1.8]
  10: [B1.9] (ImplicitCastExpr, IntegralCast, int)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_float::exponent(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SCFX_IEEE_FLOAT_BIAS
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: [B1.2] + [B1.5]
   7: 1U
   8: SCFX_IEEE_FLOAT_E_SIZE
   9: ([B1.8]) (ImplicitCastExpr, LValueToRValue, unsigned int)
  10: [B1.7] << [B1.9]
  11: 1U
  12: ([B1.10]) - [B1.11]
  13: ([B1.6]) & ([B1.12])
  14: this
  15: [B1.14]->m_if
  16: [B1.15].s
  17: [B1.16].exponent
  18: [B1.17] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int scfx_ieee_float::mantissa() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_if
   3: [B1.2].s
   4: [B1.3].mantissa
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_float::mantissa(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: 1U
   4: SCFX_IEEE_FLOAT_M_SIZE
   5: ([B1.4]) (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.3] << [B1.5]
   7: 1U
   8: ([B1.6]) - [B1.7]
   9: [B1.2] & ([B1.8])
  10: this
  11: [B1.10]->m_if
  12: [B1.11].s
  13: [B1.12].mantissa
  14: [B1.13] = [B1.9]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_float::is_zero() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.8] && [B2.5]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa
   3: [B2.2]()
   4: 0U
   5: [B2.3] == [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_FLOAT_E_MIN
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B3.5] - [B3.6]
   8: [B3.3] == [B3.7]
   T: [B3.8] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_float::is_subnormal() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.8] && [B2.5]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa
   3: [B2.2]()
   4: 0U
   5: [B2.3] != [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_FLOAT_E_MIN
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B3.5] - [B3.6]
   8: [B3.3] == [B3.7]
   T: [B3.8] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_float::is_normal() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.6] && [B2.6]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->exponent
   3: [B2.2]()
   4: SCFX_IEEE_FLOAT_E_MAX
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3] <= [B2.5]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_FLOAT_E_MIN
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.3] >= [B3.5]
   T: [B3.6] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_float::is_inf() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.8] && [B2.5]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa
   3: [B2.2]()
   4: 0U
   5: [B2.3] == [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_FLOAT_E_MAX
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B3.5] + [B3.6]
   8: [B3.3] == [B3.7]
   T: [B3.8] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool scfx_ieee_float::is_nan() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.8] && [B2.5]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->mantissa
   3: [B2.2]()
   4: 0U
   5: [B2.3] != [B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->exponent
   3: [B3.2]()
   4: SCFX_IEEE_FLOAT_E_MAX
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B3.5] + [B3.6]
   8: [B3.3] == [B3.7]
   T: [B3.8] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_float::set_inf()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->exponent
   3: SCFX_IEEE_FLOAT_E_MAX
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] + [B1.5]
   7: [B1.2]([B1.6])
   8: this
   9: [B1.8]->mantissa
  10: 0U
  11: [B1.9]([B1.10])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void scfx_ieee_float::set_nan()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->exponent
   3: SCFX_IEEE_FLOAT_E_MAX
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 1
   6: [B1.4] + [B1.5]
   7: [B1.2]([B1.6])
   8: this
   9: [B1.8]->mantissa
  10: 1
  11: -[B1.10]
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: (unsigned int)[B1.12] (CStyleCastExpr, NoOp, unsigned int)
  14: [B1.9]([B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double scfx_pow2(int exp)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: r
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::scfx_ieee_double)
   3: [B1.2].operator double
   4: [B1.2]
   5: [B1.4] (ImplicitCastExpr, UserDefinedConversion, double)
   6: return [B1.5];
   Preds (5): B2 B3 B5 B6 B7
   Succs (1): B0

 [B2]
   1: operator=
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::scfx_ieee_double &(*)(double))
   3: r
   4: 1.
   5: [B2.3] = [B2.4] (OperatorCall)
   6: r
   7: [B2.6].exponent
   8: exp
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B2.7]([B2.9])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: r
   2: [B3.1].set_inf
   3: [B3.2]()
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: exp
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: SCFX_IEEE_DOUBLE_E_MAX
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] > [B4.4]
   T: if [B4.5]
   Preds (1): B9
   Succs (2): B3 B2

 [B5]
   1: r
   2: [B5.1].mantissa1
   3: 1U
   4: exp
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.3] << [B5.5]
   7: [B5.2]([B5.6])
   Preds (1): B6
   Succs (1): B1

 [B6]
   1: exp
   2: 32
   3: [B6.1] += [B6.2]
   4: ([B6.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: 0
   6: [B6.4] >= [B6.5]
   T: if [B6.6]
   Preds (1): B8
   Succs (2): B5 B1

 [B7]
   1: r
   2: [B7.1].mantissa0
   3: 1U
   4: exp
   5: [B7.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B7.3] << [B7.5]
   7: [B7.2]([B7.6])
   Preds (1): B8
   Succs (1): B1

 [B8]
   1: operator=
   2: [B8.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::scfx_ieee_double &(*)(double))
   3: r
   4: 0.
   5: [B8.3] = [B8.4] (OperatorCall)
   6: exp
   7: SCFX_IEEE_DOUBLE_E_MIN
   8: [B8.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B8.6] -= [B8.8]
  10: exp
  11: 20
  12: [B8.10] += [B8.11]
  13: ([B8.12]) (ImplicitCastExpr, LValueToRValue, int)
  14: 0
  15: [B8.13] >= [B8.14]
   T: if [B8.15]
   Preds (1): B9
   Succs (2): B7 B6

 [B9]
   1:  (CXXConstructExpr, [B9.2], class sc_dt::scfx_ieee_double)
   2: sc_dt::scfx_ieee_double r;
   3: exp
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: SCFX_IEEE_DOUBLE_E_MIN
   6: [B9.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B9.4] < [B9.6]
   T: if [B9.7]
   Preds (1): B10
   Succs (2): B8 B4

 [B0 (EXIT)]
   Preds (1): B1

inline double uint64_to_double(sc_dt::uint64 a)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.12]) ? [B2.2] : [B3.7]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: tmp
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, double)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: tmp
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, double)
   3: sc_dt::scfx_pow2
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(int))
   5: 64
   6: [B3.4]([B3.5])
   7: [B3.2] + [B3.6]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: a
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   4: static_cast<sc_dt::int64>([B4.3]) (CXXStaticCastExpr, NoOp, sc_dt::int64)
   5: [B4.4] (ImplicitCastExpr, IntegralToFloating, double)
   6: static_cast<double>([B4.5]) (CXXStaticCastExpr, NoOp, double)
   7: double tmp = static_cast<double>(static_cast<sc_dt::int64>(a));
   8: tmp
   9: [B4.8] (ImplicitCastExpr, LValueToRValue, double)
  10: 0
  11: [B4.10] (ImplicitCastExpr, IntegralToFloating, double)
  12: [B4.9] >= [B4.11]
   T: ([B4.12]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

sc_time_tuple()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: m_value(/*implicit*/(sc_core::sc_time_tuple::value_type)0) (Member initializer)
   2: SC_SEC
   3: m_unit([B1.2]) (Member initializer)
   4: 1
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: m_offset([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_time_unit unit() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_unit
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator sc_time() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_double
   3: [B1.2]()
   4: this
   5: [B1.4]->m_unit
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: sc_core::sc_time([B1.3], [B1.6]) (CXXConstructExpr, [B1.9], [B1.10], class sc_core::sc_time)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_time::sc_time()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralCast, sc_core::sc_time::value_type)
   3: m_value([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_time::sc_time(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1].m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: m_value([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_time_tuple::sc_time_tuple(sc_core::sc_time_tuple::value_type v)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->init
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time_tuple::value_type)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: m_value(/*implicit*/(sc_core::sc_time_tuple::value_type)0) (Member initializer)
   2: SC_SEC
   3: m_unit([B2.2]) (Member initializer)
   4: 1
   5: [B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: m_offset([B2.5]) (Member initializer)
   7: v
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time_tuple::value_type)
   9: [B2.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.9]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_time_tuple::sc_time_tuple(const sc_core::sc_time &t)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->init
   3: t
   4: [B1.3].value
   5: [B1.4]()
   6: [B1.2]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: m_value(/*implicit*/(sc_core::sc_time_tuple::value_type)0) (Member initializer)
   2: SC_SEC
   3: m_unit([B2.2]) (Member initializer)
   4: 1
   5: [B2.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: m_offset([B2.5]) (Member initializer)
   7: operator!=
   8: [B2.7] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_core::sc_time &) const)
   9: t
  10: SC_ZERO_TIME
  11: [B2.9] != [B2.10] (OperatorCall)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_core::sc_time sc_time::from_seconds(double v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, double)
   3: SC_SEC
   4: sc_core::sc_time([B1.2], [B1.3]) (CXXConstructExpr, [B1.6], [B1.7], class sc_core::sc_time)
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   6: [B1.5]
   7: [B1.6] (CXXConstructExpr, [B1.8], class sc_core::sc_time)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator=(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1].m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: this
   5: [B1.4]->m_value
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_time::value_type sc_time::value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double sc_time::to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::uint64_to_double
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(sc_dt::uint64))
   3: this
   4: [B1.3]->m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double sc_time_tuple::to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::uint64_to_double
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(sc_dt::uint64))
   3: this
   4: [B1.3]->m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time_tuple::value_type)
   6: [B1.2]([B1.5])
   7: this
   8: [B1.7]->m_offset
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, unsigned int)
  10: [B1.9] (ImplicitCastExpr, IntegralToFloating, double)
  11: [B1.6] * [B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::string sc_time::to_string() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.5], class sc_core::sc_time_tuple)
   4: sc_core::sc_time_tuple([B1.3]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_time_tuple)
   5: [B1.4]
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_time_tuple)
   7: [B1.6].to_string
   8: [B1.7]() (CXXRecordTypedCall, [B1.9], [B1.10], [B1.11])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const std::string)
  12: ~std::string() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator==(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator!=(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator<(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] < [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator<=(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] <= [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator>(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] > [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_time::operator>=(const sc_core::sc_time &t) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   4: t
   5: [B1.4].m_value
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   7: [B1.3] >= [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator+=(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: t
   4: [B1.3].m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2] += [B1.5]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator-=(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: t
   4: [B1.3].m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2] -= [B1.5]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator+(const sc_core::sc_time &t1, const sc_core::sc_time &t2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(const class sc_core::sc_time &))
   3: t1
   4: [B1.3] (CXXConstructExpr, [B1.6], class sc_core::sc_time)
   5: sc_core::sc_time([B1.4]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_time)
   6: [B1.5]
   7: t2
   8: [B1.6] += [B1.7] (OperatorCall)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  10: [B1.9] (CXXConstructExpr, [B1.11], const class sc_core::sc_time)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator-(const sc_core::sc_time &t1, const sc_core::sc_time &t2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(const class sc_core::sc_time &))
   3: t1
   4: [B1.3] (CXXConstructExpr, [B1.6], class sc_core::sc_time)
   5: sc_core::sc_time([B1.4]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_time)
   6: [B1.5]
   7: t2
   8: [B1.6] -= [B1.7] (OperatorCall)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  10: [B1.9] (CXXConstructExpr, [B1.11], const class sc_core::sc_time)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator*=(double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::uint64_to_double
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(sc_dt::uint64))
   3: this
   4: [B1.3]->m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2]([B1.5])
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: [B1.6] * [B1.8]
  10: 0.5
  11: [B1.9] + [B1.10]
  12: volatile double tmp = sc_dt::uint64_to_double(this->m_value) * d + 0.5;
  13: tmp
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, double)
  15: [B1.14] (ImplicitCastExpr, FloatingToIntegral, sc_dt::int64)
  16: static_cast<sc_dt::int64>([B1.15]) (CXXStaticCastExpr, NoOp, sc_dt::int64)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_core::sc_time::value_type)
  18: this
  19: [B1.18]->m_value
  20: [B1.19] = [B1.17]
  21: this
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator/=(double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::uint64_to_double
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(sc_dt::uint64))
   3: this
   4: [B1.3]->m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2]([B1.5])
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: [B1.6] / [B1.8]
  10: 0.5
  11: [B1.9] + [B1.10]
  12: volatile double tmp = sc_dt::uint64_to_double(this->m_value) / d + 0.5;
  13: tmp
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, double)
  15: [B1.14] (ImplicitCastExpr, FloatingToIntegral, sc_dt::int64)
  16: static_cast<sc_dt::int64>([B1.15]) (CXXStaticCastExpr, NoOp, sc_dt::int64)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_core::sc_time::value_type)
  18: this
  19: [B1.18]->m_value
  20: [B1.19] = [B1.17]
  21: this
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_time &sc_time::operator%=(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: t
   4: [B1.3].m_value
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_time::value_type)
   6: [B1.2] %= [B1.5]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator*(const sc_core::sc_time &t, double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1] (CXXConstructExpr, [B1.3], class sc_core::sc_time)
   3: sc_core::sc_time tmp(t);
   4: operator*=
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(double))
   6: tmp
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: [B1.6] *= [B1.8] (OperatorCall)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10] (CXXConstructExpr, [B1.12], const class sc_core::sc_time)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator*(double d, const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1] (CXXConstructExpr, [B1.3], class sc_core::sc_time)
   3: sc_core::sc_time tmp(t);
   4: operator*=
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(double))
   6: tmp
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: [B1.6] *= [B1.8] (OperatorCall)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10] (CXXConstructExpr, [B1.12], const class sc_core::sc_time)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator/(const sc_core::sc_time &t, double d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1] (CXXConstructExpr, [B1.3], class sc_core::sc_time)
   3: sc_core::sc_time tmp(t);
   4: operator/=
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(double))
   6: tmp
   7: d
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: [B1.6] /= [B1.8] (OperatorCall)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10] (CXXConstructExpr, [B1.12], const class sc_core::sc_time)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double operator/(const sc_core::sc_time &t1, const sc_core::sc_time &t2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t1
   2: [B1.1].to_double
   3: [B1.2]()
   4: t2
   5: [B1.4].to_double
   6: [B1.5]()
   7: [B1.3] / [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time operator%(const sc_core::sc_time &t1, const sc_core::sc_time &t2)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t1
   2: [B1.1] (CXXConstructExpr, [B1.3], class sc_core::sc_time)
   3: sc_core::sc_time tmp(t1);
   4: operator%=
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(const class sc_core::sc_time &))
   6: tmp
   7: t2
   8: [B1.6] %= [B1.7] (OperatorCall)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  10: [B1.9] (CXXConstructExpr, [B1.11], const class sc_core::sc_time)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int do_hash(const void *key) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->hash
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_phash_base::hash_fn_t)
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, FunctionToPointerDecay, unsigned int (*)(const void *))
   6: key
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const void *)
   8: [B1.5]([B1.7])
   9: this
  10: [B1.9]->num_bins
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B1.11] (ImplicitCastExpr, IntegralCast, unsigned int)
  13: [B1.8] % [B1.12]
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_phash_elem *find_entry(unsigned int hv, const void *k, sc_core::sc_phash_elem ***plast = 0) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: (sc_core::sc_phash_base *)[B1.1] (CStyleCastExpr, NoOp, class sc_core::sc_phash_base *)
   3: ([B1.2])->find_entry_c
   4: hv
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: k
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const void *)
   8: plast
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_phash_elem ***)
  10: [B1.3]([B1.5], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: (sc_core::sc_phash_base *)[B2.1] (CStyleCastExpr, NoOp, class sc_core::sc_phash_base *)
   3: ([B2.2])->find_entry_q
   4: hv
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: k
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, const void *)
   8: plast
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_phash_elem ***)
  10: [B2.3]([B2.5], [B2.7], [B2.9])
  11: return [B2.10];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->cmpr
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_phash_base::cmpr_fn_t)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_phash_base::cmpr_fn_t)
   6: [B3.3] == [B3.5]
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

bool empty() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->num_entries
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B1.3] == [B1.4]
   6: return ([B1.5]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int count() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->num_entries
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void copy(const sc_core::sc_phash_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->copy
   3: b
   4: &[B1.3]
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int insert(void *k)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->insert
   3: k
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: this
   6: [B1.5]->default_value
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: [B1.2]([B1.4], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int insert_if_not_exists(void *k)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->insert_if_not_exists
   3: k
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: this
   6: [B1.5]->default_value
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: [B1.2]([B1.4], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool contains(const void *k) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->lookup
   3: k
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, void **)
   7: [B1.2]([B1.4], [B1.6])
   8: 0
   9: [B1.7] != [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void reset(sc_core::sc_phash_base &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->reset
   3: t
   4: &[B1.3]
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_phash_base_iter(sc_core::sc_phash_base *t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_phash_base *)
   3: table([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem *)
   6: entry([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem *)
   9: next([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem **)
  12: last([B1.11]) (Member initializer)
  13: 0
  14: index([B1.13]) (Member initializer)
  15: this
  16: [B1.15]->reset
  17: t
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_phash_base *)
  19: [B1.16]([B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_phash_base_iter(sc_core::sc_phash_base &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: t
   2: &[B1.1]
   3: table([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem *)
   6: entry([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem *)
   9: next([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_phash_elem **)
  12: last([B1.11]) (Member initializer)
  13: 0
  14: index([B1.13]) (Member initializer)
  15: this
  16: [B1.15]->reset
  17: t
  18: [B1.16]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_phash_base_iter() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator++(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->step
   3: [B1.2]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void *top() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_heap
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, void **)
   4: 1
   5: [B1.3][[B1.4]]
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_heap_size
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool empty() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_heap_size
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B1.3] == [B1.4]
   6: return ([B1.5]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int parent(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 1
   4: [B1.2] >> [B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int left(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 1
   4: [B1.2] << [B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int right(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 1
   4: [B1.2] << [B1.3]
   5: 1
   6: ([B1.4]) + [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_curr_proc_info()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   3: process_handle([B1.2]) (Member initializer)
   4: SC_NO_PROC_
   5: kind([B1.4]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_start(int duration, sc_core::sc_time_unit unit, sc_core::sc_starvation_policy p = SC_RUN_TO_TIME)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_start
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, enum sc_core::sc_starvation_policy))
   3: duration
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralToFloating, double)
   6: (double)[B1.5] (CStyleCastExpr, NoOp, double)
   7: unit
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   9: sc_core::sc_time([B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_starvation_policy)
  14: [B1.2]([B1.11], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_start(double duration, sc_core::sc_time_unit unit, sc_core::sc_starvation_policy p = SC_RUN_TO_TIME)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_start
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, enum sc_core::sc_starvation_policy))
   3: duration
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: unit
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: sc_core::sc_time([B1.4], [B1.6]) (CXXConstructExpr, [B1.9], class sc_core::sc_time)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   9: [B1.8]
  10: p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_starvation_policy)
  12: [B1.2]([B1.9], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_cor_pkg *cor_pkg()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cor_pkg
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_cor_pkg *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_simcontext *sc_get_curr_simcontext()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: sc_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: CFGNewAllocator(sc_core::sc_simcontext *)
   2:  (CXXConstructExpr, [B2.3], class sc_core::sc_simcontext)
   3: new sc_core::sc_simcontext
   4: sc_default_global_context
   5: [B2.4] = [B2.3]
   6: sc_default_global_context
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   8: sc_curr_simcontext
   9: [B2.8] = [B2.7]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: sc_curr_simcontext
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   3: 0
   4: [B3.3] (ImplicitCastExpr, NullToPointer, class sc_core::sc_simcontext *)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_status sc_get_status()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   5: [B1.4]->get_status
   6: [B1.5]()
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::elaboration_done() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_elaboration_done
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_status sc_simcontext::get_status() const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: [B7.7] ? [B2.3] : ([B3.1])
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_simulation_status
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_status)
   Preds (1): B7
   Succs (1): B1

 [B3]
   1: [B6.3] ? [B4.1] : [B5.1]
   Preds (2): B4 B5
   Succs (1): B1

 [B4]
   1: SC_RUNNING
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: SC_PAUSED
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: this
   2: [B6.1]->m_in_simulator_control
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B6.3] ? ... : ...
   Preds (1): B7
   Succs (2): B4 B5

 [B7]
   1: this
   2: [B7.1]->m_simulation_status
   3: [B7.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_status)
   4: [B7.3] (ImplicitCastExpr, IntegralCast, int)
   5: SC_RUNNING
   6: [B7.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B7.4] != [B7.6]
   T: [B7.7] ? ... : ...
   Preds (1): B8
   Succs (2): B2 B6

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_simcontext::sim_status() const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: SC_SIM_OK
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: SC_SIM_USER_STOP
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B2.2];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_forced_stop
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.3]
   Preds (1): B5
   Succs (2): B2 B1

 [B4]
   1: SC_SIM_ERROR
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B4.2];
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_error
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   4: [B5.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B5.4]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (3): B1 B2 B4

inline sc_core::sc_object_manager *sc_simcontext::get_object_manager()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_object_manager
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object_manager *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_module_registry *sc_simcontext::get_module_registry()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_module_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_module_registry *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_port_registry *sc_simcontext::get_port_registry()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_port_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_port_registry *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_export_registry *sc_simcontext::get_export_registry()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_export_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_export_registry *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_prim_channel_registry *sc_simcontext::get_prim_channel_registry()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_prim_channel_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel_registry *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_curr_proc_handle sc_simcontext::get_curr_proc_info()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_curr_proc_info
   3: &[B1.2]
   4: [B1.3] (ImplicitCastExpr, NoOp, sc_core::sc_curr_proc_handle)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_simcontext::next_proc_id()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_next_proc_id
   3: ++[B1.2]
   4: ([B1.3]) (ImplicitCastExpr, LValueToRValue, int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time &sc_simcontext::max_time() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_max_time
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: operator=
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time &(*)(const class sc_core::sc_time &))
   3: this
   4: [B2.3]->m_max_time
   5: sc_time::from_value
   6: [B2.5] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_time (*)(sc_core::sc_time::value_type))
   7: sc_dt::UINT64_ZERO
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   9: ~[B2.8]
  10: [B2.6]([B2.9]) (CXXRecordTypedCall, [B2.12])
  11: [B2.10] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  12: [B2.11]
  13: [B2.4] = [B2.12] (OperatorCall)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: operator==
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_core::sc_time &) const)
   3: this
   4: [B3.3]->m_max_time
   5: [B3.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   6: SC_ZERO_TIME
   7: [B3.5] == [B3.6] (OperatorCall)
   T: if [B3.7]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_simcontext::change_stamp() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_change_stamp
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_simcontext::delta_count_at_current_time() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_delta_count
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   4: this
   5: [B1.4]->m_initial_delta_count_at_current_time
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: [B1.3] - [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_time &sc_simcontext::time_stamp() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_curr_time
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::event_occurred(sc_dt::uint64 last_change_stamp) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_change_stamp
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   4: last_change_stamp
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   6: [B1.3] == [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::evaluation_phase() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ([B3.7]) && [B2.3]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_ready_to_simulate
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_execution_phase
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_simcontext::execution_phases)
   4: [B3.3] (ImplicitCastExpr, IntegralCast, int)
   5: phase_evaluate
   6: [B3.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B3.4] == [B3.6]
   T: ([B3.7]) && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::update_phase() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_execution_phase
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_simcontext::execution_phases)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: phase_update
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.4] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::notify_phase() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_execution_phase
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_simcontext::execution_phases)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: phase_notify
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.4] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_simcontext::set_error(sc_core::sc_report *err)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_error
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   4: [B1.3]->~sc_report() (Implicit destructor)
   5: delete [B1.3]
   6: err
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   8: this
   9: [B1.8]->m_error
  10: [B1.9] = [B1.7]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::get_error()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_error
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_report *)
   4: __null
   5: [B1.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_report *)
   6: [B1.3] != [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_simcontext::add_delta_event(sc_core::sc_event *e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_delta_events
   3: [B1.2].push_back
   4: e
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_event *>::value_type)
   6: [B1.3]([B1.5])
   7: this
   8: [B1.7]->m_delta_events
   9: [B1.8] (ImplicitCastExpr, NoOp, const class std::vector<class sc_core::sc_event *>)
  10: [B1.9].size
  11: [B1.10]()
  12: 1
  13: [B1.12] (ImplicitCastExpr, IntegralCast, unsigned long)
  14: [B1.11] - [B1.13]
  15: [B1.14] (ImplicitCastExpr, IntegralCast, int)
  16: static_cast<int>([B1.15]) (CXXStaticCastExpr, NoOp, int)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_simcontext::add_timed_event(sc_core::sc_event_timed *et)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_timed_events
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_ppq<class sc_core::sc_event_timed *> *)
   4: [B1.3]->insert
   5: et
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_timed *)
   7: [B1.4]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_process_b *sc_simcontext::get_current_writer() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_current_writer
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_simcontext::write_check() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_write_check
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_simcontext::sc_signal_write_check)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: SC_SIGNAL_WRITE_CHECK_DISABLE_
   6: [B1.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B1.4] != [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_object *sc_get_current_object()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->active_object
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_process_b *sc_get_current_process_b()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->get_curr_proc_info
   5: [B1.4]()
   6: [B1.5]->process_handle
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_curr_proc_kind sc_get_curr_process_kind()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->get_curr_proc_info
   5: [B1.4]()
   6: [B1.5]->kind
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_curr_proc_kind)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_get_simulator_status()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   5: [B1.4]->sim_status
   6: [B1.5]()
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::vector<sc_event *> &sc_get_top_level_events(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: simc_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   3: [B1.2]->m_child_events
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::vector<sc_object *> &sc_get_top_level_objects(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: simc_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   3: [B1.2]->m_child_objects
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_delta_count()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->m_delta_count
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_delta_count_at_current_time()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   5: [B1.4]->delta_count_at_current_time
   6: [B1.5]()
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_is_running(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: simc_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   3: [B1.2]->m_ready_to_simulate
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_pause()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: sc_get_curr_simcontext
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   4: [B1.3]()
   5: [B1.4]->m_paused
   6: [B1.5] = [B1.1]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_pending_activity_at_current_time(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: simc_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   3: [B1.2]->pending_activity_at_current_time
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_pending_activity_at_future_time(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], class sc_core::sc_time)
   2: sc_core::sc_time ignored;
   3: simc_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   5: [B1.4]->next_time
   6: ignored
   7: [B1.5]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_pending_activity(const sc_core::sc_simcontext *simc_p = sc_get_curr_simcontext())
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.5] || [B2.5]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: sc_pending_activity_at_future_time
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_core::sc_simcontext *))
   3: simc_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: sc_pending_activity_at_current_time
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_core::sc_simcontext *))
   3: simc_p
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_simcontext *)
   5: [B3.2]([B3.4])
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_end_of_simulation_invoked()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->m_end_of_simulation_called
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_hierarchical_name_exists(const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->hierarchical_name_exists
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_hierarchical_name_exists(const sc_core::sc_object *parent, const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->hierarchical_name_exists
   5: parent
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const char *sc_get_hierarchical_name(const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->get_hierarchical_name
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const char *sc_get_hierarchical_name(const sc_core::sc_object *parent, const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->get_hierarchical_name
   5: parent
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_register_hierarchical_name(const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->register_hierarchical_name
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_register_hierarchical_name(const sc_core::sc_object *parent, const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->register_hierarchical_name
   5: parent
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unregister_hierarchical_name(const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->unregister_hierarchical_name
   5: __null
   6: [B1.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unregister_hierarchical_name(const sc_core::sc_object *parent, const char *name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->unregister_hierarchical_name
   5: parent
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_object *)
   7: name
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: 
  10: [B1.8] (CXXConstructExpr, [B1.11], [B1.12], const std::string)
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.4]([B1.6], [B1.12])
  14: ~const std::string() (Temporary object destructor)
  15: ~std::allocator<char>() (Temporary object destructor)
  16: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_start_of_simulation_invoked()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_get_curr_simcontext
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B1.2]()
   4: [B1.3]->m_start_of_simulation_called
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void wait(double v, sc_core::sc_time_unit tu, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: simc
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  14: [B1.2]([B1.11], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: e
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: el
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: el
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void next_trigger(double v, sc_core::sc_time_unit tu, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: simc
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  14: [B1.2]([B1.11], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: e
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: el
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el, sc_core::sc_simcontext *simc = sc_get_curr_simcontext())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: simc
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   9: sc_core::sc_time([B1.4], [B1.6], [B1.8]) (CXXConstructExpr, [B1.11], class sc_core::sc_time)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  11: [B1.10]
  12: el
  13: simc
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  15: [B1.2]([B1.11], [B1.12], [B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new(std::size_t sz)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_mempool::allocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(std::size_t))
   3: sz
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, std::size_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void operator delete(void *p, std::size_t sz) noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_mempool::release
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *, std::size_t))
   3: p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: sz
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, std::size_t)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new[](std::size_t sz)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_mempool::allocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(std::size_t))
   3: sz
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, std::size_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void operator delete[](void *p, std::size_t sz) noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_mempool::release
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *, std::size_t))
   3: p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: sz
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, std::size_t)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(char c)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: [B4.6] ? [B2.1] : [B3.1]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: c
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, char)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, int)
   4: '0'
   5: [B4.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B4.3] == [B4.5]
   T: [B4.6] ? ... : ...
   Preds (3): B5 B6 B7
   Succs (2): B2 B3

 [B5]
   1: invalid_value
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(char))
   3: c
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B5.2]([B5.4])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: c
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, char)
   3: [B6.2] (ImplicitCastExpr, IntegralCast, int)
   4: '1'
   5: [B6.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B6.3] != [B6.5]
   T: if [B7.6] && [B6.6]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: c
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, char)
   3: [B7.2] (ImplicitCastExpr, IntegralCast, int)
   4: '0'
   5: [B7.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B7.3] != [B7.5]
   T: [B7.6] && ...
   Preds (1): B8
   Succs (2): B6 B4

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(int i)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: [B4.4] ? [B2.1] : [B3.1]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B4.2] == [B4.3]
   T: [B4.4] ? ... : ...
   Preds (3): B5 B6 B7
   Succs (2): B2 B3

 [B5]
   1: invalid_value
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2]([B5.4])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 1
   4: [B6.2] != [B6.3]
   T: if [B7.4] && [B6.4]
   Preds (1): B7
   Succs (2): B5 B4

 [B7]
   1: i
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B7.2] != [B7.3]
   T: [B7.4] && ...
   Preds (1): B8
   Succs (2): B6 B4

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(unsigned int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(long i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(unsigned long i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(sc_dt::int64 i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool to_value(sc_dt::uint64 i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_bit()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: m_val([B1.1]) (Member initializer)
   3: sc_deprecated_sc_bit
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(bool a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(_Bool))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(char a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(char))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(sc_dt::int64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bit(sc_dt::uint64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   7: sc_deprecated_sc_bit
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   9: [B1.8]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_bit(const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: m_val([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_bit() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, long)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator=(unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, unsigned long)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator&=(const sc_dt::sc_bit &b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.3] && [B2.3]
   2: this
   3: [B1.2]->m_val
   4: [B1.3] = ([B1.1])
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: b
   2: [B2.1].m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_val
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.3] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator|=(const sc_dt::sc_bit &b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.3] || [B2.3]
   2: this
   3: [B1.2]->m_val
   4: [B1.3] = ([B1.1])
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: b
   2: [B2.1].m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_val
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.3] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator^=(const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: b
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: [B1.4] != [B1.8]
  10: this
  11: [B1.10]->m_val
  12: [B1.11] = ([B1.9])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator&=(int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator&=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator&=(char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator|=(int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator|=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator|=(char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator^=(int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator^=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &operator^=(char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: this
   4: *[B1.3]
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_bit)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_bit([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_bit() (Temporary object destructor)
  14: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

char to_char() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.3] ? [B2.1] : [B3.1]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: '1'
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: '0'
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_val
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B4.3] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bit &b_not()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: ![B1.3]
   5: this
   6: [B1.5]->m_val
   7: [B1.6] = ([B1.4])
   8: this
   9: *[B1.8]
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->to_bool
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: b
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: [B1.4] == [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: b
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: [B1.4] != [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.3] == [B1.4] (OperatorCall)
   6: return ([B1.5]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.3] != [B1.4] (OperatorCall)
   6: return ([B1.5]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool equal(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool not_equal(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_equal
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10])
  12: ~sc_dt::sc_bit() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator~(const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: ![B1.3]
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], [B1.10], class sc_dt::sc_bit)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_bit([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.12], const class sc_dt::sc_bit)
  11: ~sc_dt::sc_bit() (Temporary object destructor)
  12: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_not(const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator~
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &))
   3: a
   4: ~ [B1.3] (OperatorCall) (CXXRecordTypedCall, [B1.5])
   5: [B1.4] (BindTemporary)
   6: ([B1.5])
   7: [B1.6] (CXXConstructExpr, [B1.9], const class sc_dt::sc_bit)
   8: ~const sc_dt::sc_bit() (Temporary object destructor)
   9: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_not(sc_dt::sc_bit &r, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: operator~
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &))
   6: a
   7: ~ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8])
   8: [B1.7] (BindTemporary)
   9: ([B1.8])
  10: [B1.3] = [B1.9] (OperatorCall)
  11: ~const sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.3] && [B2.3]
   2: [B1.1] (CXXConstructExpr, [B1.3], [B1.6], [B1.7], class sc_dt::sc_bit)
   3: [B1.2] (BindTemporary)
   4: sc_dt::sc_bit([B1.3]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   6: [B1.5]
   7: [B1.6] (CXXConstructExpr, [B1.9], const class sc_dt::sc_bit)
   8: ~sc_dt::sc_bit() (Temporary object destructor)
   9: return [B1.7];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: b
   2: [B2.1].m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: a
   2: [B3.1].m_val
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.3] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.3] || [B2.3]
   2: [B1.1] (CXXConstructExpr, [B1.3], [B1.6], [B1.7], class sc_dt::sc_bit)
   3: [B1.2] (BindTemporary)
   4: sc_dt::sc_bit([B1.3]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   6: [B1.5]
   7: [B1.6] (CXXConstructExpr, [B1.9], const class sc_dt::sc_bit)
   8: ~sc_dt::sc_bit() (Temporary object destructor)
   9: return [B1.7];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: b
   2: [B2.1].m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: a
   2: [B3.1].m_val
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.3] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: b
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: [B1.4] != [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.11], [B1.14], [B1.15], class sc_dt::sc_bit)
  11: [B1.10] (BindTemporary)
  12: sc_dt::sc_bit([B1.11]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  13: [B1.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  14: [B1.13]
  15: [B1.14] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator&(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator|(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit operator^(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.3] & [B1.4] (OperatorCall) (CXXRecordTypedCall, [B1.6], [B1.7], [B1.8])
   6: [B1.5] (BindTemporary)
   7: [B1.6]
   8: [B1.7] (CXXConstructExpr, [B1.10], const class sc_dt::sc_bit)
   9: ~const sc_dt::sc_bit() (Temporary object destructor)
  10: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.3] | [B1.4] (OperatorCall) (CXXRecordTypedCall, [B1.6], [B1.7], [B1.8])
   6: [B1.5] (BindTemporary)
   7: [B1.6]
   8: [B1.7] (CXXConstructExpr, [B1.10], const class sc_dt::sc_bit)
   9: ~const sc_dt::sc_bit() (Temporary object destructor)
  10: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.3] ^ [B1.4] (OperatorCall) (CXXRecordTypedCall, [B1.6], [B1.7], [B1.8])
   6: [B1.5] (BindTemporary)
   7: [B1.6]
   8: [B1.7] (CXXConstructExpr, [B1.10], const class sc_dt::sc_bit)
   9: ~const sc_dt::sc_bit() (Temporary object destructor)
  10: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_and(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_and
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_or(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_or
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(bool b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, _Bool))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(char b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, char))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, char)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_bit)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_bit([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  10: [B1.9]
  11: [B1.2]([B1.3], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_bit b_xor(int b, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: b_xor
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, int))
   3: a
   4: [B1.3] (CXXConstructExpr, [B1.5], [B1.8], class sc_dt::sc_bit)
   5: [B1.4] (BindTemporary)
   6: sc_dt::sc_bit([B1.5]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
   8: [B1.7]
   9: b
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.2]([B1.8], [B1.10]) (CXXRecordTypedCall, [B1.12], [B1.13], [B1.14])
  12: [B1.11] (BindTemporary)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_bit)
  15: ~const sc_dt::sc_bit() (Temporary object destructor)
  16: ~sc_dt::sc_bit() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.5]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] = [B1.10] (OperatorCall)
  12: ~const sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, int a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, _Bool)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, bool a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, char)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_and(sc_dt::sc_bit &r, char a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_and
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.5]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] = [B1.10] (OperatorCall)
  12: ~const sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, int a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, _Bool)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, bool a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, char)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_or(sc_dt::sc_bit &r, char a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_or
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.5]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.10])
   9: [B1.8] (BindTemporary)
  10: [B1.9]
  11: [B1.3] = [B1.10] (OperatorCall)
  12: ~const sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, int a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, _Bool)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, bool a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, const sc_dt::sc_bit &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: b
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, char)
   9: [B1.8] (CXXConstructExpr, [B1.10], [B1.13], class sc_dt::sc_bit)
  10: [B1.9] (BindTemporary)
  11: sc_dt::sc_bit([B1.10]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  13: [B1.12]
  14: [B1.5]([B1.6], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void b_xor(sc_dt::sc_bit &r, char a, const sc_dt::sc_bit &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_bit &(*)(const class sc_dt::sc_bit &))
   3: r
   4: b_xor
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_bit (*)(const class sc_dt::sc_bit &, const class sc_dt::sc_bit &))
   6: a
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], class sc_dt::sc_bit)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_bit([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_bit)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bit)
  12: [B1.11]
  13: b
  14: [B1.5]([B1.12], [B1.13]) (CXXRecordTypedCall, [B1.15], [B1.16])
  15: [B1.14] (BindTemporary)
  16: [B1.15]
  17: [B1.3] = [B1.16] (OperatorCall)
  18: ~const sc_dt::sc_bit() (Temporary object destructor)
  19: ~sc_dt::sc_bit() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static sc_dt::sc_logic_value_t to_value(sc_dt::sc_logic_value_t v)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: v
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: invalid_value
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_dt::sc_logic_value_t))
   3: v
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B2.2]([B2.4])
   6: Log_X
   7: v
   8: [B2.7] = [B2.6]
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: v
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   3: [B3.2] (ImplicitCastExpr, IntegralCast, int)
   4: Log_X
   5: [B3.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B3.3] > [B3.5]
   T: if [B4.6] || [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: v
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, int)
   4: Log_0
   5: [B4.4] (ImplicitCastExpr, IntegralCast, int)
   6: [B4.3] < [B4.5]
   T: [B4.6] || ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

static sc_dt::sc_logic_value_t to_value(bool b)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.2] ? [B2.1] : [B3.1]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: Log_1
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: Log_0
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: b
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B4.2] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

static sc_dt::sc_logic_value_t to_value(char c)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: char_to_logic
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   3: index
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.2][[B1.4]]
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   7: return [B1.6];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: invalid_value
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(char))
   3: c
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B2.2]([B2.4])
   6: 127
   7: [B2.6] (ImplicitCastExpr, IntegralCast, unsigned int)
   8: index
   9: [B2.8] = [B2.7]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: c
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, char)
   3: [B3.2] (ImplicitCastExpr, IntegralCast, int)
   4: (int)[B3.3] (CStyleCastExpr, NoOp, int)
   5: [B3.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: unsigned int index = (int)c;
   7: index
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: 127
  10: [B3.9] (ImplicitCastExpr, IntegralCast, unsigned int)
  11: [B3.8] > [B3.10]
   T: if [B3.11]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static sc_dt::sc_logic_value_t to_value(int i)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: sc_dt::sc_logic_value_t([B1.2]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: invalid_value
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   6: Log_X
   7: [B2.6] (ImplicitCastExpr, IntegralCast, int)
   8: i
   9: [B2.8] = [B2.7]
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: Log_X
   4: [B3.3] (ImplicitCastExpr, IntegralCast, int)
   5: [B3.2] > [B3.4]
   T: if [B4.5] || [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: Log_0
   4: [B4.3] (ImplicitCastExpr, IntegralCast, int)
   5: [B4.2] < [B4.4]
   T: [B4.5] || ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

sc_logic()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: Log_X
   2: m_val([B1.1]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_logic(const sc_dt::sc_logic &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: m_val([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_logic(sc_dt::sc_logic_value_t v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_logic_value_t (*)(enum sc_dt::sc_logic_value_t))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_logic(bool a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_logic_value_t (*)(_Bool))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_logic(char a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_logic_value_t (*)(char))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_logic(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_logic_value_t (*)(int))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: m_val([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_logic(const sc_dt::sc_bit &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: to_value
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_logic_value_t (*)(_Bool))
   3: a
   4: [B1.3].to_bool
   5: [B1.4]()
   6: [B1.2]([B1.5])
   7: m_val([B1.6]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_logic() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(const sc_dt::sc_logic &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: and_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: this
  14: [B1.13]->m_val
  15: [B1.14] = [B1.12]
  16: this
  17: *[B1.16]
  18: return [B1.17];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: or_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: this
  14: [B1.13]->m_val
  15: [B1.14] = [B1.12]
  16: this
  17: *[B1.16]
  18: return [B1.17];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: xor_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: this
  14: [B1.13]->m_val
  15: [B1.14] = [B1.12]
  16: this
  17: *[B1.16]
  18: return [B1.17];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(sc_dt::sc_logic_value_t v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(bool v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(char v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] = [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator=(const sc_dt::sc_bit &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.4] = [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(sc_dt::sc_logic_value_t v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(bool v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(char v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] &= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator&=(const sc_dt::sc_bit &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.4] &= [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(sc_dt::sc_logic_value_t v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(bool v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(char v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] |= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator|=(const sc_dt::sc_bit &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.4] |= [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(sc_dt::sc_logic_value_t v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(bool v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(char v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (CXXConstructExpr, [B1.8], [B1.11], class sc_dt::sc_logic)
   8: [B1.7] (BindTemporary)
   9: sc_dt::sc_logic([B1.8]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  11: [B1.10]
  12: [B1.4] ^= [B1.11] (OperatorCall)
  13: ~sc_dt::sc_logic() (Temporary object destructor)
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &operator^=(const sc_dt::sc_bit &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: *[B1.3]
   5: v
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.4] ^= [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_logic operator~() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   8: [B1.7] (CXXConstructExpr, [B1.9], [B1.12], [B1.13], class sc_dt::sc_logic)
   9: [B1.8] (BindTemporary)
  10: sc_dt::sc_logic([B1.9]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_logic)
  14: ~sc_dt::sc_logic() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic &b_not()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: not_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   8: this
   9: [B1.8]->m_val
  10: [B1.9] = [B1.7]
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_logic_value_t value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool is_01() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.8] || [B2.8]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: [B2.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B2.4] (CStyleCastExpr, NoOp, int)
   6: Log_1
   7: [B2.6] (ImplicitCastExpr, IntegralCast, int)
   8: [B2.5] == [B2.7]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_val
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: [B3.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B3.4] (CStyleCastExpr, NoOp, int)
   6: Log_0
   7: [B3.6] (ImplicitCastExpr, IntegralCast, int)
   8: [B3.5] == [B3.7]
   T: [B3.8] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: Log_0
   7: [B1.6] (ImplicitCastExpr, IntegralCast, int)
   8: [B1.5] != [B1.7]
   9: return ([B1.8]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->invalid_01
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->is_01
   3: [B3.2]()
   4: ![B3.3]
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

char to_char() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: logic_to_char
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, char)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, char))
   3: os
   4: this
   5: [B1.4]->to_char
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new(std::size_t, void *p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new(std::size_t sz)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::sc_mempool::allocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(std::size_t))
   3: sz
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, std::size_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void operator delete(void *p, std::size_t sz) noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::sc_mempool::release
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *, std::size_t))
   3: p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: sz
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, std::size_t)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new[](std::size_t sz)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::sc_mempool::allocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(std::size_t))
   3: sz
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, std::size_t)
   5: [B1.2]([B1.4])
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void operator delete[](void *p, std::size_t sz) noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::sc_mempool::release
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *, std::size_t))
   3: p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: sz
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, std::size_t)
   7: [B1.2]([B1.4], [B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(const sc_dt::sc_logic &a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_logic::and_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: a
   4: [B1.3].m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: [B1.12] (CXXConstructExpr, [B1.14], [B1.17], [B1.18], class sc_dt::sc_logic)
  14: [B1.13] (BindTemporary)
  15: sc_dt::sc_logic([B1.14]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  17: [B1.16]
  18: [B1.17] (CXXConstructExpr, [B1.20], const class sc_dt::sc_logic)
  19: ~sc_dt::sc_logic() (Temporary object destructor)
  20: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(const sc_dt::sc_logic &a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_logic::or_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: a
   4: [B1.3].m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: [B1.12] (CXXConstructExpr, [B1.14], [B1.17], [B1.18], class sc_dt::sc_logic)
  14: [B1.13] (BindTemporary)
  15: sc_dt::sc_logic([B1.14]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  17: [B1.16]
  18: [B1.17] (CXXConstructExpr, [B1.20], const class sc_dt::sc_logic)
  19: ~sc_dt::sc_logic() (Temporary object destructor)
  20: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(const sc_dt::sc_logic &a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_logic::xor_table
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t (*)[4])
   3: a
   4: [B1.3].m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.2][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const enum sc_dt::sc_logic_value_t *)
   8: b
   9: [B1.8].m_val
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  11: [B1.7][[B1.10]]
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
  13: [B1.12] (CXXConstructExpr, [B1.14], [B1.17], [B1.18], class sc_dt::sc_logic)
  14: [B1.13] (BindTemporary)
  15: sc_dt::sc_logic([B1.14]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  17: [B1.16]
  18: [B1.17] (CXXConstructExpr, [B1.20], const class sc_dt::sc_logic)
  19: ~sc_dt::sc_logic() (Temporary object destructor)
  20: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(const sc_dt::sc_logic &a, sc_dt::sc_logic_value_t b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(sc_dt::sc_logic_value_t a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(const sc_dt::sc_logic &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(bool a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(const sc_dt::sc_logic &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(char a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(const sc_dt::sc_logic &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator&(int a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] & [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(const sc_dt::sc_logic &a, sc_dt::sc_logic_value_t b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(sc_dt::sc_logic_value_t a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(const sc_dt::sc_logic &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(bool a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(const sc_dt::sc_logic &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(char a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(const sc_dt::sc_logic &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator|(int a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] | [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(const sc_dt::sc_logic &a, sc_dt::sc_logic_value_t b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(sc_dt::sc_logic_value_t a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(const sc_dt::sc_logic &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(bool a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(const sc_dt::sc_logic &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(char a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(const sc_dt::sc_logic &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_logic operator^(int a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_logic (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] ^ [B1.10] (OperatorCall) (CXXRecordTypedCall, [B1.12])
  12: [B1.11] (BindTemporary)
  13: ([B1.12])
  14: [B1.13] (CXXConstructExpr, [B1.17], const class sc_dt::sc_logic)
  15: ~const sc_dt::sc_logic() (Temporary object destructor)
  16: ~sc_dt::sc_logic() (Temporary object destructor)
  17: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_logic &a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: b
   7: [B1.6].m_val
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   9: [B1.8] (ImplicitCastExpr, IntegralCast, int)
  10: [B1.5] == [B1.9]
  11: return ([B1.10]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_logic &a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: b
   7: [B1.6].m_val
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   9: [B1.8] (ImplicitCastExpr, IntegralCast, int)
  10: [B1.5] != [B1.9]
  11: return ([B1.10]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_logic &a, sc_dt::sc_logic_value_t b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(sc_dt::sc_logic_value_t a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_logic &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(bool a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_logic &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(char a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_logic &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(int a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] == [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_logic &a, sc_dt::sc_logic_value_t b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(sc_dt::sc_logic_value_t a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_logic_value_t)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_logic &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(bool a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_logic &a, char b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(char a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, char)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_logic &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: b
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (CXXConstructExpr, [B1.7], [B1.10], class sc_dt::sc_logic)
   7: [B1.6] (BindTemporary)
   8: sc_dt::sc_logic([B1.7]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
  10: [B1.9]
  11: [B1.3] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(int a, const sc_dt::sc_logic &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], [B1.9], class sc_dt::sc_logic)
   6: [B1.5] (BindTemporary)
   7: sc_dt::sc_logic([B1.6]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_dt::sc_logic)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   9: [B1.8]
  10: b
  11: [B1.9] != [B1.10] (OperatorCall)
  12: ~sc_dt::sc_logic() (Temporary object destructor)
  13: return ([B1.11]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_logic &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_logic &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool dont_initialize() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->dont_initialize
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

operator sc_process_b *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_core::sc_process_handle &left, const sc_core::sc_process_handle &right)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.6]) && ([B3.6]) && ([B2.7])
   2: return [B1.1];
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: left
   2: [B2.1].m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: right
   5: [B2.4].m_target_p
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   7: [B2.3] == [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: right
   2: [B3.1].m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   6: [B3.3] != [B3.5]
   T: ([B4.6]) && ([B3.6]) && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: left
   2: [B4.1].m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: 0
   5: [B4.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   6: [B4.3] != [B4.5]
   T: ([B4.6]) && ...
   Preds (1): B5
   Succs (2): B3 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_core::sc_process_handle &left, const sc_core::sc_process_handle &right)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.6]) || ([B3.6]) || ([B2.7])
   2: return [B1.1];
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: left
   2: [B2.1].m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: right
   5: [B2.4].m_target_p
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   7: [B2.3] != [B2.6]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: right
   2: [B3.1].m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   6: [B3.3] == [B3.5]
   T: ([B4.6]) || ([B3.6]) || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B4]
   1: left
   2: [B4.1].m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: 0
   5: [B4.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   6: [B4.3] == [B4.5]
   T: ([B4.6]) || ...
   Preds (1): B5
   Succs (2): B1 B3

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_core::sc_process_handle &left, const sc_core::sc_process_handle &right)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: left
   2: [B1.1].m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: right
   5: [B1.4].m_target_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   7: [B1.3] < [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_process_handle::sc_process_handle()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   3: m_target_p([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_process_handle::sc_process_handle(sc_core::sc_object *object_p)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B1.3]->reference_increment
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: object_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   3: dynamic_cast<sc_core::sc_process_b *>([B2.2]) (CXXDynamicCastExpr, Dynamic, sc_core::sc_process_b *)
   4: m_target_p([B2.3]) (Member initializer)
   5: this
   6: [B2.5]->m_target_p
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   8: [B2.7] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline explicit sc_process_handle::sc_process_handle(sc_core::sc_process_b *process_p)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B1.3]->reference_increment
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: process_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   3: m_target_p([B2.2]) (Member initializer)
   4: this
   5: [B2.4]->m_target_p
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   7: [B2.6] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.7]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_process_handle::sc_process_handle(const sc_core::sc_process_handle &orig)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B1.3]->reference_increment
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: orig
   2: [B2.1].m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: m_target_p([B2.3]) (Member initializer)
   5: this
   6: [B2.5]->m_target_p
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   8: [B2.7] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.8]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_core::sc_process_handle &sc_process_handle::operator=(sc_core::sc_process_handle orig)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->swap
   3: orig
   4: [B1.2]([B1.3])
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_process_handle::~sc_process_handle() noexcept
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B1.3]->reference_decrement
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.4]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::disable(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "disable()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 272
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->disable_process
   5: descendants
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::dont_initialize(bool dont)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "dont_initialize()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 282
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->dont_initialize
   5: dont
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline std::string sc_process_handle::dump_state() const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: return [B4.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: ~std::string() (Temporary object destructor)
   2: ~std::string() (Temporary object destructor)
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: ~std::string() (Temporary object destructor)
   2: ~std::string() (Temporary object destructor)
   3: ~std::allocator<char>() (Temporary object destructor)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: [B7.4] ? [B5.10] : [B6.9]
   2: [B4.1]
   3: [B4.2] (CXXConstructExpr, [B1.1], std::string)
   T: (Temp Dtor) std::allocator<char>()
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   1: this
   2: [B5.1]->m_target_p
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B5.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B5.4]->dump_state
   6: [B5.5]() (CXXRecordTypedCall, [B5.7], [B5.8], [B5.9])
   7: [B5.6] (BindTemporary)
   8: [B5.7]
   9: [B5.8] (CXXConstructExpr, [B5.10], [B4.2], [B4.3], std::string)
  10: [B5.9] (BindTemporary)
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: "NO TARGET"
   2: [B6.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: 
   4: [B6.2] (CXXConstructExpr, [B6.5], [B6.7], [B6.8], std::string)
   5: [B6.4] (BindTemporary)
   6: std::string([B6.5]) (CXXFunctionalCastExpr, ConstructorConversion, std::string)
   7: [B6.6]
   8: [B6.7] (CXXConstructExpr, [B6.9], [B4.2], [B4.3], std::string)
   9: [B6.8] (BindTemporary)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: this
   2: [B7.1]->m_target_p
   3: [B7.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B7.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B7.4] ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_handle::dynamic() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->dynamic
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_handle::enable(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "enable()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 306
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->enable_process
   5: descendants
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline const std::vector<sc_event *> &sc_process_handle::get_child_events() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B2.4]->get_child_events
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: empty_event_vector
   2: [B3.1] (ImplicitCastExpr, NoOp, const std::vector<sc_event *>)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline const std::vector<sc_object *> &sc_process_handle::get_child_objects() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->get_child_objects
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: empty_object_vector
   2: [B3.1] (ImplicitCastExpr, NoOp, const ::std::vector<sc_object *>)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_object *sc_process_handle::get_parent_object() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B2.4]->get_parent_object
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: __null
   2: [B3.1] (ImplicitCastExpr, NullToPointer, class sc_core::sc_object *)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_object *sc_process_handle::get_process_object() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_process_handle::is_unwinding() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "is_unwinding()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 346
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
  12: false
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->is_unwinding
   6: [B2.5]()
   7: return [B2.6];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::kill(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "kill()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 358
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->kill_process
   5: descendants
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline const char *sc_process_handle::name() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B2.4]->name
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: ""
   2: [B3.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline const char *sc_process_handle::basename() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B2.4]->basename
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: ""
   2: [B3.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_curr_proc_kind sc_process_handle::proc_kind() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->proc_kind
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: SC_NO_PROC_
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_handle::reset(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "reset()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 390
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->reset_process
   5: sc_process_b::reset_asynchronous
   6: descendants
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   8: [B2.4]([B2.5], [B2.7])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline sc_core::sc_event &sc_process_handle::reset_event() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "reset()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 401
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
  12: sc_process_handle::non_event
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->reset_event
   5: [B2.4]()
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::resume(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "resume()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 413
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->resume_process
   5: descendants
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::suspend(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "suspend()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 423
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->suspend_process
   5: descendants
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   7: [B2.4]([B2.6])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::swap(sc_core::sc_process_handle &other)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: sc_core::sc_process_b *tmp = this->m_target_p;
   5: other
   6: [B1.5].m_target_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   8: this
   9: [B1.8]->m_target_p
  10: [B1.9] = [B1.7]
  11: tmp
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
  13: other
  14: [B1.13].m_target_p
  15: [B1.14] = [B1.12]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_process_handle::sync_reset_off(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "sync_reset_off()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 444
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->reset_process
   5: sc_process_b::reset_synchronous_off
   6: descendants
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   8: [B2.4]([B2.5], [B2.7])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_process_handle::sync_reset_on(sc_core::sc_descendant_inclusion_info descendants = SC_NO_DESCENDANTS)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "sync_reset_on()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 459
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->reset_process
   5: sc_process_b::reset_synchronous_on
   6: descendants
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_descendant_inclusion_info)
   8: [B2.4]([B2.5], [B2.7])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool sc_process_handle::terminated() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.6] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_b *)
   5: [B2.4]->terminated
   6: [B2.5]()
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event &sc_process_handle::terminated_event()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: SC_ID_EMPTY_PROCESS_HANDLE_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "terminated_event()"
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_process_handle.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 478
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
  12: sc_process_handle::non_event
  13: return [B1.12];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_target_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B2.3]->terminated_event
   5: [B2.4]()
   6: return [B2.5];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_target_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B3.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool sc_process_handle::valid() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.4] ? [B2.1] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_target_p
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: [B4.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.4] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_process_handle sc_process_b::last_created_process_handle()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: m_last_created_process_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_process_b *)
   3: [B1.2] (CXXConstructExpr, [B1.4], [B1.7], [B1.8], class sc_core::sc_process_handle)
   4: [B1.3] (BindTemporary)
   5: sc_core::sc_process_handle([B1.4]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_process_handle)
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_handle)
   7: [B1.6]
   8: [B1.7] (CXXConstructExpr, [B1.10], class sc_core::sc_process_handle)
   9: ~sc_core::sc_process_handle() (Temporary object destructor)
  10: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_process_handle sc_get_last_created_process_handle()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_process_b::last_created_process_handle
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_process_handle (*)(void))
   3: [B1.2]() (CXXRecordTypedCall, [B1.4], [B1.6], [B1.7])
   4: [B1.3] (BindTemporary)
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_handle)
   6: [B1.5]
   7: [B1.6] (CXXConstructExpr, [B1.9], class sc_core::sc_process_handle)
   8: ~sc_core::sc_process_handle() (Temporary object destructor)
   9: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool empty() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->head
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_plist_base::handle_t)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_plist_base::handle_t)
   6: [B1.3] == [B1.5]
   7: return ([B1.6]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_plist_base_iter::handle_t get_handle() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->ptr
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_plist_elem *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_simcontext *sc_get_curr_simcontext()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   3: [B1.2]->simcontext
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_module"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_module &operator,(sc_core::sc_interface &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<
   3: interface_
   4: [B1.2]([B1.3])
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_module &operator,(sc_core::sc_port_base &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<
   3: port_
   4: [B1.2]([B1.3])
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: e
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: t
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: this
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  16: [B1.15]->simcontext
  17: [B1.16]()
  18: [B1.2]([B1.13], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: t
   4: e
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: e
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: e
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: t
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: this
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  16: [B1.15]->simcontext
  17: [B1.16]()
  18: [B1.2]([B1.13], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: t
   4: e
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: e
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool timed_out()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::timed_out
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(class sc_core::sc_simcontext *))
   3: 
   4: [B1.2]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void halt()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::halt
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, class sc_core::sc_simcontext *))
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void at_posedge(const sc_signal_in_if<bool> &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::at_posedge
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const sc_signal_in_if<_Bool> &, class sc_core::sc_simcontext *))
   3: s
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void at_posedge(const sc_signal_in_if<sc_dt::sc_logic> &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::at_posedge
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const sc_signal_in_if<sc_dt::sc_logic> &, class sc_core::sc_simcontext *))
   3: s
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void at_negedge(const sc_signal_in_if<bool> &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::at_negedge
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const sc_signal_in_if<_Bool> &, class sc_core::sc_simcontext *))
   3: s
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void at_negedge(const sc_signal_in_if<sc_dt::sc_logic> &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::at_negedge
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const sc_signal_in_if<sc_dt::sc_logic> &, class sc_core::sc_simcontext *))
   3: s
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void watching(bool)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_ERROR
   4: SC_ID_WATCHING_NOT_ALLOWED_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: ""
   7: [B1.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_module.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 291
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void defunct()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool check_write(sc_core::sc_object *, bool)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool needs_update() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void update()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool needs_update() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_delta_only
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_writer_policy_check_write(bool delta_only = only_delta())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: delta_only
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: m_delta_only([B1.2]) (Member initializer)
   4:  (CXXConstructExpr, m_writer_p() (Member initializer), class sc_core::sc_process_handle)
   5: m_writer_p([B1.4]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool needs_update() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void update()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::sc_process_handle() (CXXConstructExpr, [B1.2], [B1.3], class sc_core::sc_process_handle)
   2: [B1.1] (BindTemporary)
   3: [B1.2]
   4: [B1.3].swap
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_write *)
   7: [B1.6]->m_writer_p
   8: [B1.4]([B1.7])
   9: ~sc_core::sc_process_handle() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_writer_policy_check_delta()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: [B1.1] (CXXConstructExpr, sc_writer_policy_check_write([B1.1]) (Base initializer), struct sc_core::sc_writer_policy_check_write)
   3: sc_writer_policy_check_write([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool check_port(sc_core::sc_object *, sc_core::sc_port_base *, bool)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_writer_policy_check_port()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, class sc_core::sc_port_base *)
   3: m_output([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool empty() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->size
   3: [B1.2]()
   4: 0
   5: [B1.3] == [B1.4]
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *name() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_name
   3: [B1.2].c_str
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_object *get_parent_object() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_parent_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool in_hierarchy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_name
   3: [B1.2].length
   4: [B1.3]()
   5: 0
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: [B1.4] != [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_event_timed(sc_core::sc_event *e, const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: e
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   3: m_event([B1.2]) (Member initializer)
   4: t
   5: [B1.4] (CXXConstructExpr, m_notify_time([B1.4]) (Member initializer), class sc_core::sc_time)
   6: m_notify_time([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_event_timed() noexcept
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_timed *)
   3: this
   4: [B1.3]->m_event
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   6: [B1.5]->m_timed
   7: [B1.6] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_event
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   4: 0
   5: [B2.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
   6: [B2.3] != [B2.5]
   T: if [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_core::sc_event *event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_event
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_time &notify_time() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_notify_time
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void *operator new(std::size_t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: allocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void *(*)(void))
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static void operator delete(void *p, std::size_t) noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: deallocate
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void *))
   3: p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::notify(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->notify
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7]->m_simc
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  10: sc_core::sc_time([B1.4], [B1.6], [B1.9]) (CXXConstructExpr, [B1.12], class sc_core::sc_time)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  12: [B1.11]
  13: [B1.2]([B1.12])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::notify_internal(const sc_core::sc_time &t)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: CFGNewAllocator(sc_core::sc_event_timed *)
   2: this
   3: operator+
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_time (*)(const class sc_core::sc_time &, const class sc_core::sc_time &))
   5: this
   6: [B1.5]->m_simc
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   9: [B1.8]->time_stamp
  10: [B1.9]()
  11: t
  12: [B1.10] + [B1.11] (OperatorCall) (CXXRecordTypedCall, [B1.13])
  13: [B1.12]
  14: [B1.2], [B1.13] (CXXConstructExpr, [B1.15], class sc_core::sc_event_timed)
  15: new sc_core::sc_event_timed([B1.14])
  16: sc_core::sc_event_timed *et = new sc_core::sc_event_timed(this, this->m_simc->time_stamp() + t);
  17: this
  18: [B1.17]->m_simc
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  20: [B1.19]->add_timed_event
  21: et
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_timed *)
  23: [B1.20]([B1.22])
  24: et
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_timed *)
  26: this
  27: [B1.26]->m_timed
  28: [B1.27] = [B1.25]
  29: TIMED
  30: this
  31: [B1.30]->m_notify_type
  32: [B1.31] = [B1.29]
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_simc
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   4: [B2.3]->add_delta_event
   5: this
   6: [B2.4]([B2.5])
   7: this
   8: [B2.7]->m_delta_event_index
   9: [B2.8] = [B2.6]
  10: DELTA
  11: this
  12: [B2.11]->m_notify_type
  13: [B2.12] = [B2.10]
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: operator==
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_core::sc_time &) const)
   3: t
   4: SC_ZERO_TIME
   5: [B3.3] == [B3.4] (OperatorCall)
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_event::notify_next_delta()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_simc
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
   4: [B1.3]->add_delta_event
   5: this
   6: [B1.4]([B1.5])
   7: this
   8: [B1.7]->m_delta_event_index
   9: [B1.8] = [B1.6]
  10: DELTA
  11: this
  12: [B1.11]->m_notify_type
  13: [B1.12] = [B1.10]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: ::sc_core::sc_report_handler::report
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_ERROR
   4: SC_ID_NOTIFY_DELAYED_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: 0
   7: [B2.6] (ImplicitCastExpr, NullToPointer, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_event.h"
   9: [B2.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 438
  11: [B2.2]([B2.3], [B2.5], [B2.7], [B2.9], [B2.10])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_notify_type
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_event::notify_t)
   4: [B3.3] (ImplicitCastExpr, IntegralCast, int)
   5: NONE
   6: [B3.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B3.4] != [B3.6]
   T: if [B3.7]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::notify_delayed(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->notify_delayed
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7]->m_simc
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_simcontext *)
  10: sc_core::sc_time([B1.4], [B1.6], [B1.9]) (CXXConstructExpr, [B1.12], class sc_core::sc_time)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  12: [B1.11]
  13: [B1.2]([B1.12])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::add_static(sc_core::sc_method_handle method_h) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_methods_static
   3: [B1.2].push_back
   4: method_h
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_method_process *>::value_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::add_static(sc_core::sc_thread_handle thread_h) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_threads_static
   3: [B1.2].push_back
   4: thread_h
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_thread_process *>::value_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::add_dynamic(sc_core::sc_method_handle method_h) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_methods_dynamic
   3: [B1.2].push_back
   4: method_h
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_method_process *>::value_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event::add_dynamic(sc_core::sc_thread_handle thread_h) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_threads_dynamic
   3: [B1.2].push_back
   4: thread_h
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_thread_process *>::value_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_event_list::sc_event_list(bool and_list_, bool auto_delete_ = false)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_events() (Member initializer), std::vector<const sc_event *>)
   2: m_events([B1.1]) (Member initializer)
   3: and_list_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: m_and_list([B1.4]) (Member initializer)
   6: auto_delete_
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: m_auto_delete([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, IntegralCast, unsigned int)
  11: m_busy([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_list::sc_event_list(const sc_core::sc_event &e, bool and_list_, bool auto_delete_ = false)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_events() (Member initializer), std::vector<const sc_event *>)
   2: m_events([B1.1]) (Member initializer)
   3: and_list_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: m_and_list([B1.4]) (Member initializer)
   6: auto_delete_
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: m_auto_delete([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, IntegralCast, unsigned int)
  11: m_busy([B1.10]) (Member initializer)
  12: this
  13: [B1.12]->m_events
  14: [B1.13].push_back
  15: e
  16: &[B1.15]
  17: [B1.16]
  18: [B1.14]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_list::sc_event_list(const sc_core::sc_event_list &that)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, m_events() (Member initializer), std::vector<const sc_event *>)
   2: m_events([B1.1]) (Member initializer)
   3: that
   4: [B1.3].m_and_list
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: m_and_list([B1.5]) (Member initializer)
   7: false
   8: m_auto_delete([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, IntegralCast, unsigned int)
  11: m_busy([B1.10]) (Member initializer)
  12: this
  13: [B1.12]->move_from
  14: that
  15: [B1.13]([B1.14])
  16: that
  17: [B1.16].auto_delete
  18: [B1.17]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_list &sc_event_list::operator=(const sc_core::sc_event_list &that)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->move_from
   3: that
   4: [B2.2]([B2.3])
   5: that
   6: [B2.5].auto_delete
   7: [B2.6]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: __builtin_expect
   2: [B3.1] (ImplicitCastExpr, BuiltinFnToFnPtr, long (*)(long, long) noexcept)
   3: this
   4: [B3.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list *)
   5: that
   6: &[B3.5]
   7: [B3.4] != [B3.6]
   8: !([B3.7])
   9: ![B3.8]
  10: [B3.9] (ImplicitCastExpr, IntegralCast, long)
  11: 1
  12: [B3.11] (ImplicitCastExpr, IntegralCast, long)
  13: [B3.2]([B3.10], [B3.12])
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list *)
   3: [B4.2]->report_invalid_modification
   4: [B4.3]()
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: this
   2: [B5.1]->m_busy
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: [B5.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.4]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_list::~sc_event_list() noexcept
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this->m_events.~vector() (Member object destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list *)
   3: [B2.2]->report_premature_destruction
   4: [B2.3]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_busy
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_list::swap(sc_core::sc_event_list &that)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: this
   2: [B1.1]->m_events
   3: [B1.2].swap
   4: that
   5: [B1.4].m_events
   6: [B1.3]([B1.5])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list *)
   3: [B2.2]->report_invalid_modification
   4: [B2.3]()
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: that
   2: [B3.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list)
   3: [B3.2].busy
   4: [B3.3]()
   T: if [B4.4] || [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: this
   2: [B4.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_list *)
   3: [B4.2]->busy
   4: [B4.3]()
   T: [B4.4] || ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_list::move_from(const sc_core::sc_event_list &that)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class std::vector<const class sc_core::sc_event *> &(*)(const class std::vector<const class sc_core::sc_event *> &))
   3: this
   4: [B1.3]->m_events
   5: that
   6: [B1.5].m_events
   7: [B1.4] = [B1.6] (OperatorCall)
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->swap
   3: that
   4: const_cast<sc_core::sc_event_list &>([B2.3]) (CXXConstCastExpr, NoOp, class sc_core::sc_event_list)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: that
   2: [B3.1].temporary
   3: [B3.2]()
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

inline int sc_event_list::size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_events
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_event_list::and_list() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_and_list
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_event_list::busy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_busy
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: 0
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned int)
   6: [B1.3] != [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_event_list::temporary() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.3] && [B2.5]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_busy
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: [B2.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: ![B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_auto_delete
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.3] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_list::auto_delete() const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1]->~sc_event_list() (Implicit destructor)
   3: delete [B1.1]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_auto_delete
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.5] && [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: this
   2: [B3.1]->m_busy
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: [B3.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: ![B3.4]
   T: [B3.5] && ...
   Preds (2): B4 B5
   Succs (2): B2 B0

 [B4]
   1: this
   2: [B4.1]->m_busy
   3: --[B4.2]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: this
   2: [B5.1]->m_busy
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, unsigned int)
   4: [B5.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B5.4]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (3): B1 B2 B3

inline sc_event_or_list::sc_event_or_list()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: 
   3: [B1.1] (CXXConstructExpr, sc_event_list([B1.1]) (Base initializer), class sc_core::sc_event_list)
   4: sc_event_list([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_or_list::sc_event_or_list(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: 
   3: [B1.1] (CXXConstructExpr, sc_event_list([B1.1]) (Base initializer), class sc_core::sc_event_list)
   4: sc_event_list([B1.3]) (Base initializer)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: e
   9: [B1.7]([B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_event_or_list::sc_event_or_list(bool auto_delete_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: auto_delete_
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.1], [B1.3] (CXXConstructExpr, sc_event_list([B1.1], [B1.3]) (Base initializer), class sc_core::sc_event_list)
   5: sc_event_list([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_list &sc_event_or_list::operator|=(const sc_core::sc_event &e)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->push_back
   4: e
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B2.2]->report_invalid_modification
   4: [B2.3]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B3.2]->busy
   4: [B3.3]()
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_list &sc_event_or_list::operator|=(const sc_core::sc_event_or_list &el)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->push_back
   4: el
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_event_list)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B2.2]->report_invalid_modification
   4: [B2.3]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B3.2]->busy
   4: [B3.3]()
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr sc_event_or_list::operator|(const sc_core::sc_event &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_or_expr)
   2: sc_core::sc_event_or_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_or_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_or_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr sc_event_or_list::operator|(const sc_core::sc_event_or_list &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_or_expr)
   2: sc_core::sc_event_or_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_or_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_or_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr sc_event::operator|(const sc_core::sc_event &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_or_expr)
   2: sc_core::sc_event_or_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_or_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_or_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr sc_event::operator|(const sc_core::sc_event_or_list &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_or_expr)
   2: sc_core::sc_event_or_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_or_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_or_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr operator|(sc_core::sc_event_or_expr expr, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: expr
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   3: [B1.2].push_back
   4: e
   5: [B1.3]([B1.4])
   6: expr
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   8: [B1.7] (CXXConstructExpr, [B1.9], sc_core::sc_event_or_expr)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_or_expr operator|(sc_core::sc_event_or_expr expr, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: expr
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   3: [B1.2].push_back
   4: el
   5: [B1.3]([B1.4])
   6: expr
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_or_list>)
   8: [B1.7] (CXXConstructExpr, [B1.9], sc_core::sc_event_or_expr)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_or_list::swap(sc_core::sc_event_or_list &that)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->sc_event_list::swap
   4: that
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_event_list)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_and_list::sc_event_and_list()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: 
   3: [B1.1] (CXXConstructExpr, sc_event_list([B1.1]) (Base initializer), class sc_core::sc_event_list)
   4: sc_event_list([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_and_list::sc_event_and_list(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: 
   3: [B1.1] (CXXConstructExpr, sc_event_list([B1.1]) (Base initializer), class sc_core::sc_event_list)
   4: sc_event_list([B1.3]) (Base initializer)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: e
   9: [B1.7]([B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_event_and_list::sc_event_and_list(bool auto_delete_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: auto_delete_
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B1.1], [B1.3] (CXXConstructExpr, sc_event_list([B1.1], [B1.3]) (Base initializer), class sc_core::sc_event_list)
   5: sc_event_list([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_and_list::swap(sc_core::sc_event_and_list &that)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->sc_event_list::swap
   4: that
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_event_list)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_list &sc_event_and_list::operator&=(const sc_core::sc_event &e)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->push_back
   4: e
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B2.2]->report_invalid_modification
   4: [B2.3]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B3.2]->busy
   4: [B3.3]()
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_list &sc_event_and_list::operator&=(const sc_core::sc_event_and_list &el)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   3: [B1.2]->push_back
   4: el
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_event_list)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B2.2]->report_invalid_modification
   4: [B2.3]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_list *)
   3: [B3.2]->busy
   4: [B3.3]()
   T: if [B3.4]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr sc_event_and_list::operator&(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_and_expr)
   2: sc_core::sc_event_and_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type)
   9: [B1.5]([B1.8])
  10: expr
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  12: [B1.11].push_back
  13: e
  14: [B1.12]([B1.13])
  15: expr
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  17: [B1.16] (CXXConstructExpr, [B1.18], sc_core::sc_event_and_expr)
  18: return [B1.17];
  19: [B1.2].~sc_core::sc_event_and_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr sc_event_and_list::operator&(const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_and_expr)
   2: sc_core::sc_event_and_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type)
   9: [B1.5]([B1.8])
  10: expr
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  12: [B1.11].push_back
  13: el
  14: [B1.12]([B1.13])
  15: expr
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  17: [B1.16] (CXXConstructExpr, [B1.18], sc_core::sc_event_and_expr)
  18: return [B1.17];
  19: [B1.2].~sc_core::sc_event_and_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr sc_event::operator&(const sc_core::sc_event &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_and_expr)
   2: sc_core::sc_event_and_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_and_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_and_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr sc_event::operator&(const sc_core::sc_event_and_list &e2) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], sc_core::sc_event_and_expr)
   2: sc_core::sc_event_and_expr expr;
   3: expr
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   5: [B1.4].push_back
   6: this
   7: *[B1.6]
   8: [B1.5]([B1.7])
   9: expr
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  11: [B1.10].push_back
  12: e2
  13: [B1.11]([B1.12])
  14: expr
  15: [B1.14] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
  16: [B1.15] (CXXConstructExpr, [B1.17], sc_core::sc_event_and_expr)
  17: return [B1.16];
  18: [B1.2].~sc_core::sc_event_and_expr() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr operator&(sc_core::sc_event_and_expr expr, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: expr
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   3: [B1.2].push_back
   4: e
   5: [B1.3]([B1.4])
   6: expr
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   8: [B1.7] (CXXConstructExpr, [B1.9], sc_core::sc_event_and_expr)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_core::sc_event_and_expr operator&(sc_core::sc_event_and_expr expr, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: expr
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   3: [B1.2].push_back
   4: el
   5: [B1.3]([B1.4])
   6: expr
   7: [B1.6] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_expr<class sc_core::sc_event_and_list>)
   8: [B1.7] (CXXConstructExpr, [B1.9], sc_core::sc_event_and_expr)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_port_base"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *if_typename() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->get_interface_type
   3: [B1.2]() (CXXRecordTypedCall, [B1.4])
   4: [B1.3]
   5: [B1.4] (ImplicitCastExpr, NoOp, const struct std::type_index)
   6: [B1.5].name
   7: [B1.6]()
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_port_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_prim_channel"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool update_requested()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_update_next_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel *)
   4: list_end
   5: (sc_core::sc_prim_channel *)[B1.4] (CStyleCastExpr, IntegralToPointer, class sc_core::sc_prim_channel *)
   6: [B1.3] != [B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: e
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: t
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: this
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  16: [B1.15]->simcontext
  17: [B1.16]()
  18: [B1.2]([B1.13], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: t
   4: e
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: e
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(const sc_core::sc_time &t, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void wait(int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::wait
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, class sc_core::sc_simcontext *))
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: e
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: el
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: t
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   6: [B1.5]->simcontext
   7: [B1.6]()
   8: [B1.2]([B1.3], [B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: this
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  16: [B1.15]->simcontext
  17: [B1.16]()
  18: [B1.2]([B1.13], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: t
   4: e
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: e
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_or_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_or_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(const sc_core::sc_time &t, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: t
   4: el
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   7: [B1.6]->simcontext
   8: [B1.7]()
   9: [B1.2]([B1.3], [B1.4], [B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void next_trigger(double v, sc_core::sc_time_unit tu, const sc_core::sc_event_and_list &el)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::next_trigger
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const class sc_core::sc_time &, const class sc_core::sc_event_and_list &, class sc_core::sc_simcontext *))
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: tu
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: this
   8: [B1.7] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   9: [B1.8]->simcontext
  10: [B1.9]()
  11: sc_core::sc_time([B1.4], [B1.6], [B1.10]) (CXXConstructExpr, [B1.13], class sc_core::sc_time)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
  13: [B1.12]
  14: el
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  17: [B1.16]->simcontext
  18: [B1.17]()
  19: [B1.2]([B1.13], [B1.14], [B1.18])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool timed_out()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_core::timed_out
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(class sc_core::sc_simcontext *))
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   5: [B1.4]->simcontext
   6: [B1.5]()
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_prim_channel_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool pending_updates() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.6] || [B2.3]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->pending_async_updates
   3: [B2.2]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_update_list_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel *)
   4: sc_prim_channel::list_end
   5: (sc_core::sc_prim_channel *)[B3.4] (CStyleCastExpr, IntegralToPointer, class sc_core::sc_prim_channel *)
   6: [B3.3] != [B3.5]
   T: [B3.6] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_prim_channel_registry::request_update(sc_core::sc_prim_channel &prim_channel_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_update_list_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel *)
   4: prim_channel_
   5: [B1.4].m_update_next_p
   6: [B1.5] = [B1.3]
   7: prim_channel_
   8: &[B1.7]
   9: this
  10: [B1.9]->m_update_list_p
  11: [B1.10] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_prim_channel::request_update()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel_registry *)
   4: [B1.3]->request_update
   5: this
   6: *[B1.5]
   7: [B1.4]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_update_next_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel *)
   4: [B2.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   5: ![B2.4]
   T: if [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_prim_channel::async_request_update()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel_registry *)
   4: [B1.3]->async_request_update
   5: this
   6: *[B1.5]
   7: [B1.4]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_prim_channel::async_attach_suspending()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel_registry *)
   4: [B1.3]->async_attach_suspending
   5: this
   6: *[B1.5]
   7: [B1.4]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_prim_channel::async_detach_suspending()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_registry
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_prim_channel_registry *)
   4: [B1.3]->async_detach_suspending
   5: this
   6: *[B1.5]
   7: [B1.4]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_prim_channel::perform_update()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->update
   3: [B1.2]()
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_prim_channel *)
   6: this
   7: [B1.6]->m_update_next_p
   8: [B1.7] = [B1.5]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_in_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_reset *is_reset() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: __null
   2: [B1.1] (ImplicitCastExpr, NullToPointer, class sc_core::sc_reset *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_in_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_trace_file() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_trace_delta_cycles(sc_core::sc_trace_file *tf, bool on = true)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: tf
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   3: [B1.2]->delta_cycles
   4: on
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, _Bool)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: tf
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   3: [B2.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_write_comment(sc_core::sc_trace_file *tf, const std::string &comment)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: tf
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   3: [B1.2]->write_comment
   4: comment
   5: [B1.3]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: tf
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   3: [B2.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline bool sc_writer_policy_check_write::check_write(sc_core::sc_object *target, bool)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: true
   2: return [B1.1];
   Preds (3): B2 B3 B6
   Succs (1): B0

 [B2]
   1: sc_signal_invalid_writer
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_core::sc_object *, class sc_core::sc_object *, class sc_core::sc_object *, _Bool))
   3: target
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   5: this
   6: [B2.5]->m_writer_p
   7: [B2.6].operator sc_core::sc_process_b *
   8: [B2.6]
   9: [B2.8] (ImplicitCastExpr, UserDefinedConversion, sc_core::sc_process_b *)
  10: [B2.9] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  11: writer_p
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
  13: [B2.12] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  14: this
  15: [B2.14]->m_delta_only
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, _Bool)
  17: [B2.2]([B2.4], [B2.10], [B2.13], [B2.16])
  18: writer_p
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
  20: [B2.19] (CXXConstructExpr, [B2.21], [B2.23], class sc_core::sc_process_handle)
  21: [B2.20] (BindTemporary)
  22: sc_core::sc_process_handle([B2.21]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_process_handle)
  23: [B2.22]
  24: [B2.23].swap
  25: this
  26: [B2.25]->m_writer_p
  27: [B2.24]([B2.26])
  28: ~sc_core::sc_process_handle() (Temporary object destructor)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: [B5.10] && [B4.5]
   2: !([B3.1])
   3: ![B3.2]
   4: [B3.3] (ImplicitCastExpr, IntegralCast, long)
   5: 0
   6: [B3.5] (ImplicitCastExpr, IntegralCast, long)
   7: [B5.2]([B3.4], [B3.6])
   8: [B3.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.8]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: writer_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   3: 0
   4: [B4.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   5: [B4.2] != [B4.4]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: __builtin_expect
   2: [B5.1] (ImplicitCastExpr, BuiltinFnToFnPtr, long (*)(long, long) noexcept)
   3: this
   4: [B5.3]->m_writer_p
   5: [B5.4].operator sc_core::sc_process_b *
   6: [B5.4]
   7: [B5.6] (ImplicitCastExpr, UserDefinedConversion, sc_core::sc_process_b *)
   8: writer_p
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
  10: [B5.7] != [B5.9]
   T: [B5.10] && ...
   Preds (1): B7
   Succs (2): B4 B3

 [B6]
   1: writer_p
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   3: [B6.2] (CXXConstructExpr, [B6.4], [B6.6], class sc_core::sc_process_handle)
   4: [B6.3] (BindTemporary)
   5: sc_core::sc_process_handle([B6.4]) (CXXFunctionalCastExpr, ConstructorConversion, class sc_core::sc_process_handle)
   6: [B6.5]
   7: [B6.6].swap
   8: this
   9: [B6.8]->m_writer_p
  10: [B6.7]([B6.9])
  11: ~sc_core::sc_process_handle() (Temporary object destructor)
   Preds (1): B7
   Succs (1): B1

 [B7]
   1: sc_get_curr_simcontext
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
   3: [B7.2]()
   4: [B7.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   5: [B7.4]->get_current_writer
   6: [B7.5]()
   7: sc_core::sc_process_b *writer_p = sc_get_curr_simcontext()->get_current_writer();
   8: __builtin_expect
   9: [B7.8] (ImplicitCastExpr, BuiltinFnToFnPtr, long (*)(long, long) noexcept)
  10: this
  11: [B7.10]->m_writer_p
  12: [B7.11] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_handle)
  13: [B7.12].valid
  14: [B7.13]()
  15: ![B7.14]
  16: !([B7.15])
  17: ![B7.16]
  18: [B7.17] (ImplicitCastExpr, IntegralCast, long)
  19: 0
  20: [B7.19] (ImplicitCastExpr, IntegralCast, long)
  21: [B7.9]([B7.18], [B7.20])
  22: [B7.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.22]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_writer_policy_check_write::update()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: sc_core::sc_process_handle() (CXXConstructExpr, [B1.2], [B1.3], class sc_core::sc_process_handle)
   2: [B1.1] (BindTemporary)
   3: [B1.2]
   4: [B1.3].swap
   5: this
   6: [B1.5]->m_writer_p
   7: [B1.4]([B1.6])
   8: ~sc_core::sc_process_handle() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_delta_only
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_signal_channel(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_prim_channel([B1.2]) (Base initializer), class sc_core::sc_prim_channel)
   4: sc_prim_channel([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
   7: m_change_event_p([B1.6]) (Member initializer)
   8: sc_dt::UINT64_ONE
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  10: ~[B1.9]
  11: m_change_stamp([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_signal_channel"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value_changed_event
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
   3: [B1.2]->simcontext
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_simcontext *)
   6: [B1.5]->event_occurred
   7: this
   8: [B1.7]->m_change_stamp
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  10: [B1.6]([B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void notify_next_delta(sc_core::sc_event *ev) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: ev
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   3: [B1.2]->notify_next_delta
   4: [B1.3]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: ev
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event *)
   3: [B2.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline ::std::ostream &operator<<(::std::ostream &os, const sc_core::sc_signal_channel &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object)
   3: [B1.2].print
   4: os
   5: [B1.3]([B1.4])
   6: os
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_time &period() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_period
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

double duty_cycle() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_duty_cycle
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, double)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool posedge_first() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_posedge_first
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_time start_time() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_start_time
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_core::sc_time)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_clock"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool is_clock() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_clock::posedge_action()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_next_negedge_event
   3: [B1.2].notify_internal
   4: this
   5: [B1.4]->m_negedge_time
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   7: [B1.3]([B1.6])
   8: true
   9: this
  10: [B1.9] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
  11: [B1.10]->m_new_val
  12: [B1.11] = [B1.8]
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_prim_channel *)
  15: [B1.14]->request_update
  16: [B1.15]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_clock::negedge_action()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_next_posedge_event
   3: [B1.2].notify_internal
   4: this
   5: [B1.4]->m_posedge_time
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   7: [B1.3]([B1.6])
   8: false
   9: this
  10: [B1.9] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
  11: [B1.10]->m_new_val
  12: [B1.11] = [B1.8]
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_prim_channel *)
  15: [B1.14]->request_update
  16: [B1.15]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_clock_posedge_callback(sc_core::sc_clock *target_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: target_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_clock *)
   3: m_target_p([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void operator()()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_clock *)
   4: [B1.3]->posedge_action
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_clock_negedge_callback(sc_core::sc_clock *target_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: target_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_clock *)
   3: m_target_p([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void operator()()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_target_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_clock *)
   4: [B1.3]->negedge_action
   5: [B1.4]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_port_base &port() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_port
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_trace_params(sc_core::sc_trace_file *tf_, const std::string &name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: tf_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   3: tf([B1.2]) (Member initializer)
   4: name_
   5: [B1.4] (CXXConstructExpr, name([B1.4]) (Member initializer), std::string)
   6: name([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   5: m_traces([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   8: m_change_finder_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_neg_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_pos_finder_p([B1.13]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(const sc_core::sc_in<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: const_cast<sc_core::sc_in<bool>::in_if_type &>([B1.1]) (CXXConstCastExpr, NoOp, sc_core::sc_in<_Bool>::in_if_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, const sc_core::sc_in<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: const_cast<sc_core::sc_in<bool>::in_if_type &>([B1.3]) (CXXConstCastExpr, NoOp, sc_core::sc_in<_Bool>::in_if_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(sc_core::sc_in<bool>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   6: m_traces([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   9: m_change_finder_p([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_neg_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_pos_finder_p([B1.14]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<bool>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   8: m_traces([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_change_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_neg_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_pos_finder_p([B1.16]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(sc_core::sc_in<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   5: m_traces([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   8: m_change_finder_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_neg_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_pos_finder_p([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
  17: [B1.16]->sc_port_base::bind
  18: parent_
  19: [B1.18] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
  20: [B1.17]([B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
  17: this
  18: [B1.17] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
  19: [B1.18]->sc_port_base::bind
  20: parent_
  21: [B1.20] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
  22: [B1.19]([B1.21])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(sc_core::sc_in<bool>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<bool>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_in_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_in<bool>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_in<_Bool> *)
   3: [B1.2]->remove_traces
   4: [B1.3]()
   5: this
   6: [B1.5]->m_change_finder_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   8: [B1.7]->~sc_event_finder() (Implicit destructor)
   9: delete [B1.7]
  10: this
  11: [B1.10]->m_neg_finder_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
  13: [B1.12]->~sc_event_finder() (Implicit destructor)
  14: delete [B1.12]
  15: this
  16: [B1.15]->m_pos_finder_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
  18: [B1.17]->~sc_event_finder() (Implicit destructor)
  19: delete [B1.17]
  20: ~sc_port() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(const sc_core::sc_in<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: interface_
   5: const_cast<sc_core::sc_in<bool>::in_if_type &>([B1.4]) (CXXConstCastExpr, NoOp, sc_core::sc_in<_Bool>::in_if_type)
   6: [B1.5] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   7: [B1.3]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: interface_
   4: const_cast<const sc_core::sc_in<bool>::in_if_type &>([B1.3]) (CXXConstCastExpr, NoOp, const sc_core::sc_in<_Bool>::in_if_type)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(const sc_core::sc_in<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: interface_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<bool>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(sc_core::sc_in<bool>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: parent_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(sc_core::sc_in<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: parent_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
   8: [B1.7]->default_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->value_changed_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &posedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->posedge_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &negedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->negedge_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_in<bool>::data_type &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->read
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const data_type &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->read
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &pos() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_pos_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::posedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &neg() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_neg_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::negedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool posedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->posedge
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool negedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->negedge
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &value_changed() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_change_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::value_changed_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_in"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<bool>::base_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   5: m_traces([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   8: m_change_finder_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_neg_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_pos_finder_p([B1.13]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(const sc_core::sc_in<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: const_cast<sc_core::sc_in<sc_dt::sc_logic>::in_if_type &>([B1.1]) (CXXConstCastExpr, NoOp, sc_core::sc_in<class sc_dt::sc_logic>::in_if_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, const sc_core::sc_in<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: const_cast<sc_core::sc_in<sc_dt::sc_logic>::in_if_type &>([B1.3]) (CXXConstCastExpr, NoOp, sc_core::sc_in<class sc_dt::sc_logic>::in_if_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(sc_core::sc_in<sc_dt::sc_logic>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   6: m_traces([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   9: m_change_finder_p([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_neg_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_pos_finder_p([B1.14]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<sc_dt::sc_logic>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   8: m_traces([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_change_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_neg_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_pos_finder_p([B1.16]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in(sc_core::sc_in<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   5: m_traces([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
   8: m_change_finder_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_neg_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_pos_finder_p([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
  17: [B1.16]->sc_port_base::bind
  18: parent_
  19: [B1.18] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
  20: [B1.17]([B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
  17: this
  18: [B1.17] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
  19: [B1.18]->sc_port_base::bind
  20: parent_
  21: [B1.20] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
  22: [B1.19]([B1.21])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(sc_core::sc_in<sc_dt::sc_logic>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   7: m_traces([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  10: m_change_finder_p([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_neg_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_pos_finder_p([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in(const char *name_, sc_core::sc_in<sc_dt::sc_logic>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_in<sc_dt::sc_logic>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_core::sc_in<sc_dt::sc_logic> *)
   3: [B1.2]->remove_traces
   4: [B1.3]()
   5: this
   6: [B1.5]->m_change_finder_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   8: [B1.7]->~sc_event_finder() (Implicit destructor)
   9: delete [B1.7]
  10: this
  11: [B1.10]->m_neg_finder_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
  13: [B1.12]->~sc_event_finder() (Implicit destructor)
  14: delete [B1.12]
  15: this
  16: [B1.15]->m_pos_finder_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
  18: [B1.17]->~sc_event_finder() (Implicit destructor)
  19: delete [B1.17]
  20: ~sc_port() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(const sc_core::sc_in<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: interface_
   5: const_cast<sc_core::sc_in<sc_dt::sc_logic>::in_if_type &>([B1.4]) (CXXConstCastExpr, NoOp, sc_core::sc_in<class sc_dt::sc_logic>::in_if_type)
   6: [B1.5] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   7: [B1.3]([B1.6])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: interface_
   4: const_cast<const sc_core::sc_in<sc_dt::sc_logic>::in_if_type &>([B1.3]) (CXXConstCastExpr, NoOp, const sc_core::sc_in<class sc_dt::sc_logic>::in_if_type)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(const sc_core::sc_in<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: interface_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<sc_dt::sc_logic>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(sc_core::sc_in<sc_dt::sc_logic>::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: parent_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void operator()(sc_core::sc_in<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->bind
   3: parent_
   4: [B1.2]([B1.3])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
   8: [B1.7]->default_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->value_changed_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &posedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->posedge_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &negedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->negedge_event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_in<sc_dt::sc_logic>::data_type &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->read
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const data_type &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->read
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &pos() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_pos_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::posedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &neg() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_neg_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::negedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->event
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool posedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->posedge
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool negedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6]->negedge
   8: [B1.7]()
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &value_changed() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_change_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::value_changed_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_in"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_in<sc_dt::sc_logic>::base_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2]->sc_port_base::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   5: m_init_val([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   8: m_traces([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_change_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_neg_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_pos_finder_p([B1.16]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   7: m_init_val([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  10: m_traces([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_change_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_neg_finder_p([B1.15]) (Member initializer)
  17: 0
  18: [B1.17] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  19: m_pos_finder_p([B1.18]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(sc_core::sc_inout<bool>::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   6: m_init_val([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<bool>::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   8: m_init_val([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  11: m_traces([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_change_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_neg_finder_p([B1.16]) (Member initializer)
  18: 0
  19: [B1.18] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  20: m_pos_finder_p([B1.19]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(sc_core::sc_inout<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   6: m_init_val([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<bool>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   8: m_init_val([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  11: m_traces([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_change_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_neg_finder_p([B1.16]) (Member initializer)
  18: 0
  19: [B1.18] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  20: m_pos_finder_p([B1.19]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(sc_core::sc_inout<bool>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   7: m_init_val([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  10: m_traces([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_change_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_neg_finder_p([B1.15]) (Member initializer)
  17: 0
  18: [B1.17] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  19: m_pos_finder_p([B1.18]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<bool>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_inout_if<_Bool>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<_Bool>::data_type *)
   9: m_init_val([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  12: m_traces([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_change_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_neg_finder_p([B1.17]) (Member initializer)
  19: 0
  20: [B1.19] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  21: m_pos_finder_p([B1.20]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
   8: [B1.7]->default_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->value_changed_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &posedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->posedge_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &negedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->negedge_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_inout<bool>::data_type &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->read
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const data_type &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->read
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &pos() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_pos_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::posedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &neg() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_neg_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::negedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool posedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->posedge
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool negedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
   8: [B1.7]->negedge
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void write(const sc_core::sc_inout<bool>::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<bool>::this_type &operator=(const sc_core::sc_inout<bool>::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<bool>::this_type &operator=(const sc_core::sc_inout<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: interface_
  10: [B1.9].read
  11: [B1.10]()
  12: [B1.8]([B1.11])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<bool>::this_type &operator=(const sc_core::sc_inout<bool>::in_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<_Bool> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13]->read
  15: [B1.14]()
  16: [B1.8]([B1.15])
  17: this
  18: *[B1.17]
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<bool>::this_type &operator=(const sc_core::sc_inout<bool>::inout_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<bool>::this_type &operator=(const sc_core::sc_inout<bool>::this_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<_Bool> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<_Bool> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<_Bool> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<_Bool> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_core::sc_inout<bool>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->initialize
   3: interface_
   4: [B1.3].read
   5: [B1.4]()
   6: [B1.2]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &value_changed() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const))
   3: this
   4: [B1.3]->m_change_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::value_changed_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_inout"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_port() (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   2: sc_port([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   5: m_init_val([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   8: m_traces([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  11: m_change_finder_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_neg_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_pos_finder_p([B1.16]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   7: m_init_val([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  10: m_traces([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_change_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_neg_finder_p([B1.15]) (Member initializer)
  17: 0
  18: [B1.17] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  19: m_pos_finder_p([B1.18]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(sc_core::sc_inout<sc_dt::sc_logic>::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   6: m_init_val([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<sc_dt::sc_logic>::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   8: m_init_val([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  11: m_traces([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_change_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_neg_finder_p([B1.16]) (Member initializer)
  18: 0
  19: [B1.18] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  20: m_pos_finder_p([B1.19]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout(sc_core::sc_inout<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_port([B1.1]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   3: sc_port([B1.2]) (Base initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   6: m_init_val([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
   9: m_traces([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  12: m_change_finder_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_neg_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_pos_finder_p([B1.17]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<sc_dt::sc_logic>::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_port([B1.2], [B1.3]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   5: sc_port([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   8: m_init_val([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  11: m_traces([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  14: m_change_finder_p([B1.13]) (Member initializer)
  15: 0
  16: [B1.15] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  17: m_neg_finder_p([B1.16]) (Member initializer)
  18: 0
  19: [B1.18] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  20: m_pos_finder_p([B1.19]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(sc_core::sc_inout<sc_dt::sc_logic>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_port([B1.2]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   4: sc_port([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   7: m_init_val([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  10: m_traces([B1.9]) (Member initializer)
  11: 0
  12: [B1.11] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  13: m_change_finder_p([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  16: m_neg_finder_p([B1.15]) (Member initializer)
  17: 0
  18: [B1.17] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  19: m_pos_finder_p([B1.18]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout(const char *name_, sc_core::sc_inout<sc_dt::sc_logic>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port([B1.2], [B1.4]) (Base initializer), sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>)
   6: sc_port([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_inout<class sc_dt::sc_logic>::data_type *)
   9: m_init_val([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, sc_core::sc_trace_params_vec *)
  12: m_traces([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  15: m_change_finder_p([B1.14]) (Member initializer)
  16: 0
  17: [B1.16] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  18: m_neg_finder_p([B1.17]) (Member initializer)
  19: 0
  20: [B1.19] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event_finder *)
  21: m_pos_finder_p([B1.20]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
   8: [B1.7]->default_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->value_changed_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &posedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->posedge_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_event &negedge_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->negedge_event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_inout<sc_dt::sc_logic>::data_type &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->read
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const data_type &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->read
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &pos() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_pos_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::posedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &neg() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_neg_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::negedge_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->event
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool posedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->posedge
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool negedge() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   8: [B1.7]->negedge
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void write(const sc_core::sc_inout<sc_dt::sc_logic>::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<sc_dt::sc_logic>::this_type &operator=(const sc_core::sc_inout<sc_dt::sc_logic>::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<sc_dt::sc_logic>::this_type &operator=(const sc_core::sc_inout<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: interface_
  10: [B1.9].read
  11: [B1.10]()
  12: [B1.8]([B1.11])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<sc_dt::sc_logic>::this_type &operator=(const sc_core::sc_inout<sc_dt::sc_logic>::in_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13]->read
  15: [B1.14]()
  16: [B1.8]([B1.15])
  17: this
  18: *[B1.17]
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<sc_dt::sc_logic>::this_type &operator=(const sc_core::sc_inout<sc_dt::sc_logic>::inout_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout<sc_dt::sc_logic>::this_type &operator=(const sc_core::sc_inout<sc_dt::sc_logic>::this_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_core::sc_inout<sc_dt::sc_logic>::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->initialize
   3: interface_
   4: [B1.3].read
   5: [B1.4]()
   6: [B1.2]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_event_finder &value_changed() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_event_finder::cached_create
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_event_finder &(*)(class sc_core::sc_event_finder *&, const class sc_core::sc_port_base &, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const))
   3: this
   4: [B1.3]->m_change_finder_p
   5: this
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_port_base)
   8: in_if_type::value_changed_event
   9: &[B1.8]
  10: [B1.2]([B1.4], [B1.7], [B1.9])
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_inout"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_event_queue"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_event_queue::notify(double when, sc_core::sc_time_unit base)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->notify
   3: when
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: base
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_time_unit)
   7: sc_core::sc_time([B1.4], [B1.6]) (CXXConstructExpr, [B1.9], class sc_core::sc_time)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_core::sc_time)
   9: [B1.8]
  10: [B1.2]([B1.9])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_core::sc_event &sc_event_queue::default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_e
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_mutex_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_scoped_lock(sc_core::sc_scoped_lock::lockable_type &mtx)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: mtx
   2: m_ref([B1.1]) (Member initializer)
   3: true
   4: m_active([B1.3]) (Member initializer)
   5: this
   6: [B1.5]->m_ref
   7: [B1.6].lock
   8: [B1.7]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool release()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_ref
   3: [B2.2].unlock
   4: [B2.3]()
   5: false
   6: this
   7: [B2.6]->m_active
   8: [B2.7] = [B2.5]
   9: true
  10: return [B2.9];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_active
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

~sc_scoped_lock() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->release
   3: [B1.2]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_mutex"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool in_use() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_owner
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_process_b *)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, sc_core::sc_process_b *)
   6: [B1.3] != [B1.5]
   7: return ([B1.6]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_semaphore_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int get_value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_semaphore"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool in_use() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B1.3] <= [B1.4]
   6: return ([B1.5]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_resolved()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: sc_gen_unique_name
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const char *(*)(const char *, _Bool))
   3: "signal_resolved"
   4: [B1.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: 
   6: [B1.2]([B1.4])
   7: [B1.6] (CXXConstructExpr, sc_signal([B1.6]) (Base initializer), sc_signal<sc_dt::sc_logic, SC_MANY_WRITERS>)
   8: sc_signal([B1.7]) (Base initializer)
   9:  (CXXConstructExpr, m_proc_vec() (Member initializer), std::vector<sc_process_b *>)
  10: m_proc_vec([B1.9]) (Member initializer)
  11:  (CXXConstructExpr, m_val_vec() (Member initializer), std::vector<value_type>)
  12: m_val_vec([B1.11]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_signal_resolved(const char *name_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_signal([B1.2]) (Base initializer), sc_signal<sc_dt::sc_logic, SC_MANY_WRITERS>)
   4: sc_signal([B1.3]) (Base initializer)
   5:  (CXXConstructExpr, m_proc_vec() (Member initializer), std::vector<sc_process_b *>)
   6: m_proc_vec([B1.5]) (Member initializer)
   7:  (CXXConstructExpr, m_val_vec() (Member initializer), std::vector<value_type>)
   8: m_val_vec([B1.7]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_resolved(const char *name_, const sc_core::sc_signal_resolved::value_type &initial_value_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: initial_value_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_signal([B1.2], [B1.3]) (Base initializer), sc_signal<sc_dt::sc_logic, SC_MANY_WRITERS>)
   5: sc_signal([B1.4]) (Base initializer)
   6:  (CXXConstructExpr, m_proc_vec() (Member initializer), std::vector<sc_process_b *>)
   7: m_proc_vec([B1.6]) (Member initializer)
   8:  (CXXConstructExpr, m_val_vec() (Member initializer), std::vector<value_type>)
   9: m_val_vec([B1.8]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual void register_port(sc_core::sc_port_base &, const char *)
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_signal_resolved"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_resolved::this_type &operator=(const sc_core::sc_signal_resolved::value_type &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_resolved::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_resolved::this_type &operator=(const sc_signal_in_if<sc_core::sc_signal_resolved::value_type> &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_resolved::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_resolved::this_type &operator=(const sc_core::sc_signal_resolved::this_type &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_resolved::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, const sc_core::sc_signal<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_in() (Base initializer), sc_in<sc_dt::sc_logic>)
   2: sc_in([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in_resolved(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_in([B1.2]) (Base initializer), sc_in<sc_dt::sc_logic>)
   4: sc_in([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in_resolved(const sc_core::sc_in_resolved::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: [B1.1] (CXXConstructExpr, sc_in([B1.1]) (Base initializer), sc_in<sc_dt::sc_logic>)
   3: sc_in([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved(const char *name_, const sc_core::sc_in_resolved::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_in([B1.2], [B1.3]) (Base initializer), sc_in<sc_dt::sc_logic>)
   5: sc_in([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in_resolved(sc_core::sc_in_resolved::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_in([B1.1]) (Base initializer), sc_in<sc_dt::sc_logic>)
   3: sc_in([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved(const char *name_, sc_core::sc_in_resolved::in_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_in([B1.2], [B1.3]) (Base initializer), sc_in<sc_dt::sc_logic>)
   5: sc_in([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_in_resolved(sc_core::sc_in_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_in([B1.1]) (Base initializer), sc_in<sc_dt::sc_logic>)
   3: sc_in([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved(const char *name_, sc_core::sc_in_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_in([B1.2], [B1.3]) (Base initializer), sc_in<sc_dt::sc_logic>)
   5: sc_in([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved(sc_core::sc_in_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_in<class sc_dt::sc_logic>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_in([B1.2]) (Base initializer), sc_in<sc_dt::sc_logic>)
   4: sc_in([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_in_resolved(const char *name_, sc_core::sc_in_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_in<class sc_dt::sc_logic>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_in([B1.2], [B1.4]) (Base initializer), sc_in<sc_dt::sc_logic>)
   6: sc_in([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_in_resolved() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_in() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_in_resolved"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout_resolved()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_inout() (Base initializer), sc_inout<sc_dt::sc_logic>)
   2: sc_inout([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout_resolved(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_inout([B1.2]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   4: sc_inout([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout_resolved(sc_core::sc_inout_resolved::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: [B1.1] (CXXConstructExpr, sc_inout([B1.1]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   3: sc_inout([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout_resolved(const char *name_, sc_core::sc_inout_resolved::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_inout([B1.2], [B1.3]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   5: sc_inout([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_inout_resolved(sc_core::sc_inout_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_inout([B1.1]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   3: sc_inout([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout_resolved(const char *name_, sc_core::sc_inout_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_inout([B1.2], [B1.3]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   5: sc_inout([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout_resolved(sc_core::sc_inout_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_inout<class sc_dt::sc_logic>::this_type)
   3: [B1.2] (CXXConstructExpr, sc_inout([B1.2]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   4: sc_inout([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_inout_resolved(const char *name_, sc_core::sc_inout_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_inout<class sc_dt::sc_logic>::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_inout([B1.2], [B1.4]) (Base initializer), sc_inout<sc_dt::sc_logic>)
   6: sc_inout([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_inout_resolved() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_inout() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout_resolved::this_type &operator=(const sc_core::sc_inout_resolved::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout_resolved::this_type &operator=(const sc_core::sc_inout_resolved::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: interface_
  10: [B1.9].read
  11: [B1.10]()
  12: [B1.8]([B1.11])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout_resolved::this_type &operator=(const sc_core::sc_inout_resolved::in_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13]->read
  15: [B1.14]()
  16: [B1.8]([B1.15])
  17: this
  18: *[B1.17]
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout_resolved::this_type &operator=(const sc_core::sc_inout_resolved::inout_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_inout_resolved::this_type &operator=(const sc_core::sc_inout_resolved::this_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_inout_resolved"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_out_resolved()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_inout_resolved() (Base initializer), class sc_core::sc_inout_resolved)
   2: sc_inout_resolved([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_out_resolved(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_inout_resolved([B1.2]) (Base initializer), class sc_core::sc_inout_resolved)
   4: sc_inout_resolved([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_out_resolved(sc_core::sc_out_resolved::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: interface_
   2: [B1.1] (CXXConstructExpr, sc_inout_resolved([B1.1]) (Base initializer), class sc_core::sc_inout_resolved)
   3: sc_inout_resolved([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_out_resolved(const char *name_, sc_core::sc_out_resolved::inout_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: interface_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_inout_resolved([B1.2], [B1.3]) (Base initializer), class sc_core::sc_inout_resolved)
   5: sc_inout_resolved([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_out_resolved(sc_core::sc_out_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (CXXConstructExpr, sc_inout_resolved([B1.1]) (Base initializer), class sc_core::sc_inout_resolved)
   3: sc_inout_resolved([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_out_resolved(const char *name_, sc_core::sc_out_resolved::inout_port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_inout_resolved([B1.2], [B1.3]) (Base initializer), class sc_core::sc_inout_resolved)
   5: sc_inout_resolved([B1.4]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_out_resolved(sc_core::sc_out_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: parent_
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, sc_core::sc_inout_resolved::this_type)
   3: [B1.2] (CXXConstructExpr, sc_inout_resolved([B1.2]) (Base initializer), class sc_core::sc_inout_resolved)
   4: sc_inout_resolved([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_out_resolved(const char *name_, sc_core::sc_out_resolved::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: parent_
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, sc_core::sc_inout_resolved::this_type)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_inout_resolved([B1.2], [B1.4]) (Base initializer), class sc_core::sc_inout_resolved)
   6: sc_inout_resolved([B1.5]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_out_resolved() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_inout_resolved() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_out_resolved::this_type &operator=(const sc_core::sc_out_resolved::data_type &value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: value_
  10: [B1.8]([B1.9])
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_out_resolved::this_type &operator=(const sc_core::sc_out_resolved::in_if_type &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: interface_
  10: [B1.9].read
  11: [B1.10]()
  12: [B1.8]([B1.11])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_out_resolved::this_type &operator=(const sc_core::sc_out_resolved::in_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13]->read
  15: [B1.14]()
  16: [B1.8]([B1.15])
  17: this
  18: *[B1.17]
  19: return [B1.18];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_out_resolved::this_type &operator=(const sc_core::sc_out_resolved::inout_port_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_out_resolved::this_type &operator=(const sc_core::sc_out_resolved::this_type &port_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator->
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void))
   3: this
   4: *[B1.3]
   5: ([B1.4]) (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   6: [B1.5] (OperatorCall)
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_write_if<class sc_dt::sc_logic> *)
   8: [B1.7]->write
   9: operator->
  10: [B1.9] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *(*)(void) const)
  11: port_
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
  13: [B1.12] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B1.14]->read
  16: [B1.15]()
  17: [B1.8]([B1.16])
  18: this
  19: *[B1.18]
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_out_resolved"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_value_base() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline char *allocate(std::size_t bytes_n)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: result_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char *)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_bgn_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: result_p
   5: [B2.4] = [B2.3]
   6: this
   7: [B2.6]->m_bgn_p
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: bytes_n
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, std::size_t)
  11: [B2.8] + [B2.10]
  12: this
  13: [B2.12]->m_next_p
  14: [B2.13] = [B2.11]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: char *result_p;
   2: bytes_n
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, std::size_t)
   4: 7
   5: [B3.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: [B3.3] + [B3.5]
   7: 8
   8: -[B3.7]
   9: ([B3.8]) (ImplicitCastExpr, IntegralCast, std::size_t)
  10: (std::size_t)[B3.9] (CStyleCastExpr, NoOp, std::size_t)
  11: ([B3.6]) & ([B3.10])
  12: bytes_n
  13: [B3.12] = [B3.11]
  14: this
  15: [B3.14]->m_next_p
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, char *)
  17: result_p
  18: [B3.17] = [B3.16]
  19: this
  20: [B3.19]->m_next_p
  21: bytes_n
  22: [B3.21] (ImplicitCastExpr, LValueToRValue, std::size_t)
  23: [B3.20] += [B3.22]
  24: this
  25: [B3.24]->m_next_p
  26: [B3.25] (ImplicitCastExpr, LValueToRValue, char *)
  27: this
  28: [B3.27]->m_end_p
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, char *)
  30: [B3.26] >= [B3.29]
   T: if [B3.30]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void initialize(std::size_t heap_size = 1048576)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_bgn_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: delete [] [B1.3]
   5: heap_size
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, std::size_t)
   7: CFGNewAllocator(char *)
   8: new char [[B1.6]]
   9: this
  10: [B1.9]->m_bgn_p
  11: [B1.10] = [B1.8]
  12: this
  13: [B1.12]->m_bgn_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, char *)
  15: heap_size
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, std::size_t)
  17: [B1.14][[B1.16]]
  18: &[B1.17]
  19: this
  20: [B1.19]->m_end_p
  21: [B1.20] = [B1.18]
  22: this
  23: [B1.22]->m_bgn_p
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, char *)
  25: this
  26: [B1.25]->m_next_p
  27: [B1.26] = [B1.24]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline std::size_t length()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_end_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: this
   5: [B1.4]->m_bgn_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, char *)
   7: [B1.3] - [B1.6]
   8: ([B1.7]) (ImplicitCastExpr, IntegralCast, std::size_t)
   9: (std::size_t)[B1.8] (CStyleCastExpr, NoOp, std::size_t)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_byte_heap()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, char *)
   3: m_bgn_p([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, char *)
   6: m_end_p([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, char *)
   9: m_next_p([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_byte_heap(std::size_t heap_size)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, char *)
   3: m_bgn_p([B1.2]) (Member initializer)
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, char *)
   6: m_end_p([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, char *)
   9: m_next_p([B1.8]) (Member initializer)
  10: this
  11: [B1.10]->initialize
  12: heap_size
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, std::size_t)
  14: [B1.11]([B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ~sc_byte_heap() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_bgn_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, char *)
   4: delete [] [B1.3]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_length_param::sc_length_param()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: m_len(/*implicit*/(int)0) (Member initializer)
   2: operator=
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_length_param &(*)(const class sc_dt::sc_length_param &))
   4: this
   5: *[B1.4]
   6: sc_length_context::default_value
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_length_param &(*)(void))
   8: [B1.7]()
   9: [B1.5] = [B1.8] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_length_param::sc_length_param(int len_)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: false
   T: do ... while [B1.1]
   Preds (2): B2(Unreachable) B3
   Succs (2): NULL B0

 [B2 (NORETURN)]
   1: ::sc_core::sc_report_handler::report
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_ERROR
   4: sc_core::SC_ID_INVALID_WL_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: 0
   7: [B2.6] (ImplicitCastExpr, NullToPointer, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/int/sc_length_param.h"
   9: [B2.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 143
  11: [B2.2]([B2.3], [B2.5], [B2.7], [B2.9], [B2.10])
  12: sc_core::sc_abort
  13: [B2.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  14: [B2.13]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: len_
   2: ([B3.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] <= [B3.3]
   T: if [B3.4]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   Succs (1): B3

 [B5]
   1: len_
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: m_len([B5.2]) (Member initializer)
   Preds (1): B6
   Succs (1): B3

 [B0 (EXIT)]
   Preds (2): B2 B1

inline sc_length_param::sc_length_param(const sc_dt::sc_length_param &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: m_len([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline explicit sc_length_param::sc_length_param(sc_dt::sc_without_context)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SC_DEFAULT_WL_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: m_len([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_length_param &sc_length_param::operator=(const sc_dt::sc_length_param &a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: a
   2: [B2.1].m_len
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B2.4]->m_len
   6: [B2.5] = [B2.3]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: a
   2: &[B3.1]
   3: this
   4: [B3.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_length_param *)
   5: [B3.2] != [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_length_param &a, const sc_dt::sc_length_param &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: b
   5: [B1.4].m_len
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_length_param &a, const sc_dt::sc_length_param &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: b
   5: [B1.4].m_len
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_length_param::len() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_length_param::len(int len_)
 [B6 (ENTRY)]
   Succs (1): B4

 [B1]
   1: len_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->m_len
   5: [B1.4] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: false
   T: do ... while [B2.1]
   Preds (2): B3(Unreachable) B4
   Succs (2): NULL B1

 [B3 (NORETURN)]
   1: ::sc_core::sc_report_handler::report
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_ERROR
   4: sc_core::SC_ID_INVALID_WL_
   5: [B3.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: 0
   7: [B3.6] (ImplicitCastExpr, NullToPointer, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/int/sc_length_param.h"
   9: [B3.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 195
  11: [B3.2]([B3.3], [B3.5], [B3.7], [B3.9], [B3.10])
  12: sc_core::sc_abort
  13: [B3.12] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  14: [B3.13]()
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: len_
   2: ([B4.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B4.2] <= [B4.3]
   T: if [B4.4]
   Preds (2): B5 B6
   Succs (2): B3 B2

 [B5]
   Succs (1): B4

 [B0 (EXIT)]
   Preds (2): B1 B3

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_length_param &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_bitref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_index([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_unsigned *)
   7: m_obj_p([B1.6]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_unsigned *obj_p, int index_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_unsigned *)
   3: const_cast<sc_dt::sc_unsigned *>([B1.2]) (CXXConstCastExpr, NoOp, class sc_dt::sc_unsigned *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: index_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_index
  11: [B1.10] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_unsigned_bitref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_bitref_r(const sc_dt::sc_unsigned_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_index
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_index([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  12: m_obj_p([B1.11]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: (sc_dt::uint64)[B1.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: low_i
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B1.3] % [B1.4]
   6: [B1.1] << ([B1.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: low_i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B1.9] / [B1.10]
  12: int word_i = low_i / 30;
  13: dst_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: word_i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14][[B1.16]]
  18: bit_mask
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: ~[B1.19]
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: [B1.17] &= [B1.21]
  23: false
  24: return [B1.23];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: dst_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: bit_mask
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.5] &= [B2.9]
  11: false
  12: result
  13: [B2.12] = [B2.11]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: dst_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: bit_mask
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: [B3.5] |= [B3.8]
  10: true
  11: result
  12: [B3.11] = [B3.10]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: 1
   2: low_i
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B4.3] % [B4.4]
   6: [B4.1] << ([B4.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: bool result;
   9: low_i
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 30
  12: [B4.10] / [B4.11]
  13: int word_i = low_i / 30;
  14: this
  15: [B4.14]->operator uint64
  16: [B4.14]
  17: [B4.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.17]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->to_bool
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_bitref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_unsigned_bitref_r() (Base initializer), class sc_dt::sc_unsigned_bitref_r)
   2: sc_unsigned_bitref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_bitref(const sc_dt::sc_unsigned_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_bitref_r)
   3: [B1.2] (CXXConstructExpr, sc_unsigned_bitref_r([B1.2]) (Base initializer), class sc_dt::sc_unsigned_bitref_r)
   4: sc_unsigned_bitref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_subref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_left([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_unsigned *)
   7: m_obj_p([B1.6]) (Member initializer)
   8: 0
   9: m_right([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_unsigned *obj_p, int left_, int right_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_unsigned *)
   3: const_cast<sc_dt::sc_unsigned *>([B1.2]) (CXXConstCastExpr, NoOp, class sc_dt::sc_unsigned *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: left_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_left
  11: [B1.10] = [B1.8]
  12: right_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B1.14]->m_right
  16: [B1.15] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_unsigned_subref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_subref_r(const sc_dt::sc_unsigned_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_left
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_left([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  12: m_obj_p([B1.11]) (Member initializer)
  13: a
  14: [B1.13].m_right
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_right([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.7] ? ([B2.9]) : ([B3.9])
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_left
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B2.4]->m_right
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B2.3] - [B2.6]
   8: 1
   9: [B2.7] + [B2.8]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_right
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B3.4]->m_left
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.3] - [B3.6]
   8: 1
   9: [B3.7] + [B3.8]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_left
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B4.4]->m_right
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B4.3] >= [B4.6]
   T: [B4.7] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_left
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B1.4]->m_right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] - [B1.6]
   8: 1
   9: [B1.7] + [B1.8]
  10: return [B1.9];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_subref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_unsigned_subref_r() (Base initializer), class sc_dt::sc_unsigned_subref_r)
   2: sc_unsigned_subref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_unsigned_subref(const sc_dt::sc_unsigned_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_subref_r)
   3: [B1.2] (CXXConstructExpr, sc_unsigned_subref_r([B1.2]) (Base initializer), class sc_dt::sc_unsigned_subref_r)
   4: sc_unsigned_subref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_subref &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_subref &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_unsigned() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->digit
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: delete [] [B1.3]
   5: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_digit *get_raw() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->digit
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->nbits
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 1
   5: [B1.3] - [B1.4]
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void check_index(int i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->nbits
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B2.5] - [B2.6]
   8: [B2.2] >= [B2.7]
   T: if ([B3.4]) || ([B2.8])
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: ([B3.4]) || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_dt::sc_unsigned_bitref &operator[](int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_unsigned_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_unsigned_bitref *result_p = sc_unsigned_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_bitref_r &operator[](int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_unsigned_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_unsigned_bitref *result_p = sc_unsigned_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned_bitref &bit(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_unsigned_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_unsigned_bitref *result_p = sc_unsigned_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_bitref_r &bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_unsigned_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_unsigned_bitref *result_p = sc_unsigned_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void check_range(int l, int r) const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: this
   2: [B1.1]->invalid_range
   3: l
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: l
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->nbits
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B2.5] - [B2.6]
   8: [B2.2] >= [B2.7]
   T: if ([B3.4]) || ([B2.8])
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: r
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: ([B3.4]) || ...
   Preds (1): B7
   Succs (2): B1 B2

 [B4]
   1: this
   2: [B4.1]->invalid_range
   3: l
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B4.2]([B4.4], [B4.6])
   Preds (2): B5 B6
   Succs (1): B0

 [B5]
   1: r
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->nbits
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 1
   7: [B5.5] - [B5.6]
   8: [B5.2] >= [B5.7]
   T: if ([B6.4]) || ([B5.8])
   Preds (1): B6
   Succs (2): B4 B0

 [B6]
   1: l
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B6.2] < [B6.3]
   T: ([B6.4]) || ...
   Preds (1): B7
   Succs (2): B4 B5

 [B7]
   1: l
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: r
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2] < [B7.4]
   T: if [B7.5]
   Preds (1): B8
   Succs (2): B6 B3

 [B0 (EXIT)]
   Preds (4): B1 B2 B4 B5

sc_dt::sc_unsigned_subref &range(int i, int j)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   3: [B1.2]->check_range
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: j
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_unsigned_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_unsigned_subref *result_p = sc_unsigned_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
  19: i
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: j
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_subref_r &range(int i, int j) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: j
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_unsigned_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_unsigned_subref *result_p = sc_unsigned_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: j
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned_subref &operator()(int i, int j)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   3: [B1.2]->check_range
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: j
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_unsigned_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_unsigned_subref *result_p = sc_unsigned_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
  19: i
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: j
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned_subref_r &operator()(int i, int j) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: j
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_unsigned_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_unsigned_subref *result_p = sc_unsigned_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_unsigned_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: j
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_unsigned_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->nbits
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 1
   5: [B1.3] - [B1.4]
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool sign() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i, bool v)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->clear
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->set
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: v
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

void invert(int i)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->set
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->clear
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   3: [B3.2]->test
   4: i
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.3]([B3.5])
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_dt::sc_unsigned operator+(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator+(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator+=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator+=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator+=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator+=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator-=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator-=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator-=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator-=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator*(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator*(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator*=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator*=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator*=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator*=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator/(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator/(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator/=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator/=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator/=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator/=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator%(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator%(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator%=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator%=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator%=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator%=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator&(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator&(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator&=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator&=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator&=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator&=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator|(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator|(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator|=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator|=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator|=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator|=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator^(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator^(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator^=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator^=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator^=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator^=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator<<(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator<<(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator<<=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator<<=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator>>(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator>>(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator>>=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator>>=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &operator>>=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator>>=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::small_type default_sign() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int num_bits(int nb) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: nb
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 1
   4: [B1.2] + [B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void copy_digits(int nb, int nd, const sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: copy_digits_unsigned
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type &, int, int, sc_dt::sc_digit *, int, int, const sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: this
   6: [B1.5]->nbits
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B1.8]->ndigits
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: this
  12: [B1.11]->digit
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  14: nb
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: nd
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: d
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  20: [B1.2]([B1.4], [B1.7], [B1.10], [B1.13], [B1.15], [B1.17], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void makezero()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: make_zero
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->ndigits
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: this
   7: [B1.6]->digit
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.5], [B1.8])
  10: this
  11: [B1.10]->sgn
  12: [B1.11] = [B1.9]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_2C_to_SM()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_unsigned_2C_to_SM
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->nbits
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: this
   7: [B1.6]->ndigits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->digit
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.5], [B1.8], [B1.11])
  13: this
  14: [B1.13]->sgn
  15: [B1.14] = [B1.12]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_SM_to_2C_to_SM()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_unsigned_SM_to_2C_to_SM
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: this
   7: [B1.6]->nbits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->ndigits
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: this
  13: [B1.12]->digit
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: [B1.2]([B1.5], [B1.8], [B1.11], [B1.14])
  16: this
  17: [B1.16]->sgn
  18: [B1.17] = [B1.15]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_SM_to_2C()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_unsigned_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: this
   7: [B1.6]->ndigits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->digit
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.5], [B1.8], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_unsigned_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_unsigned_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unsigned_subref_r::and_reduce() const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: false
   2: return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: target_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_unsigned *)
   3: [B4.2]->test
   4: i
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.3]([B4.5])
   7: ![B4.6]
   T: if [B4.7]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_left
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] <= [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: this
   2: [B6.1]->m_obj_p
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   5: const sc_dt::sc_unsigned *target_p = this->m_obj_p;
   6: this
   7: [B6.6]->m_right
   8: [B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: int i = this->m_right;
   Preds (1): B7
   Succs (1): B5

 [B0 (EXIT)]
   Preds (2): B1 B3

inline bool sc_unsigned_subref_r::nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unsigned_subref_r::or_reduce() const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: true
   2: return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: target_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_unsigned *)
   3: [B4.2]->test
   4: i
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.3]([B4.5])
   T: if [B4.6]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_left
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] <= [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: this
   2: [B6.1]->m_obj_p
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   5: const sc_dt::sc_unsigned *target_p = this->m_obj_p;
   6: this
   7: [B6.6]->m_right
   8: [B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: int i = this->m_right;
   Preds (1): B7
   Succs (1): B5

 [B0 (EXIT)]
   Preds (2): B1 B3

inline bool sc_unsigned_subref_r::nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unsigned_subref_r::xor_reduce() const
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: [B4.3] ? [B2.1] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: odd
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B4.2] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B4.3] ? ... : ...
   Preds (1): B8
   Succs (2): B2 B3

 [B5]
   1: i
   2: [B5.1]++
   Preds (2): B6 B7
   Succs (1): B8

 [B6]
   1: odd
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ~[B6.2]
   4: odd
   5: [B6.4] = [B6.3]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: target_p
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_unsigned *)
   3: [B7.2]->test
   4: i
   5: [B7.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B7.3]([B7.5])
   T: if [B7.6]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
   1: i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B8.3]->m_left
   5: [B8.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B8.2] <= [B8.5]
   T: for (...; [B8.6]; ...)
   Preds (2): B5 B9
   Succs (2): B7 B4

 [B9]
   1: int odd;
   2: this
   3: [B9.2]->m_obj_p
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   5: [B9.4] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
   6: const sc_dt::sc_unsigned *target_p = this->m_obj_p;
   7: 0
   8: odd
   9: [B9.8] = [B9.7]
  10: this
  11: [B9.10]->m_right
  12: [B9.11] (ImplicitCastExpr, LValueToRValue, int)
  13: int i = this->m_right;
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_unsigned_subref_r::xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_unsigned_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned_subref &sc_unsigned_subref::operator=(const char *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_unsigned_subref_r *)
   3: [B1.2]->length
   4: [B1.3]()
   5: [B1.4] (CXXConstructExpr, [B1.6], class sc_dt::sc_unsigned)
   6: sc_dt::sc_unsigned aa(this->length());
   7: operator=
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned_subref &(*)(const class sc_dt::sc_unsigned &))
   9: this
  10: *[B1.9]
  11: operator=
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const char *))
  13: aa
  14: a
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, const char *)
  16: [B1.13] = [B1.15] (OperatorCall)
  17: [B1.10] = [B1.16] (OperatorCall)
  18: return ([B1.17]);
  19: [B1.6].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_unsigned_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_bitref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_index([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_signed *)
   7: m_obj_p([B1.6]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_signed *obj_p, int index_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: index_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->m_index
   5: [B1.4] = [B1.2]
   6: obj_p
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_signed *)
   8: const_cast<sc_dt::sc_signed *>([B1.7]) (CXXConstCastExpr, NoOp, class sc_dt::sc_signed *)
   9: this
  10: [B1.9]->m_obj_p
  11: [B1.10] = ([B1.8])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signed_bitref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_bitref_r(const sc_dt::sc_signed_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_index
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_index([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed *)
  12: m_obj_p([B1.11]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: (sc_dt::uint64)[B1.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: low_i
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B1.3] % [B1.4]
   6: [B1.1] << ([B1.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: low_i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B1.9] / [B1.10]
  12: int word_i = low_i / 30;
  13: dst_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: word_i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14][[B1.16]]
  18: bit_mask
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: ~[B1.19]
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: [B1.17] &= [B1.21]
  23: false
  24: return [B1.23];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: dst_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: bit_mask
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.5] &= [B2.9]
  11: false
  12: result
  13: [B2.12] = [B2.11]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: dst_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: bit_mask
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: [B3.5] |= [B3.8]
  10: true
  11: result
  12: [B3.11] = [B3.10]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: 1
   2: low_i
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B4.3] % [B4.4]
   6: [B4.1] << ([B4.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: bool result;
   9: low_i
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 30
  12: [B4.10] / [B4.11]
  13: int word_i = low_i / 30;
  14: this
  15: [B4.14]->operator uint64
  16: [B4.14]
  17: [B4.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.17]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->to_bool
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_bitref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signed_bitref_r() (Base initializer), class sc_dt::sc_signed_bitref_r)
   2: sc_signed_bitref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_bitref(const sc_dt::sc_signed_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_bitref_r)
   3: [B1.2] (CXXConstructExpr, sc_signed_bitref_r([B1.2]) (Base initializer), class sc_dt::sc_signed_bitref_r)
   4: sc_signed_bitref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_subref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_left([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_signed *)
   7: m_obj_p([B1.6]) (Member initializer)
   8: 0
   9: m_right([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_signed *obj_p, int left_, int right_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_signed *)
   3: const_cast<sc_dt::sc_signed *>([B1.2]) (CXXConstCastExpr, NoOp, class sc_dt::sc_signed *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = ([B1.3])
   7: left_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_left
  11: [B1.10] = [B1.8]
  12: right_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B1.14]->m_right
  16: [B1.15] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signed_subref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_subref_r(const sc_dt::sc_signed_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_left
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_left([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed *)
  12: m_obj_p([B1.11]) (Member initializer)
  13: a
  14: [B1.13].m_right
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_right([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.7] ? ([B2.9]) : ([B3.9])
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_left
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B2.4]->m_right
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B2.3] - [B2.6]
   8: 1
   9: [B2.7] + [B2.8]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_right
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B3.4]->m_left
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.3] - [B3.6]
   8: 1
   9: [B3.7] + [B3.8]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_left
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B4.4]->m_right
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B4.3] >= [B4.6]
   T: [B4.7] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_left
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B1.4]->m_right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] - [B1.6]
   8: 1
   9: [B1.7] + [B1.8]
  10: return [B1.9];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_subref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signed_subref_r() (Base initializer), class sc_dt::sc_signed_subref_r)
   2: sc_signed_subref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signed_subref(const sc_dt::sc_signed_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_subref_r)
   3: [B1.2] (CXXConstructExpr, sc_signed_subref_r([B1.2]) (Base initializer), class sc_dt::sc_signed_subref_r)
   4: sc_signed_subref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_subref &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_subref &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signed() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->digit
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: delete [] [B1.3]
   5: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_digit *get_raw() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->digit
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->nbits
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline void check_index(int i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->nbits
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.2] >= [B2.5]
   T: if [B3.4] || [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: [B3.4] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_dt::sc_signed_bitref &operator[](int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_signed_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_signed_bitref *result_p = sc_signed_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_bitref_r &operator[](int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_signed_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_signed_bitref *result_p = sc_signed_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed_bitref &bit(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_signed_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_signed_bitref *result_p = sc_signed_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_bitref_r &bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_signed_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_signed_bitref *result_p = sc_signed_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void check_range(int l, int r) const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: this
   2: [B1.1]->invalid_range
   3: l
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: l
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->nbits
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.2] >= [B2.5]
   T: if [B3.4] || [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: r
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: [B3.4] || ...
   Preds (1): B7
   Succs (2): B1 B2

 [B4]
   1: this
   2: [B4.1]->invalid_range
   3: l
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B4.2]([B4.4], [B4.6])
   Preds (2): B5 B6
   Succs (1): B0

 [B5]
   1: r
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->nbits
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] >= [B5.5]
   T: if [B6.4] || [B5.6]
   Preds (1): B6
   Succs (2): B4 B0

 [B6]
   1: l
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B6.2] < [B6.3]
   T: [B6.4] || ...
   Preds (1): B7
   Succs (2): B4 B5

 [B7]
   1: l
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: r
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2] < [B7.4]
   T: if [B7.5]
   Preds (1): B8
   Succs (2): B6 B3

 [B0 (EXIT)]
   Preds (4): B1 B2 B4 B5

sc_dt::sc_signed_subref &range(int i, int j)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   3: [B1.2]->check_range
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: j
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_signed_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_signed_subref *result_p = sc_signed_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
  19: i
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: j
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_subref_r &range(int i, int j) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: j
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_signed_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_signed_subref *result_p = sc_signed_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: j
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed_subref &operator()(int i, int j)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   3: [B1.2]->check_range
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: j
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_signed_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_signed_subref *result_p = sc_signed_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
  19: i
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: j
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed_subref_r &operator()(int i, int j) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: j
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_signed_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_signed_subref *result_p = sc_signed_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_signed_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: j
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_signed_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->nbits
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i, bool v)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->clear
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->set
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: v
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

void invert(int i)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->set
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->clear
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   3: [B3.2]->test
   4: i
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.3]([B3.5])
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_dt::sc_signed operator+(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator+(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator+(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator+(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator+(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator+(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator+=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator+=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator+=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator+=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(const sc_dt::sc_unsigned &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(unsigned int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator-=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator-=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator-=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator-=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator*(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator*=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator*=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator*=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator*=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator/(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator/=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator/=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator/=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator/=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator%(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator%=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator%=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator%=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator%=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator&(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator&=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator&=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator&=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator&=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator|(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator|=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator|=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator|=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator|=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(const sc_dt::sc_unsigned &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(int u, const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator^(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator^=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator^=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator^=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator^=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator<<(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator<<(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator<<=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator<<=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator<<=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator>>(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator>>(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7]) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator>>=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator>>=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_signed &operator>>=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator>>=
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_signed &u, int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, long)
   7: (long)[B1.6] (CStyleCastExpr, NoOp, long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_signed &u, unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, unsigned long))
   3: u
   4: v
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long)
   7: (unsigned long)[B1.6] (CStyleCastExpr, NoOp, unsigned long)
   8: [B1.2]([B1.3], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, long)
   6: (long)[B1.5] (CStyleCastExpr, NoOp, long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(unsigned int u, const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_signed &))
   3: u
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: (unsigned long)[B1.5] (CStyleCastExpr, NoOp, unsigned long)
   7: v
   8: [B1.2]([B1.6], [B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::small_type default_sign() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 2
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int num_bits(int nb) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: nb
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void copy_digits(int nb, int nd, const sc_dt::sc_digit *d)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: copy_digits_signed
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type &, int, int, sc_dt::sc_digit *, int, int, const sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: this
   6: [B1.5]->nbits
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B1.8]->ndigits
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: this
  12: [B1.11]->digit
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  14: nb
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: nd
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: d
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_digit *)
  20: [B1.2]([B1.4], [B1.7], [B1.10], [B1.13], [B1.15], [B1.17], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void makezero()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: make_zero
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->ndigits
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: this
   7: [B1.6]->digit
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   9: [B1.2]([B1.5], [B1.8])
  10: this
  11: [B1.10]->sgn
  12: [B1.11] = [B1.9]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_2C_to_SM()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_signed_2C_to_SM
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(int, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->nbits
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: this
   7: [B1.6]->ndigits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->digit
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.5], [B1.8], [B1.11])
  13: this
  14: [B1.13]->sgn
  15: [B1.14] = [B1.12]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_SM_to_2C_to_SM()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_signed_SM_to_2C_to_SM
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_dt::small_type (*)(sc_dt::small_type, int, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: this
   7: [B1.6]->nbits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->ndigits
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: this
  13: [B1.12]->digit
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: [B1.2]([B1.5], [B1.8], [B1.11], [B1.14])
  16: this
  17: [B1.16]->sgn
  18: [B1.17] = [B1.15]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void convert_SM_to_2C()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: convert_signed_SM_to_2C
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_dt::small_type, int, sc_dt::sc_digit *))
   3: this
   4: [B1.3]->sgn
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::small_type)
   6: this
   7: [B1.6]->ndigits
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->digit
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  12: [B1.2]([B1.5], [B1.8], [B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_signed_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_signed_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_signed_subref_r::and_reduce() const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: false
   2: return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: target_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_signed *)
   3: [B4.2]->test
   4: i
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.3]([B4.5])
   7: ![B4.6]
   T: if [B4.7]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_left
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] <= [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: this
   2: [B6.1]->m_obj_p
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed *)
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   5: const sc_dt::sc_signed *target_p = this->m_obj_p;
   6: this
   7: [B6.6]->m_right
   8: [B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: int i = this->m_right;
   Preds (1): B7
   Succs (1): B5

 [B0 (EXIT)]
   Preds (2): B1 B3

inline bool sc_signed_subref_r::nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_signed_subref_r::or_reduce() const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B4
   Succs (1): B5

 [B3]
   1: true
   2: return [B3.1];
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: target_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_signed *)
   3: [B4.2]->test
   4: i
   5: [B4.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B4.3]([B4.5])
   T: if [B4.6]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_left
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] <= [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: this
   2: [B6.1]->m_obj_p
   3: [B6.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed *)
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   5: const sc_dt::sc_signed *target_p = this->m_obj_p;
   6: this
   7: [B6.6]->m_right
   8: [B6.7] (ImplicitCastExpr, LValueToRValue, int)
   9: int i = this->m_right;
   Preds (1): B7
   Succs (1): B5

 [B0 (EXIT)]
   Preds (2): B1 B3

inline bool sc_signed_subref_r::nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_signed_subref_r::xor_reduce() const
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: [B4.3] ? [B2.1] : [B3.1]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: true
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: false
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: odd
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B4.2] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B4.3] ? ... : ...
   Preds (1): B8
   Succs (2): B2 B3

 [B5]
   1: i
   2: [B5.1]++
   Preds (2): B6 B7
   Succs (1): B8

 [B6]
   1: odd
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: ~[B6.2]
   4: odd
   5: [B6.4] = [B6.3]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: target_p
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_signed *)
   3: [B7.2]->test
   4: i
   5: [B7.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B7.3]([B7.5])
   T: if [B7.6]
   Preds (1): B8
   Succs (2): B6 B5

 [B8]
   1: i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B8.3]->m_left
   5: [B8.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B8.2] <= [B8.5]
   T: for (...; [B8.6]; ...)
   Preds (2): B5 B9
   Succs (2): B7 B4

 [B9]
   1: int odd;
   2: this
   3: [B9.2]->m_obj_p
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed *)
   5: [B9.4] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed *)
   6: const sc_dt::sc_signed *target_p = this->m_obj_p;
   7: 0
   8: odd
   9: [B9.8] = [B9.7]
  10: this
  11: [B9.10]->m_right
  12: [B9.11] (ImplicitCastExpr, LValueToRValue, int)
  13: int i = this->m_right;
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_signed_subref_r::xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_signed_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed_subref &sc_signed_subref::operator=(const char *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_signed_subref_r *)
   3: [B1.2]->length
   4: [B1.3]()
   5: [B1.4] (CXXConstructExpr, [B1.6], class sc_dt::sc_signed)
   6: sc_dt::sc_signed aa(this->length());
   7: operator=
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_signed_subref &(*)(const class sc_dt::sc_signed &))
   9: this
  10: *[B1.9]
  11: operator=
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_signed &(*)(const char *))
  13: aa
  14: a
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, const char *)
  16: [B1.13] = [B1.15] (OperatorCall)
  17: [B1.10] = [B1.16] (OperatorCall)
  18: return ([B1.17]);
  19: [B1.6].~sc_dt::sc_signed() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_signed_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_bitref_r(const sc_dt::sc_uint_bitref_r &init)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: init
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: init
   6: [B1.5].m_index
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_index([B1.7]) (Member initializer)
   9: init
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
  12: m_obj_p([B1.11]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_bitref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_index([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_uint_base *)
   7: m_obj_p([B1.6]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_uint_base *obj_p, int index_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_uint_base *)
   3: (sc_dt::sc_uint_base *)[B1.2] (CStyleCastExpr, NoOp, class sc_dt::sc_uint_base *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: index_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_index
  11: [B1.10] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_uint_bitref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: low_i
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B1.3] % [B1.4]
   6: [B1.1] << ([B1.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: low_i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B1.9] / [B1.10]
  12: int word_i = low_i / 30;
  13: dst_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: word_i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14][[B1.16]]
  18: bit_mask
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: ~[B1.19]
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: [B1.17] &= [B1.21]
  23: false
  24: return [B1.23];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: dst_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: bit_mask
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.5] &= [B2.9]
  11: false
  12: result
  13: [B2.12] = [B2.11]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: dst_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: bit_mask
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: [B3.5] |= [B3.8]
  10: true
  11: result
  12: [B3.11] = [B3.10]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: 1
   2: low_i
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B4.3] % [B4.4]
   6: [B4.1] << ([B4.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: bool result;
   9: low_i
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 30
  12: [B4.10] / [B4.11]
  13: int word_i = low_i / 30;
  14: this
  15: [B4.14]->operator uint64
  16: [B4.14]
  17: [B4.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.17]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->to_bool
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_bitref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_uint_bitref_r() (Base initializer), class sc_dt::sc_uint_bitref_r)
   2: sc_uint_bitref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_bitref(const sc_dt::sc_uint_bitref &init)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: init
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_bitref_r)
   3: [B1.2] (CXXConstructExpr, sc_uint_bitref_r([B1.2]) (Base initializer), class sc_dt::sc_uint_bitref_r)
   4: sc_uint_bitref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_subref_r(const sc_dt::sc_uint_subref_r &init)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: init
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: init
   6: [B1.5].m_left
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_left([B1.7]) (Member initializer)
   9: init
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
  12: m_obj_p([B1.11]) (Member initializer)
  13: init
  14: [B1.13].m_right
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_right([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_subref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_left([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_uint_base *)
   7: m_obj_p([B1.6]) (Member initializer)
   8: 0
   9: m_right([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_uint_base *obj_p, int left_i, int right_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_uint_base *)
   3: (sc_dt::sc_uint_base *)[B1.2] (CStyleCastExpr, NoOp, class sc_dt::sc_uint_base *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: left_i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_left
  11: [B1.10] = [B1.8]
  12: right_i
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B1.14]->m_right
  16: [B1.15] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_uint_subref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_left
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B1.4]->m_right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] - [B1.6]
   8: 1
   9: [B1.7] + [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: (sc_dt::uint64)[B1.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint_type value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_subref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_uint_subref_r() (Base initializer), class sc_dt::sc_uint_subref_r)
   2: sc_uint_subref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_subref(const sc_dt::sc_uint_subref &init)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: init
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_subref_r)
   3: [B1.2] (CXXConstructExpr, sc_uint_subref_r([B1.2]) (Base initializer), class sc_dt::sc_uint_subref_r)
   4: sc_uint_subref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3].operator uint_type
   5: [B1.3]
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(const sc_dt::sc_uint_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_uint_subref_r)
   5: [B1.4].operator uint_type
   6: [B1.4]
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(sc_dt::int64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_subref &operator=(double a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: [B1.4] (ImplicitCastExpr, FloatingToIntegral, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void check_length() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_length
   3: [B1.2]()
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_len
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 64
   5: [B2.3] > [B2.4]
   T: if [B3.5] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: this
   2: [B3.1]->m_len
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B3.3] <= [B3.4]
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

void check_index(int i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->m_len
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.2] >= [B2.5]
   T: if [B3.4] || [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: [B3.4] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

void check_range(int l, int r) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: this
   2: [B1.1]->invalid_range
   3: l
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: l
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: r
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2] < [B2.4]
   T: if [B4.4] || [B3.6] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: l
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B3.3]->m_len
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.2] >= [B3.5]
   T: [B4.4] || [B3.6] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B4]
   1: r
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B4.2] < [B4.3]
   T: [B4.4] || ...
   Preds (1): B5
   Succs (2): B1 B3

 [B0 (EXIT)]
   Preds (2): B1 B2

void extend_sign()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: UINT_ZERO
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: ~[B1.4]
   6: this
   7: [B1.6]->m_ulen
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5] >> [B1.8]
  10: [B1.2] &= ([B1.9])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_uint_base(int w = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   5: m_val([B1.4]) (Member initializer)
   6: w
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_len([B1.7]) (Member initializer)
   9: 64
  10: this
  11: [B1.10]->m_len
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B1.9] - [B1.12]
  14: m_ulen([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  17: [B1.16]->check_length
  18: [B1.17]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_base(sc_dt::uint_type v, int w)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: m_val([B1.4]) (Member initializer)
   6: w
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_len([B1.7]) (Member initializer)
   9: 64
  10: this
  11: [B1.10]->m_len
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B1.9] - [B1.12]
  14: m_ulen([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  17: [B1.16]->check_length
  18: [B1.17]()
  19: this
  20: [B1.19]->extend_sign
  21: [B1.20]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_uint_base(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   8: m_val([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_len
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: m_len([B1.11]) (Member initializer)
  13: a
  14: [B1.13].m_ulen
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_ulen([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_uint_base(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: a
   4: [B1.3].operator unsigned long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   7: m_val([B1.6]) (Member initializer)
   8: a
   9: [B1.8].length
  10: [B1.9]()
  11: m_len([B1.10]) (Member initializer)
  12: 64
  13: this
  14: [B1.13]->m_len
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B1.12] - [B1.15]
  17: m_ulen([B1.16]) (Member initializer)
  18: this
  19: [B1.18]->extend_sign
  20: [B1.19]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_uint_base() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] = [B1.2]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].operator unsigned long long
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   5: this
   6: [B1.5]->m_val
   7: [B1.6] = [B1.4]
   8: this
   9: [B1.8]->extend_sign
  10: [B1.9]()
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned long)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, long)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(sc_dt::int64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator=(double a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, double)
   3: [B1.2] (ImplicitCastExpr, FloatingToIntegral, sc_dt::uint_type)
   4: (sc_dt::uint_type)[B1.3] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   5: this
   6: [B1.5]->m_val
   7: [B1.6] = [B1.4]
   8: this
   9: [B1.8]->extend_sign
  10: [B1.9]()
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator+=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] += [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator-=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] -= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator*=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] *= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator/=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] /= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator%=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] %= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator&=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] &= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator|=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] |= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator^=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] ^= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator<<=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] <<= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator>>=(sc_dt::uint_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   5: [B1.2] >>= [B1.4]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator++()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: ++[B1.2]
   4: this
   5: [B1.4]->extend_sign
   6: [B1.5]()
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_uint_base operator++(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_uint_base)
   5: sc_dt::sc_uint_base tmp(*this);
   6: this
   7: [B1.6]->m_val
   8: ++[B1.7]
   9: this
  10: [B1.9]->extend_sign
  11: [B1.10]()
  12: tmp
  13: [B1.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
  14: [B1.13] (CXXConstructExpr, [B1.15], const class sc_dt::sc_uint_base)
  15: return [B1.14];
  16: [B1.5].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_uint_base &operator--()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: --[B1.2]
   4: this
   5: [B1.4]->extend_sign
   6: [B1.5]()
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_uint_base operator--(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_uint_base)
   5: sc_dt::sc_uint_base tmp(*this);
   6: this
   7: [B1.6]->m_val
   8: --[B1.7]
   9: this
  10: [B1.9]->extend_sign
  11: [B1.10]()
  12: tmp
  13: [B1.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
  14: [B1.13] (CXXConstructExpr, [B1.15], const class sc_dt::sc_uint_base)
  15: return [B1.14];
  16: [B1.5].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] != [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] < [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] <= [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] > [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_uint_base &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   7: [B1.3] >= [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool test(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralCast, unsigned long long)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   6: UINT_ONE
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B1.7] << [B1.9]
  11: [B1.5] & ([B1.10])
  12: [B1.2] != ([B1.11])
  13: return ([B1.12]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: UINT_ONE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.4] << [B1.6]
   8: [B1.2] |= ([B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i, bool v)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.2] ? [B2.8] : [B3.9]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_val
   3: UINT_ONE
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B2.4] << [B2.6]
   8: [B2.2] |= ([B2.7])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_val
   3: UINT_ONE
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4] << [B3.6]
   8: ~([B3.7])
   9: [B3.2] &= [B3.8]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: v
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B4.2] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator uint_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint_type value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int to_int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int to_uint() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: (unsigned int)[B1.4] (CStyleCastExpr, NoOp, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long to_long() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, long)
   5: (long)[B1.4] (CStyleCastExpr, NoOp, long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned long to_ulong() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: (unsigned long)[B1.4] (CStyleCastExpr, NoOp, unsigned long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::int64 to_int64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   5: (sc_dt::int64)[B1.4] (CStyleCastExpr, NoOp, sc_dt::int64)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 to_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: (sc_dt::uint64)[B1.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

double to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: uint64_to_double
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(sc_dt::uint64))
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long long_low() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: UINT64_32ONES
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   6: [B1.3] & [B1.5]
   7: ([B1.6]) (ImplicitCastExpr, IntegralCast, long)
   8: (long)[B1.7] (CStyleCastExpr, NoOp, long)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long long_high() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   4: 32
   5: [B1.3] >> [B1.4]
   6: UINT64_32ONES
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: ([B1.5]) & [B1.7]
   9: ([B1.8]) (ImplicitCastExpr, IntegralCast, long)
  10: (long)[B1.9] (CStyleCastExpr, NoOp, long)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_uint_bitref_r::operator uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: [B1.9] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_uint_bitref_r::operator!() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: ![B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_uint_bitref_r::operator~() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: ![B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_uint_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator=(const sc_dt::sc_uint_bitref_r &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10].to_bool
  12: [B1.11]()
  13: [B1.5]([B1.9], [B1.12])
  14: this
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator=(const sc_dt::sc_uint_bitref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_uint_bitref_r)
  12: [B1.11].to_bool
  13: [B1.12]()
  14: [B1.5]([B1.9], [B1.13])
  15: this
  16: *[B1.15]
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B1.5]([B1.9], [B1.11])
  13: this
  14: *[B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator&=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B2.4]->set
   6: this
   7: [B2.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   8: [B2.7]->m_index
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B2.5]([B2.9], [B2.11])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: ![B3.2]
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator|=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B2.4]->set
   6: this
   7: [B2.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   8: [B2.7]->m_index
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B2.5]([B2.9], [B2.11])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_bitref::operator^=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   5: [B2.4]->m_val
   6: UINT_ONE
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: this
   9: [B2.8] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
  10: [B2.9]->m_index
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.7] << [B2.11]
  13: [B2.5] ^= ([B2.12])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_uint_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_uint_subref_r::operator uint_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_base *)
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
   6: sc_dt::uint_type val = this->m_obj_p->m_val;
   7: 64
   8: this
   9: [B1.8]->m_left
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 1
  12: [B1.10] + [B1.11]
  13: [B1.7] - ([B1.12])
  14: int uleft = 64 - (this->m_left + 1);
  15: val
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
  17: UINT_ZERO
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  19: ~[B1.18]
  20: uleft
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.19] >> [B1.21]
  23: [B1.16] & ([B1.22])
  24: this
  25: [B1.24]->m_right
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: ([B1.23]) >> [B1.26]
  28: return ([B1.27]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_uint_subref_r::and_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].and_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_uint_subref_r::or_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].or_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_uint_subref_r::xor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].xor_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_uint_subref_r::to_int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_int
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int sc_uint_subref_r::to_uint() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_uint
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline long sc_uint_subref_r::to_long() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_long
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned long sc_uint_subref_r::to_ulong() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_ulong
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::int64 sc_uint_subref_r::to_int64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_int64
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_uint_subref_r::to_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_uint64
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double sc_uint_subref_r::to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_double
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::string sc_uint_subref_r::to_string(sc_dt::sc_numrep numrep = SC_DEC) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_string
   8: numrep
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
  10: [B1.7]([B1.9]) (CXXRecordTypedCall, [B1.11], [B1.12], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const std::string)
  14: ~const std::string() (Temporary object destructor)
  15: return [B1.13];
  16: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::string sc_uint_subref_r::to_string(sc_dt::sc_numrep numrep, bool w_prefix) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_uint_base)
   4: sc_dt::sc_uint_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
   7: [B1.6].to_string
   8: numrep
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
  10: w_prefix
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B1.7]([B1.9], [B1.11]) (CXXRecordTypedCall, [B1.13], [B1.14], [B1.15])
  13: [B1.12] (BindTemporary)
  14: [B1.13]
  15: [B1.14] (CXXConstructExpr, [B1.17], const std::string)
  16: ~const std::string() (Temporary object destructor)
  17: return [B1.15];
  18: [B1.4].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool and_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].and_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nand_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nand_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool or_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].or_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nor_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xor_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xnor_reduce(const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xnor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_uint_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_subref &sc_uint_subref::operator=(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3].operator uint_type
   5: [B1.3]
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_subref &sc_uint_subref::operator=(const char *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_uint_subref_r *)
   3: [B1.2]->length
   4: [B1.3]()
   5: [B1.4] (CXXConstructExpr, [B1.6], class sc_dt::sc_uint_base)
   6: sc_dt::sc_uint_base aa(this->length());
   7: operator=
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_uint_subref &(*)(const class sc_dt::sc_uint_base &))
   9: this
  10: *[B1.9]
  11: operator=
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_uint_base &(*)(const char *))
  13: aa
  14: a
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, const char *)
  16: [B1.13] = [B1.15] (OperatorCall)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
  18: [B1.10] = [B1.17] (OperatorCall)
  19: return ([B1.18]);
  20: [B1.6].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_uint_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_base::operator[](int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_uint_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_uint_bitref *result_p = sc_uint_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_uint_bitref_r &sc_uint_base::operator[](int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_uint_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_uint_bitref *result_p = sc_uint_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref &sc_uint_base::bit(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_uint_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_uint_bitref *result_p = sc_uint_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_uint_bitref_r &sc_uint_base::bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_uint_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_uint_bitref *result_p = sc_uint_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_subref &sc_uint_base::operator()(int left, int right)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   3: [B1.2]->check_range
   4: left
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: right
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_uint_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_uint_subref *result_p = sc_uint_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  19: left
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: right
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_uint_subref_r &sc_uint_base::operator()(int left, int right) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: left
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_uint_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_uint_subref *result_p = sc_uint_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: left
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: right
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_subref &sc_uint_base::range(int left, int right)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
   3: [B1.2]->check_range
   4: left
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: right
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_uint_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_uint_subref *result_p = sc_uint_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base *)
  19: left
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: right
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_uint_subref_r &sc_uint_base::range(int left, int right) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: left
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_uint_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_uint_subref *result_p = sc_uint_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_uint_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: left
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: right
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_uint_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool and_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].and_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nand_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nand_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool or_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].or_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nor_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xor_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xnor_reduce(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xnor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_bitref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: m_index(/*implicit*/(int)0) (Member initializer)
   4: m_obj_p(/*implicit*/(sc_dt::sc_int_base *)0) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_int_base *obj_p, int index_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_int_base *)
   3: (sc_dt::sc_int_base *)[B1.2] (CStyleCastExpr, NoOp, class sc_dt::sc_int_base *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: index_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_index
  11: [B1.10] = [B1.8]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_bitref_r(const sc_dt::sc_int_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_index
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_index([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  12: m_obj_p([B1.11]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_int_bitref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: low_i
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B1.3] % [B1.4]
   6: [B1.1] << ([B1.5])
   7: int bit_mask = 1 << (low_i % 30);
   8: low_i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B1.9] / [B1.10]
  12: int word_i = low_i / 30;
  13: dst_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: word_i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14][[B1.16]]
  18: bit_mask
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: ~[B1.19]
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: [B1.17] &= [B1.21]
  23: false
  24: return [B1.23];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: non_zero
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: dst_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: bit_mask
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.5] &= [B2.9]
  11: false
  12: non_zero
  13: [B2.12] = [B2.11]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: dst_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: bit_mask
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: [B3.5] |= [B3.8]
  10: true
  11: non_zero
  12: [B3.11] = [B3.10]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: bool non_zero;
   2: 1
   3: low_i
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: 30
   6: [B4.4] % [B4.5]
   7: [B4.2] << ([B4.6])
   8: int bit_mask = 1 << (low_i % 30);
   9: low_i
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 30
  12: [B4.10] / [B4.11]
  13: int word_i = low_i / 30;
  14: this
  15: [B4.14]->operator uint64
  16: [B4.14]
  17: [B4.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B4.17]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool to_bool() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint64
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->to_bool
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_bitref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_int_bitref_r() (Base initializer), class sc_dt::sc_int_bitref_r)
   2: sc_int_bitref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_bitref(const sc_dt::sc_int_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_bitref_r)
   3: [B1.2] (CXXConstructExpr, sc_int_bitref_r([B1.2]) (Base initializer), class sc_dt::sc_int_bitref_r)
   4: sc_int_bitref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_subref_r()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: m_left([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_int_base *)
   7: m_obj_p([B1.6]) (Member initializer)
   8: 0
   9: m_right([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void initialize(const sc_dt::sc_int_base *obj_p, int left_i, int right_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_int_base *)
   3: (sc_dt::sc_int_base *)[B1.2] (CStyleCastExpr, NoOp, class sc_dt::sc_int_base *)
   4: this
   5: [B1.4]->m_obj_p
   6: [B1.5] = [B1.3]
   7: left_i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B1.9]->m_left
  11: [B1.10] = [B1.8]
  12: right_i
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B1.14]->m_right
  16: [B1.15] = [B1.13]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_subref_r(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_left
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_left([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_obj_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  12: m_obj_p([B1.11]) (Member initializer)
  13: a
  14: [B1.13].m_right
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_right([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_int_subref_r() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_left
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B1.4]->m_right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] - [B1.6]
   8: 1
   9: [B1.7] + [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: val
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   3: (sc_dt::uint64)[B1.2] (CStyleCastExpr, NoOp, sc_dt::uint64)
   4: return [B1.3];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: val
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   3: 1
   4: -[B2.3]
   5: [B2.4] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   6: (sc_dt::uint_type)[B2.5] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   7: len
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.6] << [B2.8]
  10: ~([B2.9])
  11: [B2.2] & [B2.10]
  12: (sc_dt::uint64)([B2.11]) (CStyleCastExpr, NoOp, sc_dt::uint64)
  13: return [B2.12];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->length
   3: [B3.2]()
   4: int len = this->length();
   5: this
   6: [B3.5]->operator uint_type
   7: [B3.5]
   8: sc_dt::uint64 val = this;
   9: len
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: 64
  12: [B3.10] < [B3.11]
   T: if [B3.12]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint_type value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_subref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_int_subref_r() (Base initializer), class sc_dt::sc_int_subref_r)
   2: sc_int_subref_r([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_subref(const sc_dt::sc_int_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_subref_r)
   3: [B1.2] (CXXConstructExpr, sc_int_subref_r([B1.2]) (Base initializer), class sc_dt::sc_int_subref_r)
   4: sc_int_subref_r([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3].operator uint_type
   5: [B1.3]
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(const sc_dt::sc_int_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_int_subref_r)
   5: [B1.4].operator uint_type
   6: [B1.4]
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(sc_dt::uint64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_subref &operator=(double a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, double)
   5: [B1.4] (ImplicitCastExpr, FloatingToIntegral, sc_dt::int_type)
   6: (sc_dt::int_type)[B1.5] (CStyleCastExpr, NoOp, sc_dt::int_type)
   7: [B1.2]([B1.6])
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void check_length() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_length
   3: [B1.2]()
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_len
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 64
   5: [B2.3] > [B2.4]
   T: if [B3.5] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: this
   2: [B3.1]->m_len
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 0
   5: [B3.3] <= [B3.4]
   T: [B3.5] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

void check_index(int i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->invalid_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B2.3]->m_len
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.2] >= [B2.5]
   T: if [B3.4] || [B2.6]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B3.2] < [B3.3]
   T: [B3.4] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (2): B1 B2

void check_range(int l, int r) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: this
   2: [B1.1]->invalid_range
   3: l
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: r
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   Preds (3): B2 B3 B4
   Succs (1): B0

 [B2]
   1: l
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, int)
   3: r
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2] < [B2.4]
   T: if [B4.4] || [B3.6] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: l
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B3.3]->m_len
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B3.2] >= [B3.5]
   T: [B4.4] || [B3.6] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B4]
   1: r
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B4.2] < [B4.3]
   T: [B4.4] || ...
   Preds (1): B5
   Succs (2): B1 B3

 [B0 (EXIT)]
   Preds (2): B1 B2

void extend_sign()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: this
   5: [B1.4]->m_ulen
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] << [B1.6]
   8: this
   9: [B1.8]->m_ulen
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.7] >> [B1.10]
  12: this
  13: [B1.12]->m_val
  14: [B1.13] = ([B1.11])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_int_base(int w = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   5: m_val([B1.4]) (Member initializer)
   6: w
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_len([B1.7]) (Member initializer)
   9: 64
  10: this
  11: [B1.10]->m_len
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B1.9] - [B1.12]
  14: m_ulen([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  17: [B1.16]->check_length
  18: [B1.17]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_base(sc_dt::int_type v, int w)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: m_val([B1.4]) (Member initializer)
   6: w
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: m_len([B1.7]) (Member initializer)
   9: 64
  10: this
  11: [B1.10]->m_len
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B1.9] - [B1.12]
  14: m_ulen([B1.13]) (Member initializer)
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  17: [B1.16]->check_length
  18: [B1.17]()
  19: this
  20: [B1.19]->extend_sign
  21: [B1.20]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_int_base(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
   3: [B1.2] (CXXConstructExpr, sc_value_base([B1.2]) (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: a
   6: [B1.5].m_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   8: m_val([B1.7]) (Member initializer)
   9: a
  10: [B1.9].m_len
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: m_len([B1.11]) (Member initializer)
  13: a
  14: [B1.13].m_ulen
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: m_ulen([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_int_base(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: a
   4: [B1.3].operator unsigned long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   8: m_val([B1.7]) (Member initializer)
   9: a
  10: [B1.9].length
  11: [B1.10]()
  12: m_len([B1.11]) (Member initializer)
  13: 64
  14: this
  15: [B1.14]->m_len
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13] - [B1.16]
  18: m_ulen([B1.17]) (Member initializer)
  19: this
  20: [B1.19]->extend_sign
  21: [B1.20]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_int_base() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] = [B1.2]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].operator unsigned long long
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   6: this
   7: [B1.6]->m_val
   8: [B1.7] = [B1.5]
   9: this
  10: [B1.9]->extend_sign
  11: [B1.10]()
  12: this
  13: *[B1.12]
  14: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned long)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, long)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, unsigned int)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(sc_dt::uint64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   3: [B1.2] (ImplicitCastExpr, IntegralCast, sc_dt::int_type)
   4: this
   5: [B1.4]->m_val
   6: [B1.5] = [B1.3]
   7: this
   8: [B1.7]->extend_sign
   9: [B1.8]()
  10: this
  11: *[B1.10]
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator=(double a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, double)
   3: [B1.2] (ImplicitCastExpr, FloatingToIntegral, sc_dt::int_type)
   4: (sc_dt::int_type)[B1.3] (CStyleCastExpr, NoOp, sc_dt::int_type)
   5: this
   6: [B1.5]->m_val
   7: [B1.6] = [B1.4]
   8: this
   9: [B1.8]->extend_sign
  10: [B1.9]()
  11: this
  12: *[B1.11]
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator+=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] += [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator-=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] -= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator*=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] *= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator/=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] /= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator%=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] %= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator&=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] &= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator|=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] |= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator^=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] ^= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator<<=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] <<= [B1.4]
   6: this
   7: [B1.6]->extend_sign
   8: [B1.7]()
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator>>=(sc_dt::int_type v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: v
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   5: [B1.2] >>= [B1.4]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator++()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: ++[B1.2]
   4: this
   5: [B1.4]->extend_sign
   6: [B1.5]()
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_int_base operator++(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_int_base)
   5: sc_dt::sc_int_base tmp(*this);
   6: this
   7: [B1.6]->m_val
   8: ++[B1.7]
   9: this
  10: [B1.9]->extend_sign
  11: [B1.10]()
  12: tmp
  13: [B1.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
  14: [B1.13] (CXXConstructExpr, [B1.15], const class sc_dt::sc_int_base)
  15: return [B1.14];
  16: [B1.5].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_int_base &operator--()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: --[B1.2]
   4: this
   5: [B1.4]->extend_sign
   6: [B1.5]()
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_int_base operator--(int)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_int_base)
   5: sc_dt::sc_int_base tmp(*this);
   6: this
   7: [B1.6]->m_val
   8: --[B1.7]
   9: this
  10: [B1.9]->extend_sign
  11: [B1.10]()
  12: tmp
  13: [B1.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
  14: [B1.13] (CXXConstructExpr, [B1.15], const class sc_dt::sc_int_base)
  15: return [B1.14];
  16: [B1.5].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] == [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] != [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] < [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator<=(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] <= [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] > [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator>=(const sc_dt::sc_int_base &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: b
   5: [B1.4].m_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   7: [B1.3] >= [B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool test(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralCast, unsigned long long)
   3: this
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, unsigned long long)
   7: UINT_ONE
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   9: i
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] << [B1.10]
  12: [B1.6] & ([B1.11])
  13: [B1.2] != ([B1.12])
  14: return ([B1.13]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: UINT_ONE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.4] << [B1.6]
   8: [B1.2] |= ([B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set(int i, bool v)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.2] ? [B2.8] : [B3.9]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_val
   3: UINT_ONE
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B2.4] << [B2.6]
   8: [B2.2] |= ([B2.7])
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_val
   3: UINT_ONE
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: i
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4] << [B3.6]
   8: ~([B3.7])
   9: [B3.2] &= [B3.8]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: v
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B4.2] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   5: (sc_dt::uint64)[B1.4] (CStyleCastExpr, NoOp, sc_dt::uint64)
   6: return [B1.5];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_val
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B2.3] (ImplicitCastExpr, IntegralCast, unsigned long long)
   5: 1
   6: -[B2.5]
   7: [B2.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   8: (sc_dt::uint_type)[B2.7] (CStyleCastExpr, NoOp, sc_dt::uint_type)
   9: this
  10: [B2.9]->m_len
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.8] << [B2.11]
  13: ~([B2.12])
  14: [B2.4] & [B2.13]
  15: (sc_dt::uint64)([B2.14]) (CStyleCastExpr, NoOp, sc_dt::uint64)
  16: return [B2.15];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_len
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 64
   5: [B3.3] < [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->and_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->or_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->xor_reduce
   3: [B1.2]()
   4: ![B1.3]
   5: return ([B1.4]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator int_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::int_type value() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator int_type
   3: [B1.1]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int to_int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int to_uint() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: (unsigned int)[B1.4] (CStyleCastExpr, NoOp, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long to_long() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, long)
   5: (long)[B1.4] (CStyleCastExpr, NoOp, long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned long to_ulong() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: (unsigned long)[B1.4] (CStyleCastExpr, NoOp, unsigned long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::int64 to_int64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: (sc_dt::int64)[B1.3] (CStyleCastExpr, NoOp, sc_dt::int64)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 to_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   5: (sc_dt::uint64)[B1.4] (CStyleCastExpr, NoOp, sc_dt::uint64)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

double to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralToFloating, double)
   5: (double)[B1.4] (CStyleCastExpr, NoOp, double)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long long_low() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned long long)
   5: UINT64_32ONES
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: [B1.4] & [B1.6]
   8: ([B1.7]) (ImplicitCastExpr, IntegralCast, long)
   9: (long)[B1.8] (CStyleCastExpr, NoOp, long)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long long_high() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_val
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   4: 32
   5: [B1.3] >> [B1.4]
   6: ([B1.5]) (ImplicitCastExpr, IntegralCast, unsigned long long)
   7: UINT64_32ONES
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   9: [B1.6] & [B1.8]
  10: ([B1.9]) (ImplicitCastExpr, IntegralCast, long)
  11: (long)[B1.10] (CStyleCastExpr, NoOp, long)
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const basic_string<char> &))
   3: os
   4: this
   5: [B1.4]->to_string
   6: sc_io_base
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, enum sc_dt::sc_numrep (*)(::std::ostream &, enum sc_dt::sc_numrep))
   8: os
   9: SC_DEC
  10: [B1.7]([B1.8], [B1.9])
  11: sc_io_show_base
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(::std::ostream &))
  13: os
  14: [B1.12]([B1.13])
  15: [B1.5]([B1.10], [B1.14]) (CXXRecordTypedCall, [B1.16], [B1.17])
  16: [B1.15] (BindTemporary)
  17: [B1.16]
  18: [B1.3] << [B1.17] (OperatorCall)
  19: ~const std::string() (Temporary object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_int_bitref_r::operator uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: [B1.9] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_int_bitref_r::operator!() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: ![B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_int_bitref_r::operator~() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   5: [B1.4]->test
   6: this
   7: [B1.6]->m_index
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.5]([B1.8])
  10: ![B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_int_bitref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator=(const sc_dt::sc_int_bitref_r &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10].operator unsigned long long
  12: [B1.10]
  13: [B1.12] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  14: [B1.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  15: (bool)[B1.14] (CStyleCastExpr, NoOp, _Bool)
  16: [B1.5]([B1.9], [B1.15])
  17: this
  18: [B1.17] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  19: [B1.18]->m_obj_p
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  21: [B1.20]->extend_sign
  22: [B1.21]()
  23: this
  24: *[B1.23]
  25: return [B1.24];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator=(const sc_dt::sc_int_bitref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_int_bitref_r)
  12: [B1.11].operator unsigned long long
  13: [B1.11]
  14: [B1.13] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  15: [B1.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  16: (bool)[B1.15] (CStyleCastExpr, NoOp, _Bool)
  17: [B1.5]([B1.9], [B1.16])
  18: this
  19: [B1.18] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  20: [B1.19]->m_obj_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  22: [B1.21]->extend_sign
  23: [B1.22]()
  24: this
  25: *[B1.24]
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator=(bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B1.2]->m_obj_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B1.4]->set
   6: this
   7: [B1.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   8: [B1.7]->m_index
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B1.5]([B1.9], [B1.11])
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  15: [B1.14]->m_obj_p
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  17: [B1.16]->extend_sign
  18: [B1.17]()
  19: this
  20: *[B1.19]
  21: return [B1.20];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator&=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B2.4]->set
   6: this
   7: [B2.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   8: [B2.7]->m_index
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B2.5]([B2.9], [B2.11])
  13: this
  14: [B2.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  15: [B2.14]->m_obj_p
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  17: [B2.16]->extend_sign
  18: [B2.17]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: ![B3.2]
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator|=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B2.4]->set
   6: this
   7: [B2.6] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   8: [B2.7]->m_index
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: b
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, _Bool)
  12: [B2.5]([B2.9], [B2.11])
  13: this
  14: [B2.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  15: [B2.14]->m_obj_p
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  17: [B2.16]->extend_sign
  18: [B2.17]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_bitref::operator^=(bool b)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
   3: [B2.2]->m_obj_p
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   5: [B2.4]->m_val
   6: UINT_ONE
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: this
   9: [B2.8] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  10: [B2.9]->m_index
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.7] << [B2.11]
  13: [B2.5] ^= ([B2.12])
  14: this
  15: [B2.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  16: [B2.15]->m_obj_p
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
  18: [B2.17]->extend_sign
  19: [B2.18]()
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: b
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B3.2]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_int_bitref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_int_subref_r::operator uint_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_obj_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_base *)
   4: [B1.3]->m_val
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::int_type)
   6: [B1.5] (ImplicitCastExpr, IntegralCast, sc_dt::uint_type)
   7: sc_dt::uint_type val = this->m_obj_p->m_val;
   8: 64
   9: this
  10: [B1.9]->m_left
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: 1
  13: [B1.11] + [B1.12]
  14: [B1.8] - ([B1.13])
  15: int uleft = 64 - (this->m_left + 1);
  16: uleft
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B1.18]->m_right
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.17] + [B1.20]
  22: int uright = uleft + this->m_right;
  23: val
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, sc_dt::uint_type)
  25: uleft
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B1.24] << [B1.26]
  28: uright
  29: [B1.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B1.27] >> [B1.29]
  31: return ([B1.30]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_int_subref_r::and_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_int_base)
   4: sc_dt::sc_int_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
   7: [B1.6].and_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_int_subref_r::or_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_int_base)
   4: sc_dt::sc_int_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
   7: [B1.6].or_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool sc_int_subref_r::xor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_dt::sc_int_base)
   4: sc_dt::sc_int_base a(*this);
   5: a
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
   7: [B1.6].xor_reduce
   8: [B1.7]()
   9: return [B1.8];
  10: [B1.4].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline int sc_int_subref_r::to_int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: static_cast<int>([B1.4]) (CXXStaticCastExpr, NoOp, int)
   6: int result = static_cast<int>(this);
   7: result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned int sc_int_subref_r::to_uint() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: static_cast<unsigned int>([B1.4]) (CXXStaticCastExpr, NoOp, unsigned int)
   6: unsigned int result = static_cast<unsigned int>(this);
   7: result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned int)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline long sc_int_subref_r::to_long() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralCast, long)
   5: static_cast<long>([B1.4]) (CXXStaticCastExpr, NoOp, long)
   6: long result = static_cast<long>(this);
   7: result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, long)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline unsigned long sc_int_subref_r::to_ulong() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: static_cast<unsigned long>([B1.4]) (CXXStaticCastExpr, NoOp, unsigned long)
   6: unsigned long result = static_cast<unsigned long>(this);
   7: result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, unsigned long)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::int64 sc_int_subref_r::to_int64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   5: sc_dt::int64 result = this;
   6: result
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::uint64 sc_int_subref_r::to_uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: sc_dt::uint64 result = this;
   5: result
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline double sc_int_subref_r::to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator uint_type
   3: [B1.1]
   4: [B1.3] (ImplicitCastExpr, IntegralToFloating, double)
   5: static_cast<double>([B1.4]) (CXXStaticCastExpr, NoOp, double)
   6: double result = static_cast<double>(this);
   7: result
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, double)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::string sc_int_subref_r::to_string(sc_dt::sc_numrep numrep = SC_DEC) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_uint_base)
   5: sc_dt::sc_uint_base a(this->length());
   6: operator=
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_uint_base &(*)(sc_dt::uint_type))
   8: a
   9: this
  10: [B1.9]->operator uint_type
  11: [B1.9]
  12: [B1.8] = [B1.11] (OperatorCall)
  13: a
  14: [B1.13] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
  15: [B1.14].to_string
  16: numrep
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
  18: [B1.15]([B1.17]) (CXXRecordTypedCall, [B1.19], [B1.20], [B1.21])
  19: [B1.18] (BindTemporary)
  20: [B1.19]
  21: [B1.20] (CXXConstructExpr, [B1.23], const std::string)
  22: ~const std::string() (Temporary object destructor)
  23: return [B1.21];
  24: [B1.5].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const std::string sc_int_subref_r::to_string(sc_dt::sc_numrep numrep, bool w_prefix) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->length
   3: [B1.2]()
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_uint_base)
   5: sc_dt::sc_uint_base a(this->length());
   6: operator=
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_uint_base &(*)(sc_dt::uint_type))
   8: a
   9: this
  10: [B1.9]->operator uint_type
  11: [B1.9]
  12: [B1.8] = [B1.11] (OperatorCall)
  13: a
  14: [B1.13] (ImplicitCastExpr, NoOp, const class sc_dt::sc_uint_base)
  15: [B1.14].to_string
  16: numrep
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
  18: w_prefix
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, _Bool)
  20: [B1.15]([B1.17], [B1.19]) (CXXRecordTypedCall, [B1.21], [B1.22], [B1.23])
  21: [B1.20] (BindTemporary)
  22: [B1.21]
  23: [B1.22] (CXXConstructExpr, [B1.25], const std::string)
  24: ~const std::string() (Temporary object destructor)
  25: return [B1.23];
  26: [B1.5].~sc_dt::sc_uint_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool and_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].and_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nand_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nand_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool or_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].or_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nor_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xor_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xnor_reduce(const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xnor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_int_subref_r &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_subref &sc_int_subref::operator=(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->operator=
   3: a
   4: [B1.3].operator int_type
   5: [B1.3]
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_subref &sc_int_subref::operator=(const char *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_dt::sc_int_subref_r *)
   3: [B1.2]->length
   4: [B1.3]()
   5: [B1.4] (CXXConstructExpr, [B1.6], class sc_dt::sc_int_base)
   6: sc_dt::sc_int_base aa(this->length());
   7: operator=
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_int_subref &(*)(const class sc_dt::sc_int_base &))
   9: this
  10: *[B1.9]
  11: operator=
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_int_base &(*)(const char *))
  13: aa
  14: a
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, const char *)
  16: [B1.13] = [B1.15] (OperatorCall)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base)
  18: [B1.10] = [B1.17] (OperatorCall)
  19: return ([B1.18]);
  20: [B1.6].~sc_dt::sc_int_base() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_int_subref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_base::operator[](int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_int_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_int_bitref *result_p = sc_int_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_int_bitref_r &sc_int_base::operator[](int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_int_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_int_bitref *result_p = sc_int_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref &sc_int_base::bit(int i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   3: [B1.2]->check_index
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: sc_int_bitref::m_pool
   8: [B1.7].allocate
   9: [B1.8]()
  10: sc_dt::sc_int_bitref *result_p = sc_int_bitref::m_pool.allocate();
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  13: [B1.12] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  14: [B1.13]->initialize
  15: this
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  17: i
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.14]([B1.16], [B1.18])
  20: result_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  22: *[B1.21]
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_int_bitref_r &sc_int_base::bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_index
   3: i
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   6: sc_int_bitref::m_pool
   7: [B1.6].allocate
   8: [B1.7]()
   9: sc_dt::sc_int_bitref *result_p = sc_int_bitref::m_pool.allocate();
  10: result_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_bitref_r *)
  13: [B1.12]->initialize
  14: this
  15: i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.13]([B1.14], [B1.16])
  18: result_p
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_bitref)
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_bitref_r)
  23: return [B1.22];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_subref &sc_int_base::operator()(int left, int right)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   3: [B1.2]->check_range
   4: left
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: right
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_int_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_int_subref *result_p = sc_int_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  19: left
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: right
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_int_subref_r &sc_int_base::operator()(int left, int right) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: left
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_int_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_int_subref *result_p = sc_int_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: left
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: right
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_subref &sc_int_base::range(int left, int right)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
   3: [B1.2]->check_range
   4: left
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: right
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.3]([B1.5], [B1.7])
   9: sc_int_subref::m_pool
  10: [B1.9].allocate
  11: [B1.10]()
  12: sc_dt::sc_int_subref *result_p = sc_int_subref::m_pool.allocate();
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  15: [B1.14] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_subref_r *)
  16: [B1.15]->initialize
  17: this
  18: [B1.17] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_base *)
  19: left
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: right
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B1.16]([B1.18], [B1.20], [B1.22])
  24: result_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  26: *[B1.25]
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_int_subref_r &sc_int_base::range(int left, int right) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->check_range
   3: left
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: right
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.2]([B1.4], [B1.6])
   8: sc_int_subref::m_pool
   9: [B1.8].allocate
  10: [B1.9]()
  11: sc_dt::sc_int_subref *result_p = sc_int_subref::m_pool.allocate();
  12: result_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_dt::sc_int_subref_r *)
  15: [B1.14]->initialize
  16: this
  17: left
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: right
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.15]([B1.16], [B1.18], [B1.20])
  22: result_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_int_subref)
  26: [B1.25] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_int_subref_r)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool and_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].and_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nand_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nand_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool or_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].or_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nor_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xor_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xnor_reduce(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xnor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].print
   3: os
   4: [B1.2]([B1.3])
   5: os
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].scan
   3: is
   4: [B1.2]([B1.3])
   5: is
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bv_base(int length_ = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_proxy() (Base initializer), sc_proxy<class sc_dt::sc_bv_base>)
   2: sc_proxy([B1.1]) (Base initializer)
   3: 0
   4: m_len([B1.3]) (Member initializer)
   5: 0
   6: m_size([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
   9: m_data([B1.8]) (Member initializer)
  10: this
  11: [B1.10]->init
  12: length_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: 
  15: [B1.11]([B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_bv_base(bool a, int length_ = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_proxy() (Base initializer), sc_proxy<class sc_dt::sc_bv_base>)
   2: sc_proxy([B1.1]) (Base initializer)
   3: 0
   4: m_len([B1.3]) (Member initializer)
   5: 0
   6: m_size([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
   9: m_data([B1.8]) (Member initializer)
  10: this
  11: [B1.10]->init
  12: length_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: a
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, _Bool)
  16: [B1.11]([B1.13], [B1.15])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_bv_base() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: delete [] [B1.3]
   5: ~sc_proxy() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_bv_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_p_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_bv_base> &, const sc_proxy<class sc_dt::sc_bv_base> &))
   3: this
   4: *[B1.3]
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_proxy<class sc_dt::sc_bv_base>)
   6: a
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const sc_proxy<class sc_dt::sc_bv_base>)
   8: [B1.2]([B1.5], [B1.7])
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const bool *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_logic *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_logic *)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned long)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, long)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(sc_dt::uint64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &operator=(sc_dt::int64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_bv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_size
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_digit get_word(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set_word(int i, sc_dt::sc_digit w)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: w
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: this
   4: [B1.3]->m_data
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   6: i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5][[B1.7]]
   9: [B1.8] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_digit get_cword(int) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SC_DIGIT_ZERO
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool is_01() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: true
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_bv_base::value_type sc_bv_base::get_bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: SC_DIGIT_SIZE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int wi = i / SC_DIGIT_SIZE;
   7: i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: SC_DIGIT_SIZE
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int bi = i % SC_DIGIT_SIZE;
  13: this
  14: [B1.13]->m_data
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  16: wi
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B1.15][[B1.17]]
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: bi
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.19] >> [B1.21]
  23: SC_DIGIT_ONE
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  25: ([B1.22]) & [B1.24]
  26: [B1.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  27: sc_dt::sc_bv_base::value_type([B1.26]) (CXXFunctionalCastExpr, NoOp, sc_dt::sc_bv_base::value_type)
  28: return [B1.27];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_bv_base::set_bit(int i, sc_dt::sc_bv_base::value_type value)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: SC_DIGIT_SIZE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int wi = i / SC_DIGIT_SIZE;
   7: i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: SC_DIGIT_SIZE
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int bi = i % SC_DIGIT_SIZE;
  13: SC_DIGIT_ONE
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: bi
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14] << [B1.16]
  18: sc_dt::sc_digit mask = SC_DIGIT_ONE << bi;
  19: this
  20: [B1.19]->m_data
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  22: wi
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B1.21][[B1.23]]
  25: mask
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  27: [B1.24] |= [B1.26]
  28: this
  29: [B1.28]->m_data
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  31: wi
  32: [B1.31] (ImplicitCastExpr, LValueToRValue, int)
  33: [B1.30][[B1.32]]
  34: value
  35: [B1.34] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_bv_base::value_type)
  36: [B1.35] (ImplicitCastExpr, IntegralCast, int)
  37: bi
  38: [B1.37] (ImplicitCastExpr, LValueToRValue, int)
  39: [B1.36] << [B1.38]
  40: [B1.39] (ImplicitCastExpr, IntegralCast, unsigned int)
  41: mask
  42: [B1.41] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  43: ~[B1.42]
  44: [B1.40] | [B1.43]
  45: [B1.33] &= [B1.44]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_bv_base::set_cword(int, sc_dt::sc_digit w)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: ::sc_core::sc_report_handler::report
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(enum sc_core::sc_severity, const char *, const char *, const char *, int))
   3: ::sc_core::SC_WARNING
   4: sc_core::SC_ID_SC_BV_CANNOT_CONTAIN_X_AND_Z_
   5: [B1.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, const char *)
   8: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/bit/sc_bv_base.h"
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: 285
  11: [B1.2]([B1.3], [B1.5], [B1.7], [B1.9], [B1.10])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: w
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: [B2.2] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.3]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void sc_bv_base::clean_tail()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: wi
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3][[B1.5]]
   7: SC_DIGIT_ZERO
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   9: ~[B1.8]
  10: SC_DIGIT_SIZE
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: bi
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B1.11] - [B1.13]
  15: [B1.9] >> ([B1.14])
  16: [B1.6] &= [B1.15]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_size
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 1
   5: [B2.3] - [B2.4]
   6: int wi = this->m_size - 1;
   7: this
   8: [B2.7]->m_len
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: SC_DIGIT_SIZE
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.9] % [B2.11]
  13: int bi = this->m_len % SC_DIGIT_SIZE;
  14: bi
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: 0
  17: [B2.15] != [B2.16]
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

explicit sc_lv_base(int length_ = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_proxy() (Base initializer), sc_proxy<class sc_dt::sc_lv_base>)
   2: sc_proxy([B1.1]) (Base initializer)
   3: 0
   4: m_len([B1.3]) (Member initializer)
   5: 0
   6: m_size([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
   9: m_data([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
  12: m_ctrl([B1.11]) (Member initializer)
  13: this
  14: [B1.13]->init
  15: length_
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: 
  18: [B1.14]([B1.16])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_lv_base(const sc_dt::sc_logic &a, int length_ = sc_dt::sc_length_param().len())
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_proxy() (Base initializer), sc_proxy<class sc_dt::sc_lv_base>)
   2: sc_proxy([B1.1]) (Base initializer)
   3: 0
   4: m_len([B1.3]) (Member initializer)
   5: 0
   6: m_size([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
   9: m_data([B1.8]) (Member initializer)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, sc_dt::sc_digit *)
  12: m_ctrl([B1.11]) (Member initializer)
  13: this
  14: [B1.13]->init
  15: length_
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: a
  18: [B1.14]([B1.16], [B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_lv_base() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: delete [] [B1.3]
   5: ~sc_proxy() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_lv_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_p_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_lv_base> &, const sc_proxy<class sc_dt::sc_lv_base> &))
   3: this
   4: *[B1.3]
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_proxy<class sc_dt::sc_lv_base>)
   6: a
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, const sc_proxy<class sc_dt::sc_lv_base>)
   8: [B1.2]([B1.5], [B1.7])
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const bool *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_logic *a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_logic *)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(unsigned long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned long)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(long a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, long)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, unsigned int)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(sc_dt::uint64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &operator=(sc_dt::int64 a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_dt::sc_lv_base::base_type *)
   3: [B1.2]->base_type::assign_
   4: a
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_size
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_digit get_word(int wi) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: wi
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set_word(int wi, sc_dt::sc_digit w)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.6]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: w
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   5: this
   6: [B1.5]->m_data
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   8: wi
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B1.7][[B1.9]]
  11: [B1.10] = [B1.4]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "wi < m_size"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/bit/sc_lv_base.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 220
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: wi
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_size
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] < [B5.5]
   T: ([B5.6]) ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

sc_dt::sc_digit get_cword(int wi) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_ctrl
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: wi
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3][[B1.5]]
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void set_cword(int wi, sc_dt::sc_digit w)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.6]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: w
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   5: this
   6: [B1.5]->m_ctrl
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   8: wi
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B1.7][[B1.9]]
  11: [B1.10] = [B1.4]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "wi < m_size"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/datatypes/bit/sc_lv_base.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 227
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: wi
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B5.3]->m_size
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.2] < [B5.5]
   T: ([B5.6]) ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

inline sc_lv_base::value_type sc_lv_base::get_bit(int i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: SC_DIGIT_SIZE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int wi = i / SC_DIGIT_SIZE;
   7: i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: SC_DIGIT_SIZE
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int bi = i % SC_DIGIT_SIZE;
  13: this
  14: [B1.13]->m_data
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  16: wi
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B1.15][[B1.17]]
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: bi
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.19] >> [B1.21]
  23: SC_DIGIT_ONE
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  25: ([B1.22]) & [B1.24]
  26: this
  27: [B1.26]->m_ctrl
  28: [B1.27] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  29: wi
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B1.28][[B1.30]]
  32: [B1.31] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  33: bi
  34: [B1.33] (ImplicitCastExpr, LValueToRValue, int)
  35: [B1.32] >> [B1.34]
  36: 1
  37: ([B1.35]) << [B1.36]
  38: SC_DIGIT_TWO
  39: [B1.38] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  40: ([B1.37]) & [B1.39]
  41: ([B1.25]) | ([B1.40])
  42: sc_dt::sc_lv_base::value_type([B1.41]) (CXXFunctionalCastExpr, IntegralCast, sc_dt::sc_lv_base::value_type)
  43: return [B1.42];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_lv_base::set_bit(int i, sc_dt::sc_lv_base::value_type value)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: i
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: SC_DIGIT_SIZE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int wi = i / SC_DIGIT_SIZE;
   7: i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: SC_DIGIT_SIZE
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int bi = i % SC_DIGIT_SIZE;
  13: SC_DIGIT_ONE
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: bi
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14] << [B1.16]
  18: sc_dt::sc_digit mask = SC_DIGIT_ONE << bi;
  19: this
  20: [B1.19]->m_data
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  22: wi
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B1.21][[B1.23]]
  25: mask
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  27: [B1.24] |= [B1.26]
  28: this
  29: [B1.28]->m_ctrl
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  31: wi
  32: [B1.31] (ImplicitCastExpr, LValueToRValue, int)
  33: [B1.30][[B1.32]]
  34: mask
  35: [B1.34] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  36: [B1.33] |= [B1.35]
  37: this
  38: [B1.37]->m_data
  39: [B1.38] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  40: wi
  41: [B1.40] (ImplicitCastExpr, LValueToRValue, int)
  42: [B1.39][[B1.41]]
  43: value
  44: [B1.43] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_lv_base::value_type)
  45: [B1.44] (ImplicitCastExpr, IntegralCast, int)
  46: bi
  47: [B1.46] (ImplicitCastExpr, LValueToRValue, int)
  48: [B1.45] << [B1.47]
  49: [B1.48] (ImplicitCastExpr, IntegralCast, unsigned int)
  50: mask
  51: [B1.50] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  52: ~[B1.51]
  53: [B1.49] | [B1.52]
  54: [B1.42] &= [B1.53]
  55: this
  56: [B1.55]->m_ctrl
  57: [B1.56] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  58: wi
  59: [B1.58] (ImplicitCastExpr, LValueToRValue, int)
  60: [B1.57][[B1.59]]
  61: value
  62: [B1.61] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_lv_base::value_type)
  63: [B1.62] (ImplicitCastExpr, IntegralCast, int)
  64: 1
  65: [B1.63] >> [B1.64]
  66: bi
  67: [B1.66] (ImplicitCastExpr, LValueToRValue, int)
  68: [B1.65] << [B1.67]
  69: [B1.68] (ImplicitCastExpr, IntegralCast, unsigned int)
  70: mask
  71: [B1.70] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  72: ~[B1.71]
  73: [B1.69] | [B1.72]
  74: [B1.60] &= [B1.73]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline void sc_lv_base::clean_tail()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->m_data
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   4: wi
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3][[B1.5]]
   7: mask
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   9: [B1.6] &= [B1.8]
  10: this
  11: [B1.10]->m_ctrl
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  13: wi
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B1.12][[B1.14]]
  16: mask
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  18: [B1.15] &= [B1.17]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_size
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 1
   5: [B2.3] - [B2.4]
   6: int wi = this->m_size - 1;
   7: this
   8: [B2.7]->m_len
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: SC_DIGIT_SIZE
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.9] % [B2.11]
  13: int bi = this->m_len % SC_DIGIT_SIZE;
  14: SC_DIGIT_ZERO
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  16: ~[B2.15]
  17: SC_DIGIT_SIZE
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: bi
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.18] - [B2.20]
  22: [B2.16] >> ([B2.21])
  23: sc_dt::sc_digit mask = ~SC_DIGIT_ZERO >> (SC_DIGIT_SIZE - bi);
  24: mask
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline void initialize(sc_dt::sc_value_base &left, sc_dt::sc_value_base &right)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.38] || [B4.2]) ? [B2.1] : [B3.1]
   2: this
   3: [B1.2]->m_flags
   4: [B1.3] = [B1.1]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: cf_xz_present
   Preds (2): B4 B5
   Succs (1): B1

 [B3]
   1: cf_none
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: right_xz
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: ([B5.38] || [B4.2]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B5]
   1: bool left_xz;
   2: bool right_xz;
   3: left
   4: &[B5.3]
   5: (sc_dt::sc_value_base *)[B5.4] (CStyleCastExpr, NoOp, class sc_dt::sc_value_base *)
   6: this
   7: [B5.6]->m_left_p
   8: [B5.7] = [B5.5]
   9: right
  10: &[B5.9]
  11: (sc_dt::sc_value_base *)[B5.10] (CStyleCastExpr, NoOp, class sc_dt::sc_value_base *)
  12: this
  13: [B5.12]->m_right_p
  14: [B5.13] = [B5.11]
  15: right
  16: [B5.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base)
  17: [B5.16].concat_length
  18: right_xz
  19: &[B5.18]
  20: [B5.17]([B5.19])
  21: this
  22: [B5.21]->m_len_r
  23: [B5.22] = [B5.20]
  24: left
  25: [B5.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base)
  26: [B5.25].concat_length
  27: left_xz
  28: &[B5.27]
  29: [B5.26]([B5.28])
  30: this
  31: [B5.30]->m_len_r
  32: [B5.31] (ImplicitCastExpr, LValueToRValue, int)
  33: [B5.29] + [B5.32]
  34: this
  35: [B5.34]->m_len
  36: [B5.35] = [B5.33]
  37: left_xz
  38: [B5.37] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B5.38] || ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (1): B1

inline void initialize(const sc_dt::sc_value_base &left, const sc_dt::sc_value_base &right)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: ([B5.36] || [B4.2]) ? [B2.1] : [B3.1]
   2: this
   3: [B1.2]->m_flags
   4: [B1.3] = [B1.1]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: cf_xz_present
   Preds (2): B4 B5
   Succs (1): B1

 [B3]
   1: cf_none
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: right_xz
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: ([B5.36] || [B4.2]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B5]
   1: bool left_xz;
   2: bool right_xz;
   3: left
   4: &[B5.3]
   5: (sc_dt::sc_value_base *)[B5.4] (CStyleCastExpr, NoOp, class sc_dt::sc_value_base *)
   6: this
   7: [B5.6]->m_left_p
   8: [B5.7] = [B5.5]
   9: right
  10: &[B5.9]
  11: (sc_dt::sc_value_base *)[B5.10] (CStyleCastExpr, NoOp, class sc_dt::sc_value_base *)
  12: this
  13: [B5.12]->m_right_p
  14: [B5.13] = [B5.11]
  15: right
  16: [B5.15].concat_length
  17: right_xz
  18: &[B5.17]
  19: [B5.16]([B5.18])
  20: this
  21: [B5.20]->m_len_r
  22: [B5.21] = [B5.19]
  23: left
  24: [B5.23].concat_length
  25: left_xz
  26: &[B5.25]
  27: [B5.24]([B5.26])
  28: this
  29: [B5.28]->m_len_r
  30: [B5.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B5.27] + [B5.30]
  32: this
  33: [B5.32]->m_len
  34: [B5.33] = [B5.31]
  35: left_xz
  36: [B5.35] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B5.36] || ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_concatref() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int length() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (2): B2 B6
   Succs (1): B0

 [B2]
   1: [B5.8] ? [B3.1] : [B4.1]
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (2): B3 B4
   Succs (1): B1

 [B3]
   1: true
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: false
   Preds (1): B5
   Succs (1): B2

 [B5]
   1: this
   2: [B5.1]->m_flags
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_concatref::concat_flags)
   4: [B5.3] (ImplicitCastExpr, IntegralCast, int)
   5: cf_xz_present
   6: [B5.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B5.4] & [B5.6]
   8: [B5.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: [B5.8] ? ... : ...
   Preds (1): B6
   Succs (2): B3 B4

 [B6]
   1: xz_present_p
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B6.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B6.3]
   Preds (1): B7
   Succs (2): B5 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void concat_clear_data(bool to_ones)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_left_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_clear_data
   5: to_ones
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.4]([B1.6])
   8: this
   9: [B1.8]->m_right_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  11: [B1.10]->concat_clear_data
  12: to_ones
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, _Bool)
  14: [B1.11]([B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.28] || [B2.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: lnz
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_right_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B3.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
   5: [B3.4]->concat_get_ctrl
   6: dst_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   8: low_i
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B3.5]([B3.7], [B3.9])
  11: bool rnz = this->m_right_p->concat_get_ctrl(dst_p, low_i);
  12: this
  13: [B3.12]->m_left_p
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  15: [B3.14] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  16: [B3.15]->concat_get_ctrl
  17: dst_p
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  19: low_i
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: this
  22: [B3.21]->m_len_r
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B3.20] + [B3.23]
  25: [B3.16]([B3.18], [B3.24])
  26: bool lnz = this->m_left_p->concat_get_ctrl(dst_p, low_i + this->m_len_r);
  27: rnz
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.28] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.28] || [B2.2]
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: lnz
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_right_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B3.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
   5: [B3.4]->concat_get_data
   6: dst_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   8: low_i
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B3.5]([B3.7], [B3.9])
  11: bool rnz = this->m_right_p->concat_get_data(dst_p, low_i);
  12: this
  13: [B3.12]->m_left_p
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  15: [B3.14] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  16: [B3.15]->concat_get_data
  17: dst_p
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  19: low_i
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: this
  22: [B3.21]->m_len_r
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B3.20] + [B3.23]
  25: [B3.16]([B3.18], [B3.24])
  26: bool lnz = this->m_left_p->concat_get_data(dst_p, low_i + this->m_len_r);
  27: rnz
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.28] || ...
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_left_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
   5: [B1.4]->concat_get_uint64
   6: [B1.5]()
   7: this
   8: [B1.7]->m_len_r
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B1.6] << [B1.9]
  11: this
  12: [B1.11]->m_right_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  15: [B1.14]->concat_get_uint64
  16: [B1.15]()
  17: ([B1.10]) | [B1.16]
  18: return [B1.17];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1]->m_right_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B2.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
   5: [B2.4]->concat_get_uint64
   6: [B2.5]()
   7: return [B2.6];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_len_r
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 64
   5: [B3.3] >= [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void concat_set(sc_dt::int64 src, int low_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: src
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   7: low_i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.4]([B1.6], [B1.8])
  10: this
  11: [B1.10]->m_left_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  13: [B1.12]->concat_set
  14: src
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  16: low_i
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B1.18]->m_len_r
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.17] + [B1.20]
  22: [B1.13]([B1.15], [B1.21])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void concat_set(const sc_dt::sc_signed &src, int low_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: src
   6: low_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.4]([B1.5], [B1.7])
   9: this
  10: [B1.9]->m_left_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  12: [B1.11]->concat_set
  13: src
  14: low_i
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B1.16]->m_len_r
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.15] + [B1.18]
  20: [B1.12]([B1.13], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void concat_set(const sc_dt::sc_unsigned &src, int low_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: src
   6: low_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.4]([B1.5], [B1.7])
   9: this
  10: [B1.9]->m_left_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  12: [B1.11]->concat_set
  13: src
  14: low_i
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B1.16]->m_len_r
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B1.15] + [B1.18]
  20: [B1.12]([B1.13], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void concat_set(sc_dt::uint64 src, int low_i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: src
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: low_i
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B1.4]([B1.6], [B1.8])
  10: this
  11: [B1.10]->m_left_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  13: [B1.12]->concat_set
  14: src
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  16: low_i
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B1.18]->m_len_r
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B1.17] + [B1.20]
  22: [B1.13]([B1.15], [B1.21])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::uint64 to_uint64() const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: result
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   2: ~[B2.1]
   3: [B2.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   4: (sc_dt::uint64)[B2.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: mask
   6: [B2.5] = [B2.4]
   7: result
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   9: mask
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  11: this
  12: [B2.11]->m_len
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.10] << [B2.13]
  15: ~([B2.14])
  16: [B2.8] & [B2.15]
  17: result
  18: [B2.17] = [B2.16]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->m_len
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 64
   5: [B3.3] < [B3.4]
   T: if [B3.5]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: 0
   2: ~[B4.1]
   3: [B4.2] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   4: (sc_dt::uint64)[B4.3] (CStyleCastExpr, NoOp, sc_dt::uint64)
   5: mask
   6: [B4.5] = [B4.4]
   7: this
   8: [B4.7]->m_left_p
   9: [B4.8] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  10: [B4.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  11: [B4.10]->concat_get_uint64
  12: [B4.11]()
  13: this
  14: [B4.13]->m_len_r
  15: [B4.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B4.12] << [B4.15]
  17: result
  18: [B4.17] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  19: mask
  20: [B4.19] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  21: this
  22: [B4.21]->m_len_r
  23: [B4.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B4.20] << [B4.23]
  25: ~([B4.24])
  26: [B4.18] & [B4.25]
  27: ([B4.16]) | ([B4.26])
  28: result
  29: [B4.28] = [B4.27]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: sc_dt::uint64 mask;
   2: sc_dt::uint64 result;
   3: this
   4: [B5.3]->m_right_p
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   6: [B5.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
   7: [B5.6]->concat_get_uint64
   8: [B5.7]()
   9: result
  10: [B5.9] = [B5.8]
  11: this
  12: [B5.11]->m_len_r
  13: [B5.12] (ImplicitCastExpr, LValueToRValue, int)
  14: 64
  15: [B5.13] < [B5.14]
   T: if [B5.15]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_unsigned &value() const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: result_p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   3: *[B1.2]
   4: [B1.3] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   2: result_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   4: [B2.3]->sgn
   5: [B2.4] = [B2.1]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: 1
   2: result_p
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   4: [B3.3]->sgn
   5: [B3.4] = [B3.1]
   Preds (2): B4 B5
   Succs (1): B1

 [B4]
   1: right_non_zero
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B5.91] || [B4.2]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: bool left_non_zero;
   2: sc_unsigned::m_pool
   3: [B5.2].allocate
   4: [B5.3]()
   5: sc_dt::sc_unsigned *result_p = sc_unsigned::m_pool.allocate();
   6: bool right_non_zero;
   7: result_p
   8: [B5.7] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   9: [B5.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned *)
  10: [B5.9]->num_bits
  11: this
  12: [B5.11]->m_len
  13: [B5.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B5.10]([B5.13])
  15: result_p
  16: [B5.15] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  17: [B5.16]->nbits
  18: [B5.17] = [B5.14]
  19: result_p
  20: [B5.19] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  21: [B5.20]->nbits
  22: ([B5.21]) (ImplicitCastExpr, LValueToRValue, int)
  23: 1
  24: [B5.22] - [B5.23]
  25: 30
  26: ([B5.24]) / ([B5.25])
  27: 1
  28: [B5.26] + [B5.27]
  29: result_p
  30: [B5.29] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  31: [B5.30]->ndigits
  32: [B5.31] = ([B5.28])
  33: sc_core::sc_temp_heap
  34: [B5.33].allocate
  35: sizeof(sc_dt::sc_digit)
  36: result_p
  37: [B5.36] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  38: [B5.37]->ndigits
  39: [B5.38] (ImplicitCastExpr, LValueToRValue, int)
  40: [B5.39] (ImplicitCastExpr, IntegralCast, unsigned long)
  41: [B5.35] * [B5.40]
  42: [B5.34]([B5.41])
  43: (sc_dt::sc_digit *)[B5.42] (CStyleCastExpr, BitCast, sc_dt::sc_digit *)
  44: result_p
  45: [B5.44] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  46: [B5.45]->digit
  47: [B5.46] = [B5.43]
  48: 0
  49: [B5.48] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  50: result_p
  51: [B5.50] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  52: [B5.51]->digit
  53: [B5.52] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  54: result_p
  55: [B5.54] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  56: [B5.55]->ndigits
  57: [B5.56] (ImplicitCastExpr, LValueToRValue, int)
  58: 1
  59: [B5.57] - [B5.58]
  60: [B5.53][[B5.59]]
  61: [B5.60] = [B5.49]
  62: this
  63: [B5.62]->m_right_p
  64: [B5.63] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  65: [B5.64] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  66: [B5.65]->concat_get_data
  67: result_p
  68: [B5.67] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  69: [B5.68]->digit
  70: [B5.69] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  71: 0
  72: [B5.66]([B5.70], [B5.71])
  73: right_non_zero
  74: [B5.73] = [B5.72]
  75: this
  76: [B5.75]->m_left_p
  77: [B5.76] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  78: [B5.77] (ImplicitCastExpr, NoOp, const class sc_dt::sc_value_base *)
  79: [B5.78]->concat_get_data
  80: result_p
  81: [B5.80] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  82: [B5.81]->digit
  83: [B5.82] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  84: this
  85: [B5.84]->m_len_r
  86: [B5.85] (ImplicitCastExpr, LValueToRValue, int)
  87: [B5.79]([B5.83], [B5.86])
  88: left_non_zero
  89: [B5.88] = [B5.87]
  90: left_non_zero
  91: [B5.90] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B5.91] || ...
   Preds (1): B6
   Succs (2): B3 B4

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::int64 to_int64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_uint64
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   5: (sc_dt::int64)[B1.4] (CStyleCastExpr, NoOp, sc_dt::int64)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int to_int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_int64
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: (int)[B1.4] (CStyleCastExpr, NoOp, int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned int to_uint() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_uint64
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned int)
   5: (unsigned int)[B1.4] (CStyleCastExpr, NoOp, unsigned int)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

long to_long() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_int64
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, long)
   5: (long)[B1.4] (CStyleCastExpr, NoOp, long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

unsigned long to_ulong() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_uint64
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, unsigned long)
   5: (unsigned long)[B1.4] (CStyleCastExpr, NoOp, unsigned long)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

double to_double() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].to_double
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void to_sc_signed(sc_dt::sc_signed &target) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_signed &(*)(const class sc_dt::sc_unsigned &))
   3: target
   4: this
   5: [B1.4]->value
   6: [B1.5]()
   7: [B1.3] = [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void to_sc_unsigned(sc_dt::sc_unsigned &target) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const class sc_dt::sc_unsigned &))
   3: target
   4: this
   5: [B1.4]->value
   6: [B1.5]()
   7: [B1.3] = [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator uint64() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->to_uint64
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const sc_unsigned &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator+() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_unsigned)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_signed operator-() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &))
   3: this
   4: [B1.3]->value
   5: [B1.4]()
   6: - [B1.5] (OperatorCall) (CXXRecordTypedCall, [B1.7], [B1.9], [B1.10])
   7: [B1.6] (BindTemporary)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.12], class sc_dt::sc_signed)
  11: ~sc_dt::sc_signed() (Temporary object destructor)
  12: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_unsigned operator~() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator~
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &))
   3: this
   4: [B1.3]->value
   5: [B1.4]()
   6: ~ [B1.5] (OperatorCall) (CXXRecordTypedCall, [B1.7], [B1.9], [B1.10])
   7: [B1.6] (BindTemporary)
   8: [B1.7] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.12], class sc_dt::sc_unsigned)
  11: ~sc_dt::sc_unsigned() (Temporary object destructor)
  12: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const std::string to_string(sc_dt::sc_numrep numrep = SC_DEC) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].to_string
   5: numrep
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
   7: [B1.4]([B1.6]) (CXXRecordTypedCall, [B1.8], [B1.9], [B1.10])
   8: [B1.7] (BindTemporary)
   9: [B1.8]
  10: [B1.9] (CXXConstructExpr, [B1.12], const std::string)
  11: ~const std::string() (Temporary object destructor)
  12: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const std::string to_string(sc_dt::sc_numrep numrep, bool w_prefix) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].to_string
   5: numrep
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_dt::sc_numrep)
   7: w_prefix
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, _Bool)
   9: [B1.4]([B1.6], [B1.8]) (CXXRecordTypedCall, [B1.10], [B1.11], [B1.12])
  10: [B1.9] (BindTemporary)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const std::string)
  13: ~const std::string() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   8: (sc_dt::int64)[B1.7] (CStyleCastExpr, NoOp, sc_dt::int64)
   9: 0
  10: [B1.4]([B1.8], [B1.9])
  11: this
  12: [B1.11]->m_left_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: v
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
  18: (sc_dt::int64)[B1.17] (CStyleCastExpr, NoOp, sc_dt::int64)
  19: this
  20: [B1.19]->m_len_r
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.14]([B1.18], [B1.21])
  23: this
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(long v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, long)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
   8: (sc_dt::int64)[B1.7] (CStyleCastExpr, NoOp, sc_dt::int64)
   9: 0
  10: [B1.4]([B1.8], [B1.9])
  11: this
  12: [B1.11]->m_left_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: v
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, long)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_dt::int64)
  18: (sc_dt::int64)[B1.17] (CStyleCastExpr, NoOp, sc_dt::int64)
  19: this
  20: [B1.19]->m_len_r
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.14]([B1.18], [B1.21])
  23: this
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(sc_dt::int64 v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   7: 0
   8: [B1.4]([B1.6], [B1.7])
   9: this
  10: [B1.9]->m_left_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  12: [B1.11]->concat_set
  13: v
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  15: this
  16: [B1.15]->m_len_r
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B1.12]([B1.14], [B1.17])
  19: this
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  22: return [B1.21];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(unsigned int v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, unsigned int)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B1.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: 0
  10: [B1.4]([B1.8], [B1.9])
  11: this
  12: [B1.11]->m_left_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: v
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, unsigned int)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
  18: (sc_dt::uint64)[B1.17] (CStyleCastExpr, NoOp, sc_dt::uint64)
  19: this
  20: [B1.19]->m_len_r
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.14]([B1.18], [B1.21])
  23: this
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(unsigned long v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, unsigned long)
   7: [B1.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B1.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: 0
  10: [B1.4]([B1.8], [B1.9])
  11: this
  12: [B1.11]->m_left_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: v
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, unsigned long)
  17: [B1.16] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
  18: (sc_dt::uint64)[B1.17] (CStyleCastExpr, NoOp, sc_dt::uint64)
  19: this
  20: [B1.19]->m_len_r
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B1.14]([B1.18], [B1.21])
  23: this
  24: *[B1.23]
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator=(sc_dt::uint64 v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: 0
   8: [B1.4]([B1.6], [B1.7])
   9: this
  10: [B1.9]->m_left_p
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  12: [B1.11]->concat_set
  13: v
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  15: this
  16: [B1.15]->m_len_r
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B1.12]([B1.14], [B1.17])
  19: this
  20: *[B1.19]
  21: [B1.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  22: return [B1.21];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const sc_dt::sc_concatref &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1].length
   3: [B1.2]()
   4: [B1.3] (ImplicitCastExpr, IntegralCast, int)
   5: [B1.4] (CXXConstructExpr, [B1.6], class sc_dt::sc_unsigned)
   6: sc_dt::sc_unsigned temp(v.length());
   7: operator=
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const class sc_dt::sc_unsigned &))
   9: temp
  10: v
  11: [B1.10].value
  12: [B1.11]()
  13: [B1.9] = [B1.12] (OperatorCall)
  14: this
  15: [B1.14]->m_right_p
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  17: [B1.16]->concat_set
  18: temp
  19: [B1.18] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  20: 0
  21: [B1.17]([B1.19], [B1.20])
  22: this
  23: [B1.22]->m_left_p
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  25: [B1.24]->concat_set
  26: temp
  27: [B1.26] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  28: this
  29: [B1.28]->m_len_r
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B1.25]([B1.27], [B1.30])
  32: this
  33: *[B1.32]
  34: [B1.33] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  35: return [B1.34];
  36: [B1.6].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const sc_dt::sc_signed &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: 0
   7: [B1.4]([B1.5], [B1.6])
   8: this
   9: [B1.8]->m_left_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  11: [B1.10]->concat_set
  12: v
  13: this
  14: [B1.13]->m_len_r
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B1.11]([B1.12], [B1.15])
  17: this
  18: *[B1.17]
  19: [B1.18] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const sc_dt::sc_unsigned &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_right_p
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
   4: [B1.3]->concat_set
   5: v
   6: 0
   7: [B1.4]([B1.5], [B1.6])
   8: this
   9: [B1.8]->m_left_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  11: [B1.10]->concat_set
  12: v
  13: this
  14: [B1.13]->m_len_r
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B1.11]([B1.12], [B1.15])
  17: this
  18: *[B1.17]
  19: [B1.18] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  20: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const char *v_p)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_len
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_unsigned)
   5: sc_dt::sc_unsigned v(this->m_len);
   6: operator=
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const char *))
   8: v
   9: v_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, const char *)
  11: [B1.8] = [B1.10] (OperatorCall)
  12: this
  13: [B1.12]->m_right_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  15: [B1.14]->concat_set
  16: v
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: 0
  19: [B1.15]([B1.17], [B1.18])
  20: this
  21: [B1.20]->m_left_p
  22: [B1.21] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  23: [B1.22]->concat_set
  24: v
  25: [B1.24] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  26: this
  27: [B1.26]->m_len_r
  28: [B1.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B1.23]([B1.25], [B1.28])
  30: this
  31: *[B1.30]
  32: [B1.31] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  33: return [B1.32];
  34: [B1.5].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const sc_dt::sc_bv_base &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1].length
   3: [B1.2]()
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_unsigned)
   5: sc_dt::sc_unsigned temp(v.length());
   6: operator=
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const class sc_dt::sc_bv_base &))
   8: temp
   9: v
  10: [B1.8] = [B1.9] (OperatorCall)
  11: this
  12: [B1.11]->m_right_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: temp
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  17: 0
  18: [B1.14]([B1.16], [B1.17])
  19: this
  20: [B1.19]->m_left_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  22: [B1.21]->concat_set
  23: temp
  24: [B1.23] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  25: this
  26: [B1.25]->m_len_r
  27: [B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B1.22]([B1.24], [B1.27])
  29: this
  30: *[B1.29]
  31: [B1.30] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  32: return [B1.31];
  33: [B1.5].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_concatref &operator=(const sc_dt::sc_lv_base &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: v
   2: [B1.1].length
   3: [B1.2]()
   4: [B1.3] (CXXConstructExpr, [B1.5], class sc_dt::sc_unsigned)
   5: sc_dt::sc_unsigned data(v.length());
   6: operator=
   7: [B1.6] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned &(*)(const class sc_dt::sc_lv_base &))
   8: data
   9: v
  10: [B1.8] = [B1.9] (OperatorCall)
  11: this
  12: [B1.11]->m_right_p
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  14: [B1.13]->concat_set
  15: data
  16: [B1.15] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  17: 0
  18: [B1.14]([B1.16], [B1.17])
  19: this
  20: [B1.19]->m_left_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_value_base *)
  22: [B1.21]->concat_set
  23: data
  24: [B1.23] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  25: this
  26: [B1.25]->m_len_r
  27: [B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B1.22]([B1.24], [B1.27])
  29: this
  30: *[B1.29]
  31: [B1.30] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
  32: return [B1.31];
  33: [B1.5].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool and_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].and_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nand_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].nand_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool or_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].or_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool nor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].nor_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].xor_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool xnor_reduce() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value
   3: [B1.2]()
   4: [B1.3].xnor_reduce
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void print(::std::ostream &os = ::std::cout) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, ::std::ostream &(*)(::std::ostream &, const class sc_dt::sc_unsigned &))
   3: os
   4: this
   5: [B1.4]->value
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void scan(::std::istream &is)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, [B1.2], std::string)
   2: std::string s;
   3: operator>>
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, basic_istream<char> &(*)(basic_istream<char> &, basic_string<char> &))
   5: is
   6: s
   7: [B1.5] >> [B1.6] (OperatorCall)
   8: operator=
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_concatref &(*)(const char *))
  10: this
  11: *[B1.10]
  12: s
  13: [B1.12] (ImplicitCastExpr, NoOp, const class std::basic_string<char>)
  14: [B1.13].c_str
  15: [B1.14]()
  16: [B1.11] = [B1.15] (OperatorCall)
  17: [B1.2].~std::string() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_concatref()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_generic_base() (Base initializer), sc_generic_base<class sc_dt::sc_concatref>)
   2: sc_generic_base([B1.1]) (Base initializer)
   3:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   4: sc_value_base([B1.3]) (Base initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_value_base *)
   7: m_left_p([B1.6]) (Member initializer)
   8: 0
   9: [B1.8] (ImplicitCastExpr, NullToPointer, class sc_dt::sc_value_base *)
  10: m_right_p([B1.9]) (Member initializer)
  11: 0
  12: m_len([B1.11]) (Member initializer)
  13: 0
  14: m_len_r([B1.13]) (Member initializer)
  15: m_flags(/*implicit*/(sc_dt::sc_concatref::concat_flags)0) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool and_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].and_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nand_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nand_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool or_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].or_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool nor_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].nor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xor_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool xnor_reduce(const sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1].xnor_reduce
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, sc_dt::uint64 shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] << [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, sc_dt::int64 shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] << [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, unsigned long shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] << [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, int shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] << [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, unsigned int shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] << [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator<<(const sc_dt::sc_concatref &target, long shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] << [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, sc_dt::uint64 shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >> [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, sc_dt::int64 shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >> [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, unsigned long shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >> [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, int shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] >> [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, unsigned int shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >> [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator>>(const sc_dt::sc_concatref &target, long shift)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, int))
   3: target
   4: [B1.3].value
   5: [B1.4]()
   6: shift
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >> [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_unsigned)
  15: ~sc_dt::sc_unsigned() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::ostream &operator<<(::std::ostream &os, const sc_dt::sc_concatref &v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, ::std::ostream &(*)(::std::ostream &, const class sc_dt::sc_unsigned &))
   3: os
   4: v
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] << [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline ::std::istream &operator>>(::std::istream &is, sc_dt::sc_concatref &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: a
   2: [B1.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_concatref)
   3: [B1.2].concat_length
   4: 0
   5: [B1.4] (ImplicitCastExpr, NullToPointer, _Bool *)
   6: [B1.3]([B1.5])
   7: [B1.6] (CXXConstructExpr, [B1.8], class sc_dt::sc_unsigned)
   8: sc_dt::sc_unsigned temp(a.concat_length(0));
   9: temp
  10: [B1.9].scan
  11: is
  12: [B1.10]([B1.11])
  13: operator=
  14: [B1.13] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_concatref &(*)(const class sc_dt::sc_unsigned &))
  15: a
  16: temp
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.15] = [B1.17] (OperatorCall)
  19: is
  20: return [B1.19];
  21: [B1.8].~sc_dt::sc_unsigned() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_concat_bool()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_value_base() (Base initializer), class sc_dt::sc_value_base)
   2: sc_value_base([B1.1]) (Base initializer)
   3: m_value(/*implicit*/(bool)0) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_concat_bool() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_value_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static inline sc_dt::sc_concat_bool *allocate(bool v)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: m_pool
   2: [B1.1].allocate
   3: [B1.2]()
   4: sc_dt::sc_concat_bool *result_p = m_pool.allocate();
   5: v
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: result_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concat_bool *)
   9: [B1.8]->m_value
  10: [B1.9] = [B1.6]
  11: result_p
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concat_bool *)
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int concat_length(bool *xz_present_p) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: 1
   2: return [B1.1];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: false
   2: xz_present_p
   3: [B2.2] (ImplicitCastExpr, LValueToRValue, _Bool *)
   4: *[B2.3]
   5: [B2.4] = [B2.1]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: xz_present_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool *)
   3: [B3.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B3.3]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_ctrl(sc_dt::sc_digit *dst_p, int low_i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: low_i
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B1.3] % [B1.4]
   6: [B1.1] << ([B1.5])
   7: int bit = 1 << (low_i % 30);
   8: low_i
   9: [B1.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B1.9] / [B1.10]
  12: int word_i = low_i / 30;
  13: dst_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
  15: word_i
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14][[B1.16]]
  18: bit
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: ~[B1.19]
  21: [B1.20] (ImplicitCastExpr, IntegralCast, unsigned int)
  22: [B1.17] &= [B1.21]
  23: false
  24: return [B1.23];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool concat_get_data(sc_dt::sc_digit *dst_p, int low_i) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: this
   2: [B1.1]->m_value
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: return [B1.3];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: dst_p
   2: [B2.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2][[B2.4]]
   6: bit
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: ~[B2.7]
   9: [B2.8] (ImplicitCastExpr, IntegralCast, unsigned int)
  10: [B2.5] &= [B2.9]
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: dst_p
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit *)
   3: word_i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: bit
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: [B3.5] |= [B3.8]
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: 1
   2: low_i
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, int)
   4: 30
   5: [B4.3] % [B4.4]
   6: [B4.1] << ([B4.5])
   7: int bit = 1 << (low_i % 30);
   8: low_i
   9: [B4.8] (ImplicitCastExpr, LValueToRValue, int)
  10: 30
  11: [B4.9] / [B4.10]
  12: int word_i = low_i / 30;
  13: this
  14: [B4.13]->m_value
  15: [B4.14] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: if [B4.15]
   Preds (1): B5
   Succs (2): B3 B2

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_dt::uint64 concat_get_uint64() const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: [B4.3] ? [B2.1] : [B3.1]
   2: [B1.1] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 1
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: 0
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: this
   2: [B4.1]->m_value
   3: [B4.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B4.3] ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] + [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] + [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator+(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] + [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] + [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator+(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator+
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] + [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] - [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_signed)
  14: ~sc_dt::sc_signed() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] - [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] - [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] - [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_signed)
  15: ~sc_dt::sc_signed() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator-(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator-
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] - [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13], [B1.14])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], const class sc_dt::sc_signed)
  15: ~sc_dt::sc_signed() (Temporary object destructor)
  16: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] * [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] * [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator*(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] * [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] * [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator*(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator*
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] * [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] / [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] / [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator/(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] / [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] / [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator/(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator/
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] / [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] % [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] % [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator%(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] % [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] % [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator%(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator%
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] % [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] & [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] & [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator&(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] & [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] & [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator&(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator&
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] & [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] | [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] | [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator|(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] | [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] | [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator|(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator|
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] | [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] ^ [B1.8] (OperatorCall) (CXXRecordTypedCall, [B1.10], [B1.12], [B1.13])
  10: [B1.9] (BindTemporary)
  11: [B1.10] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  12: [B1.11]
  13: [B1.12] (CXXConstructExpr, [B1.15], const class sc_dt::sc_unsigned)
  14: ~sc_dt::sc_unsigned() (Temporary object destructor)
  15: return [B1.13];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_signed)
  13: ~sc_dt::sc_signed() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] ^ [B1.7] (OperatorCall) (CXXRecordTypedCall, [B1.9], [B1.11], [B1.12])
   9: [B1.8] (BindTemporary)
  10: [B1.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  11: [B1.10]
  12: [B1.11] (CXXConstructExpr, [B1.14], const class sc_dt::sc_unsigned)
  13: ~sc_dt::sc_unsigned() (Temporary object destructor)
  14: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_signed operator^(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_signed)
  12: ~sc_dt::sc_signed() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_unsigned (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] ^ [B1.6] (OperatorCall) (CXXRecordTypedCall, [B1.8], [B1.10], [B1.11])
   8: [B1.7] (BindTemporary)
   9: [B1.8] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  10: [B1.9]
  11: [B1.10] (CXXConstructExpr, [B1.13], const class sc_dt::sc_unsigned)
  12: ~sc_dt::sc_unsigned() (Temporary object destructor)
  13: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] ^ [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_unsigned operator^(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator^
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_signed (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] ^ [B1.9] (OperatorCall) (CXXRecordTypedCall, [B1.11], [B1.13])
  11: [B1.10] (BindTemporary)
  12: [B1.11] (ImplicitCastExpr, NoOp, const class sc_dt::sc_signed)
  13: [B1.12]
  14: [B1.13] (CXXConstructExpr, [B1.16], [B1.18], [B1.19], class sc_dt::sc_unsigned)
  15: [B1.14] (ImplicitCastExpr, ConstructorConversion, class sc_dt::sc_unsigned)
  16: [B1.15] (BindTemporary)
  17: [B1.16] (ImplicitCastExpr, NoOp, const class sc_dt::sc_unsigned)
  18: [B1.17]
  19: [B1.18] (CXXConstructExpr, [B1.22], const class sc_dt::sc_unsigned)
  20: ~sc_dt::sc_unsigned() (Temporary object destructor)
  21: ~sc_dt::sc_signed() (Temporary object destructor)
  22: return [B1.19];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] == [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] == [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] == [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] == [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator==(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator==
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] == [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] <= [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] <= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] <= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] <= [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<=(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] <= [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] >= [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] >= [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] >= [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] >= [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>=(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] >= [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] != [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] != [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] != [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] != [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator!=(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator!=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] != [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] > [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] > [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] > [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] > [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator>(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator>
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] > [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6].value
   8: [B1.7]()
   9: [B1.5] < [B1.8] (OperatorCall)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, long)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, sc_dt::int64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::int64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(sc_dt::int64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::int64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, unsigned int b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(unsigned int a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned int)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, unsigned long b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, unsigned long))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, unsigned long)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(unsigned long a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(unsigned long, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, unsigned long)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, sc_dt::uint64 b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, sc_dt::uint64))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   8: [B1.5] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(sc_dt::uint64 a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(sc_dt::uint64, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   5: b
   6: [B1.5].value
   7: [B1.6]()
   8: [B1.4] < [B1.7] (OperatorCall)
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, const sc_dt::sc_int_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_int_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_int_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_int_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, const sc_dt::sc_uint_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_uint_base &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_uint_base &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_uint_base &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, const sc_dt::sc_signed &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_signed &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_signed &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, const sc_dt::sc_unsigned &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.5] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_unsigned &a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, const class sc_dt::sc_unsigned &))
   3: a
   4: b
   5: [B1.4].value
   6: [B1.5]()
   7: [B1.3] < [B1.6] (OperatorCall)
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(const sc_dt::sc_concatref &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_unsigned &, int))
   3: a
   4: [B1.3].value
   5: [B1.4]()
   6: b
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, int)
   9: (int)[B1.8] (CStyleCastExpr, NoOp, int)
  10: [B1.5] < [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline bool operator<(bool a, const sc_dt::sc_concatref &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(int, const class sc_dt::sc_unsigned &))
   3: a
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: (int)[B1.5] (CStyleCastExpr, NoOp, int)
   7: b
   8: [B1.7].value
   9: [B1.8]()
  10: [B1.6] < [B1.9] (OperatorCall)
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_concatref &concat(sc_dt::sc_value_base &a, sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concatref *result_p;
   2: sc_dt::sc_concatref::m_pool
   3: [B1.2].allocate
   4: [B1.3]()
   5: result_p
   6: [B1.5] = [B1.4]
   7: result_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
   9: [B1.8]->initialize
  10: a
  11: b
  12: [B1.9]([B1.10], [B1.11])
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &concat(const sc_dt::sc_value_base &a, const sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concatref *result_p;
   2: sc_dt::sc_concatref::m_pool
   3: [B1.2].allocate
   4: [B1.3]()
   5: result_p
   6: [B1.5] = [B1.4]
   7: result_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
   9: [B1.8]->initialize
  10: a
  11: b
  12: [B1.9]([B1.10], [B1.11])
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  15: *[B1.14]
  16: [B1.15] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &concat(const sc_dt::sc_value_base &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: const sc_dt::sc_concat_bool *b_p;
   2: sc_dt::sc_concatref *result_p;
   3: sc_dt::sc_concat_bool::allocate
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_concat_bool *(*)(_Bool))
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.4]([B1.6])
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_dt::sc_concat_bool *)
   9: b_p
  10: [B1.9] = [B1.8]
  11: sc_dt::sc_concatref::m_pool
  12: [B1.11].allocate
  13: [B1.12]()
  14: result_p
  15: [B1.14] = [B1.13]
  16: result_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  18: [B1.17]->initialize
  19: a
  20: b_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_concat_bool *)
  22: *[B1.21]
  23: [B1.22] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
  24: [B1.18]([B1.19], [B1.23])
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  27: *[B1.26]
  28: [B1.27] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &concat(bool a, const sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: const sc_dt::sc_concat_bool *a_p;
   2: sc_dt::sc_concatref *result_p;
   3: sc_dt::sc_concat_bool::allocate
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_concat_bool *(*)(_Bool))
   5: a
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.4]([B1.6])
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_dt::sc_concat_bool *)
   9: a_p
  10: [B1.9] = [B1.8]
  11: sc_dt::sc_concatref::m_pool
  12: [B1.11].allocate
  13: [B1.12]()
  14: result_p
  15: [B1.14] = [B1.13]
  16: result_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  18: [B1.17]->initialize
  19: a_p
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_concat_bool *)
  21: *[B1.20]
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
  23: b
  24: [B1.18]([B1.22], [B1.23])
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  27: *[B1.26]
  28: [B1.27] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_concatref &operator,(sc_dt::sc_value_base &a, sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concatref *result_p;
   2: sc_dt::sc_concatref::m_pool
   3: [B1.2].allocate
   4: [B1.3]()
   5: result_p
   6: [B1.5] = [B1.4]
   7: result_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
   9: [B1.8]->initialize
  10: a
  11: b
  12: [B1.9]([B1.10], [B1.11])
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  15: *[B1.14]
  16: return [B1.15];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator,(const sc_dt::sc_value_base &a, const sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concatref *result_p;
   2: sc_dt::sc_concatref::m_pool
   3: [B1.2].allocate
   4: [B1.3]()
   5: result_p
   6: [B1.5] = [B1.4]
   7: result_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
   9: [B1.8]->initialize
  10: a
  11: b
  12: [B1.9]([B1.10], [B1.11])
  13: result_p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  15: *[B1.14]
  16: [B1.15] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator,(const sc_dt::sc_value_base &a, bool b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: const sc_dt::sc_concat_bool *b_p;
   2: sc_dt::sc_concatref *result_p;
   3: sc_dt::sc_concat_bool::allocate
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_concat_bool *(*)(_Bool))
   5: b
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.4]([B1.6])
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_dt::sc_concat_bool *)
   9: b_p
  10: [B1.9] = [B1.8]
  11: sc_dt::sc_concatref::m_pool
  12: [B1.11].allocate
  13: [B1.12]()
  14: result_p
  15: [B1.14] = [B1.13]
  16: result_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  18: [B1.17]->initialize
  19: a
  20: b_p
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_concat_bool *)
  22: *[B1.21]
  23: [B1.22] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
  24: [B1.18]([B1.19], [B1.23])
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  27: *[B1.26]
  28: [B1.27] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline const sc_dt::sc_concatref &operator,(bool a, const sc_dt::sc_value_base &b)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: const sc_dt::sc_concat_bool *a_p;
   2: sc_dt::sc_concatref *result_p;
   3: sc_dt::sc_concat_bool::allocate
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_concat_bool *(*)(_Bool))
   5: a
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.4]([B1.6])
   8: [B1.7] (ImplicitCastExpr, NoOp, const sc_dt::sc_concat_bool *)
   9: a_p
  10: [B1.9] = [B1.8]
  11: sc_dt::sc_concatref::m_pool
  12: [B1.11].allocate
  13: [B1.12]()
  14: result_p
  15: [B1.14] = [B1.13]
  16: result_p
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  18: [B1.17]->initialize
  19: a_p
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, const sc_dt::sc_concat_bool *)
  21: *[B1.20]
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, const class sc_dt::sc_value_base)
  23: b
  24: [B1.18]([B1.22], [B1.23])
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_concatref *)
  27: *[B1.26]
  28: [B1.27] (ImplicitCastExpr, NoOp, const sc_dt::sc_concatref)
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_zstring_view()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, basic_string_view() (Base initializer), sc_core::sc_string_view)
   2: basic_string_view([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_zstring_view(const char *s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: s
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, basic_string_view([B1.2]) (Base initializer), sc_core::sc_string_view)
   4: basic_string_view([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_zstring_view(const std::string &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: s
   2: [B1.1] (CXXConstructExpr, basic_string_view([B1.1]) (Base initializer), sc_core::sc_string_view)
   3: basic_string_view([B1.2]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void swap(sc_core::sc_zstring_view &s)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_string_view *)
   3: [B1.2]->sc_string_view::swap
   4: s
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class std::experimental::basic_string_view<char>)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *c_str() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class std::experimental::basic_string_view<char> *)
   3: [B1.2]->data
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_vector"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_vector_base::size_type size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].size
   4: [B1.3]()
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_vector_base(const char *prefix)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: prefix
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: [B1.2] (CXXConstructExpr, sc_object([B1.2]) (Base initializer), class sc_core::sc_object)
   4: sc_object([B1.3]) (Base initializer)
   5:  (CXXConstructExpr, vec_() (Member initializer), sc_core::sc_vector_base::storage_type)
   6: vec_([B1.5]) (Member initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, std::vector<sc_object *> *)
   9: objs_vec_([B1.8]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_vector_base() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->objs_vec_
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, std::vector<sc_object *> *)
   4: [B1.3]->~vector() (Implicit destructor)
   5: delete [B1.3]
   6: this->vec_.~vector() (Member object destructor)
   7: ~sc_object() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void *at(sc_core::sc_vector_base::size_type i)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator[]
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_vector_element *>::reference (*)(std::vector::size_type) noexcept)
   3: this
   4: [B1.3]->vec_
   5: i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_vector_base::size_type)
   7: [B1.4][[B1.6]] (OperatorCall)
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_vector_element *>, class sc_core::sc_vector_element *>::value_type)
   9: [B1.8] (ImplicitCastExpr, BitCast, void *)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const void *at(sc_core::sc_vector_base::size_type i) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator[]
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_vector_element *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B1.3]->vec_
   5: i
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_vector_base::size_type)
   7: [B1.4][[B1.6]] (OperatorCall)
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_vector_element *>, class sc_core::sc_vector_element *>::value_type)
   9: [B1.8] (ImplicitCastExpr, BitCast, const void *)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void reserve(sc_core::sc_vector_base::size_type n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].reserve
   4: n
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_vector_base::size_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void clear()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].clear
   4: [B1.3]()
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void push_back(void *item)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].push_back
   4: item
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, void *)
   6: static_cast<sc_core::sc_vector_base::handle_type>([B1.5]) (CXXStaticCastExpr, BitCast, sc_core::sc_vector_base::handle_type)
   7: [B1.6]
   8: [B1.3]([B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_vector_base::iterator begin()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].begin
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_vector_base::iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_vector_base::iterator end()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].end
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_vector_base::iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_vector_base::const_iterator begin() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].begin
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_vector_base::const_iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_vector_base::const_iterator end() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->vec_
   3: [B1.2].end
   4: [B1.3]() (CXXRecordTypedCall, [B1.5], [B1.6])
   5: [B1.4]
   6: [B1.5] (CXXConstructExpr, [B1.7], sc_core::sc_vector_base::const_iterator)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_object *implicit_cast(sc_core::sc_object *p) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_object *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

top(sc_core::sc_module_name)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_module() (Base initializer), class sc_core::sc_module)
   2: sc_module([B1.1]) (Base initializer)
   3:  (CXXConstructExpr, clk() (Member initializer), sc_core::sc_in_clk)
   4: clk([B1.3]) (Member initializer)
   5: 
   6: arstn([B1.5]) (Member initializer)
   7: 
   8: in([B1.7]) (Member initializer)
   9: 
  10: out([B1.9]) (Member initializer)
  11: sc_core::sc_get_curr_simcontext
  12: [B1.11] (ImplicitCastExpr, FunctionToPointerDecay, class sc_core::sc_simcontext *(*)(void))
  13: [B1.12]()
  14: [B1.13]->create_cthread_process
  15: "for_stmt_no_wait1"
  16: [B1.15] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  17: false
  18: SC_CURRENT_USER_MODULE::for_stmt_no_wait1
  19: &[B1.18]
  20: static_cast<sc_core::SC_ENTRY_FUNC>([B1.19]) (CXXStaticCastExpr, DerivedToBaseMemberPointer, sc_core::SC_ENTRY_FUNC)
  21: this
  22: [B1.21] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_process_host *)
  23: 0
  24: [B1.23] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_spawn_options *)
  25: [B1.14]([B1.16], [B1.17], [B1.20], [B1.22], [B1.24]) (CXXRecordTypedCall, [B1.26], [B1.28], [B1.29])
  26: [B1.25] (BindTemporary)
  27: [B1.26] (ImplicitCastExpr, NoOp, const class sc_core::sc_process_handle)
  28: [B1.27]
  29: [B1.28] (CXXConstructExpr, [B1.30], ::sc_core::sc_process_handle)
  30: ::sc_core::sc_process_handle for_stmt_no_wait1_handle = sc_core::sc_get_curr_simcontext()->create_cthread_process("for_stmt_no_wait1", false, static_cast<sc_core::SC_ENTRY_FUNC>(&SC_CURRENT_USER_MODULE::for_stmt_no_wait1), this, 0);
  31: ~sc_core::sc_process_handle() (Temporary object destructor)
  32: this
  33: [B1.32] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
  34: [B1.33]->sensitive
  35: [B1.34].operator()
  36: for_stmt_no_wait1_handle
  37: [B1.36].operator sc_core::sc_cthread_process *
  38: [B1.36]
  39: [B1.38] (ImplicitCastExpr, UserDefinedConversion, sc_core::sc_cthread_handle)
  40: this
  41: [B1.40]->clk
  42: [B1.41] (ImplicitCastExpr, NoOp, const class sc_core::sc_in<_Bool>)
  43: [B1.42].pos
  44: [B1.43]()
  45: [B1.35]([B1.39], [B1.44])
  46: [B1.30].~::sc_core::sc_process_handle() (Implicit destructor)
  47: this
  48: [B1.47] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
  49: [B1.48]->async_reset_signal_is
  50: this
  51: [B1.50]->arstn
  52: [B1.51] (ImplicitCastExpr, NoOp, const sc_signal<_Bool>)
  53: [B1.52] (ImplicitCastExpr, DerivedToBase, const sc_signal_in_if<_Bool>)
  54: false
  55: [B1.49]([B1.53], [B1.54])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void for_stmt_no_wait1()
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   Preds (1): B2
   Succs (1): B7

 [B2]
   1: 2
   2: k
   3: [B2.2] = [B2.1]
   4: this
   5: [B2.4] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   6: [B2.5]->wait
   7: [B2.6]()
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1]++
   Preds (1): B4
   Succs (1): B5

 [B4]
   1: 1
   2: k
   3: [B4.2] = [B4.1]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 2
   4: [B5.2] < [B5.3]
   T: for (...; [B5.4]; ...)
   Preds (2): B3 B6
   Succs (2): B4 B2

 [B6]
   1: 0
   2: int i = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: true
   T: while [B7.1]
   Preds (2): B1 B8
   Succs (2): B6 NULL

 [B8]
   1: 0
   2: int k = 0;
   3: this
   4: [B8.3] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   5: [B8.4]->wait
   6: [B8.5]()
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]

void for_stmt_no_wait2()
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   Preds (1): B8
   Succs (1): B14

 [B2]
   1: i
   2: [B2.1]++
   Preds (2): B5 B7
   Succs (1): B8

 [B3]
   1: j
   2: [B3.1]++
   Preds (1): B4
   Succs (1): B5

 [B4]
   1: k
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: j
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 4
   4: [B5.2] < [B5.3]
   T: for (...; [B5.4]; ...)
   Preds (2): B3 B6
   Succs (2): B4 B2

 [B6]
   1: 0
   2: int j = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: this
   2: [B7.1]->in
   3: [B7.2] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>)
   4: [B7.3].operator const int &
   5: [B7.3]
   6: [B7.5] (ImplicitCastExpr, UserDefinedConversion, const int)
   7: [B7.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B7.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.8]
   Preds (1): B8
   Succs (2): B6 B2

 [B8]
   1: i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 10
   4: [B8.2] < [B8.3]
   T: for (...; [B8.4]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B1

 [B9]
   1: this
   2: [B9.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   3: [B9.2]->wait
   4: [B9.3]()
   5: 0
   6: int i = 0;
   Preds (1): B12
   Succs (1): B8

 [B10]
   1: i
   2: [B10.1]++
   Preds (1): B11
   Succs (1): B12

 [B11]
   1: k
   2: [B11.1]--
   Preds (1): B12
   Succs (1): B10

 [B12]
   1: i
   2: [B12.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 4
   4: [B12.2] < [B12.3]
   T: for (...; [B12.4]; ...)
   Preds (2): B10 B13
   Succs (2): B11 B9

 [B13]
   1: 0
   2: int k = 0;
   3: 0
   4: int i = 0;
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: true
   T: while [B14.1]
   Preds (2): B1 B15
   Succs (2): B13 NULL

 [B15]
   1: this
   2: [B15.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   3: [B15.2]->wait
   4: [B15.3]()
   Preds (1): B16
   Succs (1): B14

 [B0 (EXIT)]

void for_stmt_wait0()
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   Preds (1): B2
   Succs (1): B7

 [B2]
   1: 3
   2: k
   3: [B2.2] = [B2.1]
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1]++
   Preds (1): B4
   Succs (1): B5

 [B4]
   1: 2
   2: k
   3: [B4.2] = [B4.1]
   4: this
   5: [B4.4] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   6: [B4.5]->wait
   7: [B4.6]()
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 2
   4: [B5.2] < [B5.3]
   T: for (...; [B5.4]; ...)
   Preds (2): B3 B6
   Succs (2): B4 B2

 [B6]
   1: 1
   2: k
   3: [B6.2] = [B6.1]
   4: this
   5: [B6.4] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   6: [B6.5]->wait
   7: [B6.6]()
   8: 0
   9: int i = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: true
   T: while [B7.1]
   Preds (2): B1 B8
   Succs (2): B6 NULL

 [B8]
   1: 0
   2: int k = 0;
   3: this
   4: [B8.3] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_module *)
   5: [B8.4]->wait
   6: [B8.5]()
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]

int sc_main(int argc, char *argv[])
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "clk"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: 10
   4: [B1.3] (ImplicitCastExpr, IntegralToFloating, double)
   5: SC_NS
   6: 
   7: {[B1.2], [B1.4], [B1.5]} (CXXConstructExpr, [B1.8], class sc_core::sc_clock)
   8: sc_core::sc_clock clk{"clk", 10, SC_NS};
   9: "top_inst"
  10: [B1.9] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  11: [B1.10] (CXXConstructExpr, [B1.13], [B1.15], [B1.16], class sc_core::sc_module_name)
  12: [B1.11] (ImplicitCastExpr, ConstructorConversion, class sc_core::sc_module_name)
  13: [B1.12] (BindTemporary)
  14: [B1.13] (ImplicitCastExpr, NoOp, const class sc_core::sc_module_name)
  15: [B1.14]
  16: [B1.15] (CXXConstructExpr, [B1.17], [B1.18]+0, class sc_core::sc_module_name)
  17: [B1.16] (BindTemporary)
  18: {[B1.17]} (CXXConstructExpr, [B1.19], class top)
  19: top top_inst{"top_inst"};
  20: ~sc_core::sc_module_name() (Temporary object destructor)
  21: ~sc_core::sc_module_name() (Temporary object destructor)
  22: operator()
  23: [B1.22] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const sc_core::sc_in<_Bool>::in_if_type &))
  24: top_inst
  25: [B1.24].clk
  26: clk
  27: [B1.26] (ImplicitCastExpr, NoOp, const class sc_core::sc_clock)
  28: [B1.27] (ImplicitCastExpr, DerivedToBase, const sc_core::sc_in<_Bool>::in_if_type)
  29: [B1.25]([B1.28]) (OperatorCall)
  30: sc_start
  31: [B1.30] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int, enum sc_core::sc_time_unit, enum sc_core::sc_starvation_policy))
  32: 100
  33: SC_NS
  34: 
  35: [B1.31]([B1.32], [B1.33])
  36: 0
  37: return [B1.36];
  38: [B1.19].~top() (Implicit destructor)
  39: [B1.8].~sc_core::sc_clock() (Implicit destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void insert(sc_core::sc_event_timed *elem)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_ppq_base *)
   3: [B1.2]->sc_ppq_base::insert
   4: elem
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_timed *)
   6: [B1.5] (ImplicitCastExpr, BitCast, void *)
   7: (void *)[B1.6] (CStyleCastExpr, NoOp, void *)
   8: [B1.3]([B1.7])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_expr()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: CFGNewAllocator(sc_core::sc_event_or_list *)
   2: true
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_core::sc_event_or_list)
   4: new sc_core::sc_event_or_list([B1.3])
   5: m_expr([B1.4]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_event_expr<sc_event_or_list>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_expr
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   4: [B1.3]->~sc_event_or_list() (Implicit destructor)
   5: delete [B1.3]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void push_back(const sc_core::sc_event_expr<sc_core::sc_event_or_list>::type &el) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.4] ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B1.3]->m_expr
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: el
   9: [B1.8] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_event_list)
  10: [B1.7]([B1.9])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_expr"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_event.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 100
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_expr
   3: ([B5.2]) (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   4: [B5.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B5.4] ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

void push_back(const sc_core::sc_event &e) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.4] ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B1.3]->m_expr
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: e
   9: [B1.7]([B1.8])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_expr"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_event.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 94
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_expr
   3: ([B5.2]) (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   4: [B5.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B5.4] ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

inline sc_event_expr(const sc_core::sc_event_expr<sc_core::sc_event_or_list> &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: e
   2: [B1.1].m_expr
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   4: m_expr([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_event_expr<class sc_core::sc_event_or_list>::type *)
   7: e
   8: [B1.7].m_expr
   9: [B1.8] = [B1.6]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_event_expr()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: CFGNewAllocator(sc_core::sc_event_and_list *)
   2: true
   3: [B1.2] (CXXConstructExpr, [B1.4], class sc_core::sc_event_and_list)
   4: new sc_core::sc_event_and_list([B1.3])
   5: m_expr([B1.4]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_event_expr<sc_event_and_list>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_expr
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   4: [B1.3]->~sc_event_and_list() (Implicit destructor)
   5: delete [B1.3]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void push_back(const sc_core::sc_event_expr<sc_core::sc_event_and_list>::type &el) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.4] ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B1.3]->m_expr
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: el
   9: [B1.8] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_event_list)
  10: [B1.7]([B1.9])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_expr"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_event.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 100
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_expr
   3: ([B5.2]) (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   4: [B5.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B5.4] ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

void push_back(const sc_core::sc_event &e) const
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: [B5.4] ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B1.3]->m_expr
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_event_list *)
   7: [B1.6]->push_back
   8: e
   9: [B1.7]([B1.8])
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "m_expr"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/kernel/sc_event.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 94
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_expr
   3: ([B5.2]) (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   4: [B5.3] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B5.4] ? ... : ...
   Preds (1): B6
   Succs (2): B2 B4

 [B0 (EXIT)]
   Preds (2): B1 B4

inline sc_event_expr(const sc_core::sc_event_expr<sc_core::sc_event_and_list> &e)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: e
   2: [B1.1].m_expr
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   4: m_expr([B1.3]) (Member initializer)
   5: 0
   6: [B1.5] (ImplicitCastExpr, NullToPointer, sc_core::sc_event_expr<class sc_core::sc_event_and_list>::type *)
   7: e
   8: [B1.7].m_expr
   9: [B1.8] = [B1.6]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port_b(int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: max_size_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: policy
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port_base([B1.2], [B1.4]) (Base initializer), class sc_core::sc_port_base)
   6: sc_port_base([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
   9: m_interface([B1.8]) (Member initializer)
  10:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_in_if<_Bool> *>)
  11: m_interface_vec([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_interface *get_interface()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_interface *get_interface() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_type_index sc_port_b<sc_signal_in_if<bool>>::get_interface_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: typeid(sc_core::sc_signal_in_if<bool>)
   2: [B1.1] (CXXConstructExpr, [B1.4], [B1.5], sc_core::sc_type_index)
   3: [B1.2] (ImplicitCastExpr, ConstructorConversion, sc_core::sc_type_index)
   4: [B1.3]
   5: [B1.4] (CXXConstructExpr, [B1.6], sc_core::sc_type_index)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_in_if<bool>>::vbind(sc_core::sc_interface &interface_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: iface
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: interface_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_signal_in_if<bool> *>([B3.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_in_if<_Bool> *)
   4: sc_core::sc_signal_in_if<bool> *iface = dynamic_cast<sc_core::sc_signal_in_if<bool> *>(&interface_);
   5: iface
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int sc_port_b<sc_signal_in_if<bool>>::vbind(sc_core::sc_port_base &parent_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::this_type *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: parent_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<bool>>::this_type *>([B3.2]) (CXXDynamicCastExpr, Dynamic, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::this_type *)
   4: sc_core::sc_port_b<sc_core::sc_signal_in_if<bool>>::this_type *parent = dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<bool>>::this_type *>(&parent_);
   5: parent
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::this_type *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::this_type *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void sc_port_b<sc_signal_in_if<bool>>::add_interface(sc_core::sc_interface *interface_)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].push_back
   4: iface
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_signal_in_if<_Bool> *>::value_type)
   6: [B1.3]([B1.5])
   7: operator[]
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<_Bool> *>::reference (*)(std::vector::size_type) noexcept)
   9: this
  10: [B1.9]->m_interface_vec
  11: 0
  12: [B1.11] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  13: [B1.10][[B1.12]] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<_Bool> *>, class sc_core::sc_signal_in_if<_Bool> *>::value_type)
  15: this
  16: [B1.15]->m_interface
  17: [B1.16] = [B1.14]
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (2): B3 B4
   Succs (1): B5

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B3.2]->report_error
   4: SC_ID_BIND_IF_TO_PORT_
   5: [B3.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "interface already bound to port"
   7: [B3.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B3.3]([B3.5], [B3.7])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: iface
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   3: operator[]
   4: [B4.3] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<_Bool> *>::reference (*)(std::vector::size_type) noexcept)
   5: this
   6: [B4.5]->m_interface_vec
   7: i
   8: [B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B4.8] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  10: [B4.6][[B4.9]] (OperatorCall)
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<_Bool> *>, class sc_core::sc_signal_in_if<_Bool> *>::value_type)
  12: [B4.2] == [B4.11]
   T: if [B4.12]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2] < [B5.4]
   T: for (...; [B5.5]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: ([B10.9]) ? [B7.1] : ([B8.2])
   2: (void)([B6.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> > *)
   5: [B6.4]->size
   6: [B6.5]()
   7: int if_n = this->size();
   8: 0
   9: int i = 0;
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B10
   Succs (1): B6

 [B8]
   1: 0
   2: ... , [B8.1]
   Preds (1): B9(Unreachable)
   Succs (1): B6

 [B9 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface != 0"
   4: [B9.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B9.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 553
   8: [B9.2]([B9.4], [B9.6], [B9.7])
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: interface_
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<sc_core::sc_signal_in_if<bool> *>([B10.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_in_if<_Bool> *)
   4: sc_core::sc_signal_in_if<bool> *iface = dynamic_cast<sc_core::sc_signal_in_if<bool> *>(interface_);
   5: iface
   6: [B10.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   7: 0
   8: [B10.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
   9: [B10.6] != [B10.8]
   T: ([B10.9]) ? ... : ...
   Preds (1): B11
   Succs (2): B7 B9

 [B0 (EXIT)]
   Preds (2): B1 B9

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_in_if<bool>>::interface_count() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->size
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_port_b<sc_signal_in_if<bool>>::make_sensitive(sc_core::sc_thread_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 601
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<_Bool> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<_Bool> *>, class sc_core::sc_signal_in_if<_Bool> *>::value_type)
  10: sc_core::sc_signal_in_if<bool> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void sc_port_b<sc_signal_in_if<bool>>::make_sensitive(sc_core::sc_method_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 622
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<_Bool> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<_Bool> *>, class sc_core::sc_signal_in_if<_Bool> *>::value_type)
  10: sc_core::sc_signal_in_if<bool> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void bind(sc_core::sc_signal_in_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: interface_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_port_b<sc_core::sc_signal_in_if<bool>>::port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port_b<sc_signal_in_if<bool>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this->m_interface_vec.~vector() (Member object destructor)
   2: ~sc_port_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port<sc_signal_in_if<bool>, 1, SC_ONE_OR_MORE_BOUND>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_port_b() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port_b(const char *name_, int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: max_size_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: policy
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   7: [B1.2], [B1.4], [B1.6] (CXXConstructExpr, sc_port_base([B1.2], [B1.4], [B1.6]) (Base initializer), class sc_core::sc_port_base)
   8: sc_port_base([B1.7]) (Base initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
  11: m_interface([B1.10]) (Member initializer)
  12:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_in_if<_Bool> *>)
  13: m_interface_vec([B1.12]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(sc_core::sc_signal_in_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: interface_
  15: [B1.13]([B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_signal_in_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: interface_
  17: [B1.15]([B1.16])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(sc_core::sc_port<sc_core::sc_signal_in_if<bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: parent_
  15: [B1.14] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::port_type)
  16: [B1.13]([B1.15])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_port<sc_core::sc_signal_in_if<bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: parent_
  17: [B1.16] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >::port_type)
  18: [B1.15]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_signal_in_if<bool> *sc_port_b<sc_signal_in_if<bool>>::operator->() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: const_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<bool>> &>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_port_b<class sc_core::sc_signal_in_if<_Bool> >)
   4: [B1.3].operator->
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_in_if<_Bool> *)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_in_if<bool> *sc_port_b<sc_signal_in_if<bool>>::operator->()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   4: return [B1.3];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B2.2]->report_error
   4: SC_ID_GET_IF_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_core::sc_abort
  10: [B2.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  11: [B2.10]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_interface
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<_Bool> *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<_Bool> *)
   6: [B3.3] == [B3.5]
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

template<> static inline sc_core::sc_event_finder &sc_event_finder::cached_create<sc_core::sc_signal_in_if<bool>>(sc_core::sc_event_finder *&cache_p, const sc_core::sc_port_base &port_, const sc_core::sc_event &(sc_core::sc_signal_in_if<bool>::*ef_p)() const)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: ([B5.9]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: cache_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   5: *[B1.4]
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "&port_ == &cache_p->port()"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_event_finder.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 139
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: port_
   2: &[B5.1]
   3: cache_p
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   5: [B5.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_finder *)
   6: [B5.5]->port
   7: [B5.6]()
   8: &[B5.7]
   9: [B5.2] == [B5.8]
   T: ([B5.9]) ? ... : ...
   Preds (2): B6 B7
   Succs (2): B2 B4

 [B6]
   1: CFGNewAllocator(sc_event_finder_t<sc_core::sc_signal_in_if<bool>> *)
   2: port_
   3: ef_p
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const)
   5: [B6.2], [B6.4] (CXXConstructExpr, [B6.6], sc_event_finder_t<class sc_core::sc_signal_in_if<_Bool> >)
   6: new sc_event_finder_t<sc_core::sc_signal_in_if<bool>>([B6.5])
   7: [B6.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_event_finder *)
   8: cache_p
   9: [B6.8] = [B6.7]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: cache_p
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   3: [B7.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B7.3]
   T: if [B7.4]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (2): B1 B4

sc_event_finder_t(const sc_core::sc_port_base &port_, const sc_core::sc_event &(sc_core::sc_signal_in_if<bool>::*event_method_)() const)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: port_
   2: [B1.1] (CXXConstructExpr, sc_event_finder([B1.1]) (Base initializer), class sc_core::sc_event_finder)
   3: sc_event_finder([B1.2]) (Base initializer)
   4: event_method_
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const)
   6: m_event_method([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_event_finder_t<sc_signal_in_if<bool>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_event_finder() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_event &sc_event_finder_t<sc_signal_in_if<bool>>::find_event(sc_core::sc_interface *if_p) const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: iface
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_signal_in_if<_Bool> *)
   3: const_cast<sc_core::sc_signal_in_if<bool> *>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_signal_in_if<_Bool> *)
   4: this
   5: [B1.4]->m_event_method
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<_Bool>::*)(void) const)
   7: [B1.3] ->* [B1.6]
   8: ([B1.7])()
   9: return [B1.8];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_finder *)
   3: [B2.2]->report_error
   4: SC_ID_FIND_EVENT_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_event::none
  10: return [B2.9];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: [B6.3] ? [B4.3] : [B5.7]
   2: const sc_core::sc_signal_in_if<bool> *iface = (if_p) ? dynamic_cast<const sc_core::sc_signal_in_if<bool> *>(if_p) : dynamic_cast<const sc_core::sc_signal_in_if<bool> *>(this->port().get_interface());
   3: iface
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_signal_in_if<_Bool> *)
   5: 0
   6: [B3.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_signal_in_if<_Bool> *)
   7: [B3.4] == [B3.6]
   T: if [B3.7]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: if_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<const sc_core::sc_signal_in_if<bool> *>([B4.2]) (CXXDynamicCastExpr, Dynamic, const class sc_core::sc_signal_in_if<_Bool> *)
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: this
   2: [B5.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_finder *)
   3: [B5.2]->port
   4: [B5.3]()
   5: [B5.4].get_interface
   6: [B5.5]()
   7: dynamic_cast<const sc_core::sc_signal_in_if<bool> *>([B5.6]) (CXXDynamicCastExpr, Dynamic, const class sc_core::sc_signal_in_if<_Bool> *)
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: if_p
   2: ([B6.1]) (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: [B6.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B6.3] ? ... : ...
   Preds (1): B7
   Succs (2): B4 B5

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_port()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port_b(int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: max_size_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: policy
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port_base([B1.2], [B1.4]) (Base initializer), class sc_core::sc_port_base)
   6: sc_port_base([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   9: m_interface([B1.8]) (Member initializer)
  10:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_in_if<sc_dt::sc_logic> *>)
  11: m_interface_vec([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_interface *get_interface()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_interface *get_interface() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_type_index sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::get_interface_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: typeid(sc_core::sc_signal_in_if<sc_dt::sc_logic>)
   2: [B1.1] (CXXConstructExpr, [B1.4], [B1.5], sc_core::sc_type_index)
   3: [B1.2] (ImplicitCastExpr, ConstructorConversion, sc_core::sc_type_index)
   4: [B1.3]
   5: [B1.4] (CXXConstructExpr, [B1.6], sc_core::sc_type_index)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::vbind(sc_core::sc_interface &interface_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: iface
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: interface_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_signal_in_if<sc_dt::sc_logic> *>([B3.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: sc_core::sc_signal_in_if<sc_dt::sc_logic> *iface = dynamic_cast<sc_core::sc_signal_in_if<sc_dt::sc_logic> *>(&interface_);
   5: iface
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::vbind(sc_core::sc_port_base &parent_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::this_type *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: parent_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_logic>>::this_type *>([B3.2]) (CXXDynamicCastExpr, Dynamic, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::this_type *)
   4: sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_logic>>::this_type *parent = dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_logic>>::this_type *>(&parent_);
   5: parent
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::this_type *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::this_type *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::add_interface(sc_core::sc_interface *interface_)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].push_back
   4: iface
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::value_type)
   6: [B1.3]([B1.5])
   7: operator[]
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::reference (*)(std::vector::size_type) noexcept)
   9: this
  10: [B1.9]->m_interface_vec
  11: 0
  12: [B1.11] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  13: [B1.10][[B1.12]] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::value_type)
  15: this
  16: [B1.15]->m_interface
  17: [B1.16] = [B1.14]
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (2): B3 B4
   Succs (1): B5

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B3.2]->report_error
   4: SC_ID_BIND_IF_TO_PORT_
   5: [B3.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "interface already bound to port"
   7: [B3.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B3.3]([B3.5], [B3.7])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: iface
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   3: operator[]
   4: [B4.3] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::reference (*)(std::vector::size_type) noexcept)
   5: this
   6: [B4.5]->m_interface_vec
   7: i
   8: [B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B4.8] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  10: [B4.6][[B4.9]] (OperatorCall)
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::value_type)
  12: [B4.2] == [B4.11]
   T: if [B4.12]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2] < [B5.4]
   T: for (...; [B5.5]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: ([B10.9]) ? [B7.1] : ([B8.2])
   2: (void)([B6.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> > *)
   5: [B6.4]->size
   6: [B6.5]()
   7: int if_n = this->size();
   8: 0
   9: int i = 0;
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B10
   Succs (1): B6

 [B8]
   1: 0
   2: ... , [B8.1]
   Preds (1): B9(Unreachable)
   Succs (1): B6

 [B9 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface != 0"
   4: [B9.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B9.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 553
   8: [B9.2]([B9.4], [B9.6], [B9.7])
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: interface_
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<sc_core::sc_signal_in_if<sc_dt::sc_logic> *>([B10.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: sc_core::sc_signal_in_if<sc_dt::sc_logic> *iface = dynamic_cast<sc_core::sc_signal_in_if<sc_dt::sc_logic> *>(interface_);
   5: iface
   6: [B10.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   7: 0
   8: [B10.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   9: [B10.6] != [B10.8]
   T: ([B10.9]) ? ... : ...
   Preds (1): B11
   Succs (2): B7 B9

 [B0 (EXIT)]
   Preds (2): B1 B9

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::interface_count() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->size
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::make_sensitive(sc_core::sc_thread_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 601
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::value_type)
  10: sc_core::sc_signal_in_if<sc_dt::sc_logic> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::make_sensitive(sc_core::sc_method_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 622
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *>::value_type)
  10: sc_core::sc_signal_in_if<sc_dt::sc_logic> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void bind(sc_core::sc_signal_in_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: interface_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_logic>>::port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this->m_interface_vec.~vector() (Member object destructor)
   2: ~sc_port_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port<sc_signal_in_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_port_b() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port_b(const char *name_, int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: max_size_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: policy
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   7: [B1.2], [B1.4], [B1.6] (CXXConstructExpr, sc_port_base([B1.2], [B1.4], [B1.6]) (Base initializer), class sc_core::sc_port_base)
   8: sc_port_base([B1.7]) (Base initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
  11: m_interface([B1.10]) (Member initializer)
  12:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_in_if<sc_dt::sc_logic> *>)
  13: m_interface_vec([B1.12]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(sc_core::sc_signal_in_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: interface_
  15: [B1.13]([B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_signal_in_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: interface_
  17: [B1.15]([B1.16])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(sc_core::sc_port<sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: parent_
  15: [B1.14] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::port_type)
  16: [B1.13]([B1.15])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_port<sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_in_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: parent_
  17: [B1.16] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >::port_type)
  18: [B1.15]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_signal_in_if<sc_dt::sc_logic> *sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::operator->() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: const_cast<sc_core::sc_port_b<sc_core::sc_signal_in_if<sc_dt::sc_logic>> &>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_port_b<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   4: [B1.3].operator->
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_in_if<sc_dt::sc_logic> *sc_port_b<sc_signal_in_if<sc_dt::sc_logic>>::operator->()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: return [B1.3];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B2.2]->report_error
   4: SC_ID_GET_IF_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_core::sc_abort
  10: [B2.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  11: [B2.10]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_interface
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   6: [B3.3] == [B3.5]
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

template<> static inline sc_core::sc_event_finder &sc_event_finder::cached_create<sc_core::sc_signal_in_if<sc_dt::sc_logic>>(sc_core::sc_event_finder *&cache_p, const sc_core::sc_port_base &port_, const sc_core::sc_event &(sc_core::sc_signal_in_if<sc_dt::sc_logic>::*ef_p)() const)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: ([B5.9]) ? [B2.1] : ([B3.2])
   2: (void)([B1.1]) (CStyleCastExpr, ToVoid, void)
   3: cache_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   5: *[B1.4]
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: 0
   Preds (1): B5
   Succs (1): B1

 [B3]
   1: 0
   2: ... , [B3.1]
   Preds (1): B4(Unreachable)
   Succs (1): B1

 [B4 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "&port_ == &cache_p->port()"
   4: [B4.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_event_finder.h"
   6: [B4.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 139
   8: [B4.2]([B4.4], [B4.6], [B4.7])
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: port_
   2: &[B5.1]
   3: cache_p
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   5: [B5.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_event_finder *)
   6: [B5.5]->port
   7: [B5.6]()
   8: &[B5.7]
   9: [B5.2] == [B5.8]
   T: ([B5.9]) ? ... : ...
   Preds (2): B6 B7
   Succs (2): B2 B4

 [B6]
   1: CFGNewAllocator(sc_event_finder_t<sc_core::sc_signal_in_if<sc_dt::sc_logic>> *)
   2: port_
   3: ef_p
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const)
   5: [B6.2], [B6.4] (CXXConstructExpr, [B6.6], sc_event_finder_t<class sc_core::sc_signal_in_if<sc_dt::sc_logic> >)
   6: new sc_event_finder_t<sc_core::sc_signal_in_if<sc_dt::sc_logic>>([B6.5])
   7: [B6.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_event_finder *)
   8: cache_p
   9: [B6.8] = [B6.7]
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: cache_p
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   3: [B7.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B7.3]
   T: if [B7.4]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (2): B1 B4

sc_event_finder_t(const sc_core::sc_port_base &port_, const sc_core::sc_event &(sc_core::sc_signal_in_if<sc_dt::sc_logic>::*event_method_)() const)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: port_
   2: [B1.1] (CXXConstructExpr, sc_event_finder([B1.1]) (Base initializer), class sc_core::sc_event_finder)
   3: sc_event_finder([B1.2]) (Base initializer)
   4: event_method_
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const)
   6: m_event_method([B1.5]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_event_finder_t<sc_signal_in_if<sc_dt::sc_logic>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_event_finder() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_event &sc_event_finder_t<sc_signal_in_if<sc_dt::sc_logic>>::find_event(sc_core::sc_interface *if_p) const
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: iface
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   3: const_cast<sc_core::sc_signal_in_if<sc_dt::sc_logic> *>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   4: this
   5: [B1.4]->m_event_method
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_event &(class sc_core::sc_signal_in_if<sc_dt::sc_logic>::*)(void) const)
   7: [B1.3] ->* [B1.6]
   8: ([B1.7])()
   9: return [B1.8];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_finder *)
   3: [B2.2]->report_error
   4: SC_ID_FIND_EVENT_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_event::none
  10: return [B2.9];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: [B6.3] ? [B4.3] : [B5.7]
   2: const sc_core::sc_signal_in_if<sc_dt::sc_logic> *iface = (if_p) ? dynamic_cast<const sc_core::sc_signal_in_if<sc_dt::sc_logic> *>(if_p) : dynamic_cast<const sc_core::sc_signal_in_if<sc_dt::sc_logic> *>(this->port().get_interface());
   3: iface
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   5: 0
   6: [B3.5] (ImplicitCastExpr, NullToPointer, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   7: [B3.4] == [B3.6]
   T: if [B3.7]
   Preds (2): B4 B5
   Succs (2): B2 B1

 [B4]
   1: if_p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<const sc_core::sc_signal_in_if<sc_dt::sc_logic> *>([B4.2]) (CXXDynamicCastExpr, Dynamic, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   Preds (1): B6
   Succs (1): B3

 [B5]
   1: this
   2: [B5.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_event_finder *)
   3: [B5.2]->port
   4: [B5.3]()
   5: [B5.4].get_interface
   6: [B5.5]()
   7: dynamic_cast<const sc_core::sc_signal_in_if<sc_dt::sc_logic> *>([B5.6]) (CXXDynamicCastExpr, Dynamic, const class sc_core::sc_signal_in_if<sc_dt::sc_logic> *)
   Preds (1): B6
   Succs (1): B3

 [B6]
   1: if_p
   2: ([B6.1]) (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: [B6.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B6.3] ? ... : ...
   Preds (1): B7
   Succs (2): B4 B5

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_port()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port_b(int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: max_size_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: policy
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port_base([B1.2], [B1.4]) (Base initializer), class sc_core::sc_port_base)
   6: sc_port_base([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
   9: m_interface([B1.8]) (Member initializer)
  10:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_inout_if<_Bool> *>)
  11: m_interface_vec([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_interface *get_interface()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_interface *get_interface() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_type_index sc_port_b<sc_signal_inout_if<bool>>::get_interface_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: typeid(sc_core::sc_signal_inout_if<bool>)
   2: [B1.1] (CXXConstructExpr, [B1.4], [B1.5], sc_core::sc_type_index)
   3: [B1.2] (ImplicitCastExpr, ConstructorConversion, sc_core::sc_type_index)
   4: [B1.3]
   5: [B1.4] (CXXConstructExpr, [B1.6], sc_core::sc_type_index)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_inout_if<bool>>::vbind(sc_core::sc_interface &interface_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: iface
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: interface_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_signal_inout_if<bool> *>([B3.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_inout_if<_Bool> *)
   4: sc_core::sc_signal_inout_if<bool> *iface = dynamic_cast<sc_core::sc_signal_inout_if<bool> *>(&interface_);
   5: iface
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int sc_port_b<sc_signal_inout_if<bool>>::vbind(sc_core::sc_port_base &parent_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::this_type *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: parent_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool>>::this_type *>([B3.2]) (CXXDynamicCastExpr, Dynamic, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::this_type *)
   4: sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool>>::this_type *parent = dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool>>::this_type *>(&parent_);
   5: parent
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::this_type *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::this_type *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void sc_port_b<sc_signal_inout_if<bool>>::add_interface(sc_core::sc_interface *interface_)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].push_back
   4: iface
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_signal_inout_if<_Bool> *>::value_type)
   6: [B1.3]([B1.5])
   7: operator[]
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<_Bool> *>::reference (*)(std::vector::size_type) noexcept)
   9: this
  10: [B1.9]->m_interface_vec
  11: 0
  12: [B1.11] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  13: [B1.10][[B1.12]] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<_Bool> *>, class sc_core::sc_signal_inout_if<_Bool> *>::value_type)
  15: this
  16: [B1.15]->m_interface
  17: [B1.16] = [B1.14]
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (2): B3 B4
   Succs (1): B5

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B3.2]->report_error
   4: SC_ID_BIND_IF_TO_PORT_
   5: [B3.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "interface already bound to port"
   7: [B3.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B3.3]([B3.5], [B3.7])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: iface
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   3: operator[]
   4: [B4.3] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<_Bool> *>::reference (*)(std::vector::size_type) noexcept)
   5: this
   6: [B4.5]->m_interface_vec
   7: i
   8: [B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B4.8] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  10: [B4.6][[B4.9]] (OperatorCall)
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<_Bool> *>, class sc_core::sc_signal_inout_if<_Bool> *>::value_type)
  12: [B4.2] == [B4.11]
   T: if [B4.12]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2] < [B5.4]
   T: for (...; [B5.5]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: ([B10.9]) ? [B7.1] : ([B8.2])
   2: (void)([B6.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> > *)
   5: [B6.4]->size
   6: [B6.5]()
   7: int if_n = this->size();
   8: 0
   9: int i = 0;
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B10
   Succs (1): B6

 [B8]
   1: 0
   2: ... , [B8.1]
   Preds (1): B9(Unreachable)
   Succs (1): B6

 [B9 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface != 0"
   4: [B9.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B9.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 553
   8: [B9.2]([B9.4], [B9.6], [B9.7])
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: interface_
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<sc_core::sc_signal_inout_if<bool> *>([B10.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_inout_if<_Bool> *)
   4: sc_core::sc_signal_inout_if<bool> *iface = dynamic_cast<sc_core::sc_signal_inout_if<bool> *>(interface_);
   5: iface
   6: [B10.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   7: 0
   8: [B10.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
   9: [B10.6] != [B10.8]
   T: ([B10.9]) ? ... : ...
   Preds (1): B11
   Succs (2): B7 B9

 [B0 (EXIT)]
   Preds (2): B1 B9

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_inout_if<bool>>::interface_count() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->size
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_port_b<sc_signal_inout_if<bool>>::make_sensitive(sc_core::sc_thread_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 601
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<_Bool> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<_Bool> *>, class sc_core::sc_signal_inout_if<_Bool> *>::value_type)
  10: sc_core::sc_signal_inout_if<bool> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void sc_port_b<sc_signal_inout_if<bool>>::make_sensitive(sc_core::sc_method_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 622
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<_Bool> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<_Bool> *>, class sc_core::sc_signal_inout_if<_Bool> *>::value_type)
  10: sc_core::sc_signal_inout_if<bool> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void bind(sc_core::sc_signal_inout_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: interface_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool>>::port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port_b<sc_signal_inout_if<bool>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this->m_interface_vec.~vector() (Member object destructor)
   2: ~sc_port_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port<sc_signal_inout_if<bool>, 1, SC_ONE_OR_MORE_BOUND>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_port_b() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port_b(const char *name_, int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: max_size_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: policy
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   7: [B1.2], [B1.4], [B1.6] (CXXConstructExpr, sc_port_base([B1.2], [B1.4], [B1.6]) (Base initializer), class sc_core::sc_port_base)
   8: sc_port_base([B1.7]) (Base initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
  11: m_interface([B1.10]) (Member initializer)
  12:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_inout_if<_Bool> *>)
  13: m_interface_vec([B1.12]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(sc_core::sc_signal_inout_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: interface_
  15: [B1.13]([B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_signal_inout_if<bool> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: interface_
  17: [B1.15]([B1.16])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(sc_core::sc_port<sc_core::sc_signal_inout_if<bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: parent_
  15: [B1.14] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::port_type)
  16: [B1.13]([B1.15])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_port<sc_core::sc_signal_inout_if<bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<_Bool>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: parent_
  17: [B1.16] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >::port_type)
  18: [B1.15]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_signal_inout_if<bool> *sc_port_b<sc_signal_inout_if<bool>>::operator->() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: const_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<bool>> &>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<_Bool> >)
   4: [B1.3].operator->
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_inout_if<_Bool> *)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_inout_if<bool> *sc_port_b<sc_signal_inout_if<bool>>::operator->()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   4: return [B1.3];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B2.2]->report_error
   4: SC_ID_GET_IF_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_core::sc_abort
  10: [B2.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  11: [B2.10]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_interface
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<_Bool> *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<_Bool> *)
   6: [B3.3] == [B3.5]
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

sc_port()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port_b(int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: max_size_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: policy
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_port_base([B1.2], [B1.4]) (Base initializer), class sc_core::sc_port_base)
   6: sc_port_base([B1.5]) (Base initializer)
   7: 0
   8: [B1.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   9: m_interface([B1.8]) (Member initializer)
  10:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_inout_if<sc_logic> *>)
  11: m_interface_vec([B1.10]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port_b<sc_signal_inout_if<sc_logic>>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this->m_interface_vec.~vector() (Member object destructor)
   2: ~sc_port_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_port<sc_signal_inout_if<sc_dt::sc_logic>, 1, SC_ONE_OR_MORE_BOUND>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_port_b() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(const char *name_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port_b(const char *name_, int max_size_, sc_core::sc_port_policy policy)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: max_size_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: policy
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, enum sc_core::sc_port_policy)
   7: [B1.2], [B1.4], [B1.6] (CXXConstructExpr, sc_port_base([B1.2], [B1.4], [B1.6]) (Base initializer), class sc_core::sc_port_base)
   8: sc_port_base([B1.7]) (Base initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  11: m_interface([B1.10]) (Member initializer)
  12:  (CXXConstructExpr, m_interface_vec() (Member initializer), std::vector<sc_signal_inout_if<sc_logic> *>)
  13: m_interface_vec([B1.12]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_port(sc_core::sc_signal_inout_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: interface_
  15: [B1.13]([B1.14])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_signal_inout_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: interface_
  17: [B1.15]([B1.16])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(sc_core::sc_port<sc_core::sc_signal_inout_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1]
   3: 0U
   4: (sc_core::sc_port_policy)[B1.3] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   5: [B1.4]
   6: [B1.2], [B1.5] (CXXConstructExpr, sc_port_b([B1.2], [B1.5]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   7: sc_port_b([B1.6]) (Base initializer)
   8: sc_warn_port_constructor
   9: [B1.8] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  10: [B1.9]()
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  13: [B1.12]->base_type::bind
  14: parent_
  15: [B1.14] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::port_type)
  16: [B1.13]([B1.15])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_port(const char *name_, sc_core::sc_port<sc_core::sc_signal_inout_if<sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::this_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: 1
   4: [B1.3]
   5: 0U
   6: (sc_core::sc_port_policy)[B1.5] (CStyleCastExpr, IntegralCast, enum sc_core::sc_port_policy)
   7: [B1.6]
   8: [B1.2], [B1.4], [B1.7] (CXXConstructExpr, sc_port_b([B1.2], [B1.4], [B1.7]) (Base initializer), sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   9: sc_port_b([B1.8]) (Base initializer)
  10: sc_warn_port_constructor
  11: [B1.10] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  12: [B1.11]()
  13: this
  14: [B1.13] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic>, 1, sc_core::SC_ONE_OR_MORE_BOUND>::base_type *)
  15: [B1.14]->base_type::bind
  16: parent_
  17: [B1.16] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::port_type)
  18: [B1.15]([B1.17])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_core::sc_signal_inout_if<sc_dt::sc_logic> *sc_port_b<sc_signal_inout_if<sc_logic>>::operator->() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: const_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_logic>> &>([B1.2]) (CXXConstCastExpr, NoOp, class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >)
   4: [B1.3].operator->
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_inout_if<sc_dt::sc_logic> *sc_port_b<sc_signal_inout_if<sc_logic>>::operator->()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: return [B1.3];
   Preds (2): B2(Unreachable) B3
   Succs (1): B0

 [B2 (NORETURN)]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B2.2]->report_error
   4: SC_ID_GET_IF_
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "port is not bound"
   7: [B2.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B2.3]([B2.5], [B2.7])
   9: sc_core::sc_abort
  10: [B2.9] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
  11: [B2.10]()
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: this
   2: [B3.1]->m_interface
   3: [B3.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: 0
   5: [B3.4] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   6: [B3.3] == [B3.5]
   T: if [B3.6]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

explicit sc_signal(const char *name_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: sc_core::sc_signal<sc_dt::sc_logic, POL>::value_type() (CXXConstructExpr, [B1.4], [B1.6], sc_core::sc_signal<class sc_dt::sc_logic, POL>::value_type)
   4: [B1.3] (BindTemporary)
   5: [B1.4] (ImplicitCastExpr, NoOp, const sc_core::sc_signal<class sc_dt::sc_logic, POL>::value_type)
   6: [B1.5]
   7: [B1.2], [B1.6] (CXXConstructExpr, sc_signal_t([B1.2], [B1.6]) (Base initializer), sc_signal_t<sc_dt::sc_logic, (enum sc_core::sc_writer_policy)1U>)
   8: sc_signal_t([B1.7]) (Base initializer)
   9: ~sc_core::sc_signal<sc_dt::sc_logic, POL>::value_type() (Temporary object destructor)
  10: 0
  11: [B1.10] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
  12: m_negedge_event_p([B1.11]) (Member initializer)
  13: 0
  14: [B1.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
  15: m_posedge_event_p([B1.14]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_t(const char *name_, const sc_dt::sc_logic &initial_value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signal_inout_if() (Base initializer), sc_signal_inout_if<class sc_dt::sc_logic>)
   2: sc_signal_inout_if([B1.1]) (Base initializer)
   3: name_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B1.4] (CXXConstructExpr, sc_signal_channel([B1.4]) (Base initializer), class sc_core::sc_signal_channel)
   6: sc_signal_channel([B1.5]) (Base initializer)
   7:  (CXXConstructExpr, sc_writer_policy_check() (Base initializer), sc_writer_policy_check<(enum sc_core::sc_writer_policy)1U>)
   8: sc_writer_policy_check([B1.7]) (Base initializer)
   9: initial_value_
  10: [B1.9] (CXXConstructExpr, m_cur_val([B1.9]) (Member initializer), class sc_dt::sc_logic)
  11: m_cur_val([B1.10]) (Member initializer)
  12: initial_value_
  13: [B1.12] (CXXConstructExpr, m_new_val([B1.12]) (Member initializer), class sc_dt::sc_logic)
  14: m_new_val([B1.13]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_inout_if()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signal_in_if() (Base initializer), sc_signal_in_if<class sc_dt::sc_logic>)
   2: sc_signal_in_if([B1.1]) (Base initializer)
   3:  (CXXConstructExpr, sc_signal_write_if() (Base initializer), sc_signal_write_if<class sc_dt::sc_logic>)
   4: sc_signal_write_if([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_write_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signal_t<sc_dt::sc_logic, SC_MANY_WRITERS>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this->m_new_val.~sc_logic() (Member object destructor)
   2: this->m_cur_val.~sc_logic() (Member object destructor)
   3: ~sc_writer_policy_check() (Base object destructor)
   4: ~sc_signal_channel() (Base object destructor)
   5: ~sc_signal_inout_if() (Base object destructor)
   6: ~sc_interface() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<sc_logic, (sc_writer_policy)1U>::register_port(sc_core::sc_port_base &port_, const char *if_typename_)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: 0
   2: (void)[B1.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: operator==
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const basic_string<char> &, const char *))
   3: if_typename_
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: 
   6: [B2.4] (CXXConstructExpr, [B2.7], [B2.10], std::string)
   7: [B2.6] (BindTemporary)
   8: std::string([B2.7]) (CXXFunctionalCastExpr, ConstructorConversion, std::string)
   9: [B2.8] (ImplicitCastExpr, NoOp, const std::string)
  10: [B2.9]
  11: typeid(sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::if_type)
  12: [B2.11].name
  13: [B2.12]()
  14: [B2.10] == [B2.13] (OperatorCall)
  15: bool is_output = std::string(if_typename_) == typeid(sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::if_type).name();
  16: ~std::string() (Temporary object destructor)
  17: ~std::allocator<char>() (Temporary object destructor)
  18: this
  19: [B2.18] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::policy_type *)
  20: [B2.19] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_nocheck_port *)
  21: [B2.20]->policy_type::check_port
  22: this
  23: [B2.22] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  24: port_
  25: &[B2.24]
  26: is_output
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, _Bool)
  28: [B2.21]([B2.23], [B2.25], [B2.27])
  29: ![B2.28]
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value_changed_event
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::value_changed_event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_dt::sc_logic &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cur_val
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_dt::sc_logic &get_data_ref() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B1.2]->deprecated_get_data_ref
   4: [B1.3]()
   5: this
   6: [B1.5]->m_cur_val
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool posedge() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.4] && [B2.7]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: operator==
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<sc_dt::sc_logic, SC_MANY_WRITERS> *)
   5: [B2.4]->m_cur_val
   6: sc_dt::SC_LOGIC_1
   7: [B2.5] == [B2.6] (OperatorCall)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_t<sc_dt::sc_logic, SC_MANY_WRITERS> *)
   3: [B3.2]->event
   4: [B3.3]()
   T: [B3.4] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool negedge() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.4] && [B2.7]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: operator==
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<sc_dt::sc_logic, SC_MANY_WRITERS> *)
   5: [B2.4]->m_cur_val
   6: sc_dt::SC_LOGIC_0
   7: [B2.5] == [B2.6] (OperatorCall)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_t<sc_dt::sc_logic, SC_MANY_WRITERS> *)
   3: [B3.2]->event
   4: [B3.3]()
   T: [B3.4] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<sc_logic, (sc_writer_policy)1U>::write(const sc_dt::sc_logic &value_)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_prim_channel *)
   3: [B1.2]->request_update
   4: [B1.3]()
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::policy_type *)
   3: [B2.2] (ImplicitCastExpr, UncheckedDerivedToBase, const struct sc_core::sc_writer_policy_check_delta *)
   4: [B2.3]->policy_type::needs_update
   5: [B2.4]()
   T: if [B3.8] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: operator=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, class sc_dt::sc_logic &(*)(const class sc_dt::sc_logic &))
   3: this
   4: [B3.3]->m_new_val
   5: value_
   6: [B3.4] = [B3.5] (OperatorCall)
   7: value_changed
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.8] || ...
   Preds (1): B5
   Succs (2): B1 B2

 [B4]
   1: return;
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: operator==
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_logic &, const class sc_dt::sc_logic &))
   3: this
   4: [B5.3]->m_new_val
   5: [B5.4] (ImplicitCastExpr, NoOp, const class sc_dt::sc_logic)
   6: value_
   7: [B5.5] == [B5.6] (OperatorCall)
   8: !([B5.7])
   9: bool value_changed = !(this->m_new_val == value_);
  10: this
  11: [B5.10] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::policy_type *)
  12: [B5.11] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_write *)
  13: [B5.12]->policy_type::check_write
  14: this
  15: [B5.14] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  16: value_changed
  17: [B5.16] (ImplicitCastExpr, LValueToRValue, _Bool)
  18: [B5.13]([B5.15], [B5.17])
  19: ![B5.18]
   T: if [B5.19]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (3): B1 B2 B4

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1U
   2: (sc_core::sc_writer_policy)[B1.1] (CStyleCastExpr, IntegralCast, enum sc_core::sc_writer_policy)
   3: [B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<sc_logic, (sc_writer_policy)1U>::print(::std::ostream &os) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, ::std::ostream &(*)(::std::ostream &, const class sc_dt::sc_logic &))
   3: os
   4: this
   5: [B1.4]->m_cur_val
   6: [B1.3] << [B1.5] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void trace(sc_core::sc_trace_file *tf) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B2.2]->deprecated_trace
   4: [B2.3]()
   5: tf
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   7: [B2.6] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.7]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_signal"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SC_ONE_WRITER
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal(const char *name_, const sc_core::sc_signal<sc_dt::sc_logic, POL>::value_type &initial_value_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: initial_value_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_signal_t([B1.2], [B1.3]) (Base initializer), sc_signal_t<sc_dt::sc_logic, (enum sc_core::sc_writer_policy)1U>)
   5: sc_signal_t([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
   8: m_negedge_event_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
  11: m_posedge_event_p([B1.10]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_core::sc_signal<sc_dt::sc_logic, POL>::value_type &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_dt::sc_logic &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->write
   3: a
   4: [B1.2]([B1.3])
   5: this
   6: *[B1.5]
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_signal_in_if<sc_core::sc_signal<sc_dt::sc_logic, POL>::value_type> &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.3]([B1.4])
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_signal_in_if<sc_dt::sc_logic> &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->write
   3: a
   4: [B1.3].read
   5: [B1.4]()
   6: [B1.2]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_core::sc_signal<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::base_type *)
   3: [B1.2]->base_type::operator=
   4: a
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, const sc_core::sc_signal_t<class sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type)
   6: [B1.3]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &operator=(const sc_core::sc_signal_t<sc_dt::sc_logic, sc_core::SC_MANY_WRITERS>::this_type &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->write
   3: a
   4: [B1.3].read
   5: [B1.4]()
   6: [B1.2]([B1.5])
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static const sc_dt::sc_length_param &sc_context<sc_length_param>::default_value()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_global<sc_length_param>::instance
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_global<class sc_dt::sc_length_param> *(*)(void))
   3: [B1.2]()
   4: [B1.3]->value_ptr
   5: [B1.4]()
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static sc_global<sc_dt::sc_length_param> *sc_global<sc_length_param>::instance()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: m_instance
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, sc_global<class sc_dt::sc_length_param> *)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: CFGNewAllocator(sc_global<sc_dt::sc_length_param> *)
   2:  (CXXConstructExpr, [B2.3], sc_global<class sc_dt::sc_length_param>)
   3: new sc_global<sc_dt::sc_length_param>
   4: m_instance
   5: [B2.4] = [B2.3]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: m_instance
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, sc_global<class sc_dt::sc_length_param> *)
   3: 0
   4: [B3.3] (ImplicitCastExpr, NullToPointer, sc_global<class sc_dt::sc_length_param> *)
   5: [B3.2] == [B3.4]
   T: if [B3.5]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_global<sc_length_param>::sc_global()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 
   2: 
   3: 
   4: 
   5: 
   6: 
   7: 
   8:  (CXXConstructExpr, m_map() (Member initializer), sc_core::sc_phash<void *, const sc_length_param *>)
   9: m_map([B1.8]) (Member initializer)
  10: m_instance
  11: &[B1.10]
  12: [B1.11] (ImplicitCastExpr, BitCast, void *)
  13: m_proc([B1.12]) (Member initializer)
  14: 0
  15: [B1.14] (ImplicitCastExpr, NullToPointer, const class sc_dt::sc_length_param *)
  16: m_value_ptr([B1.15]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_phash(const sc_dt::sc_length_param *def = (const sc_dt::sc_length_param *)0, int size = PHASH_DEFAULT_INIT_TABLE_SIZE, int density = PHASH_DEFAULT_MAX_DENSITY, double grow = PHASH_DEFAULT_GROW_FACTOR, bool reorder = PHASH_DEFAULT_REORDER_FLAG, sc_core::sc_phash_base::hash_fn_t hash_fn = default_ptr_hash_fn, sc_core::sc_phash_base::cmpr_fn_t cmpr_fn = 0)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: def
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
   3: [B1.2] (ImplicitCastExpr, BitCast, void *)
   4: (void *)[B1.3] (CStyleCastExpr, NoOp, void *)
   5: size
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: density
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: grow
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, double)
  11: reorder
  12: [B1.11] (ImplicitCastExpr, LValueToRValue, _Bool)
  13: hash_fn
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_core::sc_phash_base::hash_fn_t)
  15: cmpr_fn
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, sc_core::sc_phash_base::cmpr_fn_t)
  17: [B1.4], [B1.6], [B1.8], [B1.10], [B1.12], [B1.14], [B1.16] (CXXConstructExpr, sc_phash_base([B1.4], [B1.6], [B1.8], [B1.10], [B1.12], [B1.14], [B1.16]) (Base initializer), class sc_core::sc_phash_base)
  18: sc_phash_base([B1.17]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

~sc_phash<void *, const sc_dt::sc_length_param *>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_phash_base() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_length_param *&sc_global<sc_length_param>::value_ptr()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->update
   3: [B1.2]()
   4: this
   5: [B1.4]->m_value_ptr
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void sc_global<sc_length_param>::update()
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, void *)
   3: this
   4: [B1.3]->m_proc
   5: [B1.4] = [B1.2]
   6: vp
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
   8: this
   9: [B1.8]->m_value_ptr
  10: [B1.9] = [B1.7]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: CFGNewAllocator(sc_dt::sc_length_param *)
   2: sc_dt::sc_without_context() (CXXConstructExpr, [B2.3], [B2.4], class sc_dt::sc_without_context)
   3: [B2.2]
   4: [B2.3] (CXXConstructExpr, [B2.5]+0, class sc_dt::sc_without_context)
   5: [B2.4] (CXXConstructExpr, [B2.6], class sc_dt::sc_length_param)
   6: new sc_dt::sc_length_param([B2.5])
   7: [B2.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_length_param *)
   8: vp
   9: [B2.8] = [B2.7]
  10: this
  11: [B2.10]->m_map
  12: [B2.11].insert
  13: p
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, void *)
  15: vp
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
  17: [B2.12]([B2.14], [B2.16])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: operator[]
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_length_param *(*)(void *) const)
   3: this
   4: [B3.3]->m_map
   5: [B3.4] (ImplicitCastExpr, NoOp, const class sc_core::sc_phash<void *, const sc_dt::sc_length_param *>)
   6: p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: [B3.5][[B3.7]] (OperatorCall)
   9: const sc_dt::sc_length_param *vp = this->m_map[p];
  10: vp
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
  12: 0
  13: [B3.12] (ImplicitCastExpr, NullToPointer, const class sc_dt::sc_length_param *)
  14: [B3.11] == [B3.13]
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B4]
   1: sc_core::sc_get_current_process_b
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, sc_core::sc_process_b *(*)(void))
   3: [B4.2]()
   4: [B4.3] (ImplicitCastExpr, BitCast, void *)
   5: void *p = sc_core::sc_get_current_process_b();
   6: p
   7: [B4.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: this
   9: [B4.8]->m_proc
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: [B4.7] != [B4.10]
   T: if [B4.11]
   Preds (1): B5
   Succs (2): B3 B0

 [B0 (EXIT)]
   Preds (2): B1 B4

const sc_dt::sc_length_param *operator[](void *k) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_phash_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_phash_base *)
   4: [B1.3]->sc_phash_base::operator[]
   5: k
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: (const void *)[B1.6] (CStyleCastExpr, NoOp, const void *)
   8: [B1.4]([B1.7])
   9: (const sc_dt::sc_length_param *)[B1.8] (CStyleCastExpr, BitCast, const class sc_dt::sc_length_param *)
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int insert(void *k, const sc_dt::sc_length_param *c)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_phash_base *)
   3: [B1.2]->sc_phash_base::insert
   4: k
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, void *)
   6: (void *)[B1.5] (CStyleCastExpr, NoOp, void *)
   7: c
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_length_param *)
   9: [B1.8] (ImplicitCastExpr, BitCast, void *)
  10: (void *)[B1.9] (CStyleCastExpr, NoOp, void *)
  11: [B1.3]([B1.6], [B1.10])
  12: return [B1.11];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_unsigned_bitref *sc_vpool<sc_unsigned_bitref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_unsigned_bitref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_bitref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_unsigned_subref *sc_vpool<sc_unsigned_subref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_unsigned_subref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned_subref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_signed_bitref *sc_vpool<sc_signed_bitref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_signed_bitref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_bitref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_signed_subref *sc_vpool<sc_signed_subref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_signed_subref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_signed_subref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_bitref *sc_vpool<sc_uint_bitref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_uint_bitref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_bitref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_uint_subref *sc_vpool<sc_uint_subref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_uint_subref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_uint_subref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_bitref *sc_vpool<sc_int_bitref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_int_bitref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_bitref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_int_subref *sc_vpool<sc_int_subref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_int_subref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_int_subref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_proxy<sc_bv_base>() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_p_<sc_dt::sc_bv_base, sc_dt::sc_bv_base>(sc_proxy<sc_dt::sc_bv_base> &px, const sc_proxy<sc_dt::sc_bv_base> &py)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: extend_sign_w_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
   3: x
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: false
   7: [B1.2]([B1.3], [B1.5], [B1.6])
   8: x
   9: [B1.8].clean_tail
  10: [B1.9]()
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: set_words_
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: i
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: y
   7: [B3.6].get_word
   8: i
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B3.7]([B3.9])
  11: y
  12: [B3.11].get_cword
  13: i
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B3.12]([B3.14])
  16: [B3.2]([B3.3], [B3.5], [B3.10], [B3.15])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: min_sz
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: px
   2: [B5.1].back_cast
   3: [B5.2]()
   4: sc_dt::sc_bv_base &x = px.back_cast();
   5: py
   6: [B5.5].back_cast
   7: [B5.6]()
   8: const sc_dt::sc_bv_base &y = py.back_cast();
   9: x
  10: [B5.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  11: [B5.10].size
  12: [B5.11]()
  13: int sz = x.size();
  14: sc_min
  15: [B5.14] (ImplicitCastExpr, FunctionToPointerDecay, const int (*)(const int &, const int &))
  16: sz
  17: [B5.16] (ImplicitCastExpr, NoOp, const int)
  18: y
  19: [B5.18].size
  20: [B5.19]()
  21: [B5.20]
  22: [B5.15]([B5.17], [B5.21])
  23: int min_sz = sc_min(sz, y.size());
  24: 0
  25: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: px
   2: &[B6.1]
   3: [B6.2] (ImplicitCastExpr, BitCast, void *)
   4: (void *)[B6.3] (CStyleCastExpr, NoOp, void *)
   5: py
   6: &[B6.5]
   7: [B6.6] (ImplicitCastExpr, BitCast, void *)
   8: (void *)[B6.7] (CStyleCastExpr, NoOp, void *)
   9: [B6.4] != [B6.8]
   T: if [B6.9]
   Preds (1): B7
   Succs (2): B5 B0

 [B0 (EXIT)]
   Preds (2): B1 B6

sc_dt::sc_bv_base &back_cast()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: static_cast<sc_dt::sc_bv_base &>([B1.2]) (CXXStaticCastExpr, BaseToDerived, class sc_dt::sc_bv_base)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_bv_base &back_cast() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: static_cast<const sc_dt::sc_bv_base &>([B1.2]) (CXXStaticCastExpr, BaseToDerived, const class sc_dt::sc_bv_base)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline const int sc_min<int>(const int &a, const int &b)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.5]) ? [B2.1] : [B3.1]
   2: ([B1.1]) (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: a
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: b
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: a
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: b
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] <= [B4.4]
   T: ([B4.5]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void set_words_<sc_dt::sc_bv_base>(sc_dt::sc_bv_base &x, int wi, sc_dt::sc_digit x_dw, sc_dt::sc_digit x_cw)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: x
   2: [B1.1].set_word
   3: wi
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: x_dw
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: [B1.2]([B1.4], [B1.6])
   8: x
   9: [B1.8].set_cword
  10: wi
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: x_cw
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: [B1.9]([B1.11], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void extend_sign_w_<sc_dt::sc_bv_base>(sc_dt::sc_bv_base &x, int wi, bool sign)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: i
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: sgn
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: SC_DIGIT_ZERO
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  10: [B2.2]([B2.3], [B2.5], [B2.7], [B2.9])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: sz
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (...; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: [B7.7] ? [B5.3] : [B6.2]
   2: unsigned int sgn = (sign ? ~SC_DIGIT_ZERO : SC_DIGIT_ZERO);
   3: wi
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: int i = wi;
   Preds (2): B5 B6
   Succs (1): B3

 [B5]
   1: SC_DIGIT_ZERO
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: ~[B5.2]
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: SC_DIGIT_ZERO
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: x
   2: [B7.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
   3: [B7.2].size
   4: [B7.3]()
   5: int sz = x.size();
   6: sign
   7: [B7.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B7.7] ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(const bool *a)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: x
   2: return [B1.1];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: x
   2: [B3.1].set_bit
   3: i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: a
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   7: i
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B3.6][[B3.8]]
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: sc_dt::sc_logic_value_t([B3.10]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  12: [B3.11] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  13: [B3.2]([B3.4], [B3.12])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: this
   2: [B5.1]->back_cast
   3: [B5.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: x
   6: [B5.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
   7: [B5.6].length
   8: [B5.7]()
   9: int len = x.length();
  10: 0
  11: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(const sc_dt::sc_logic *a)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: x
   2: return [B1.1];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: x
   2: [B3.1].set_bit
   3: i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: a
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_logic *)
   7: i
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B3.6][[B3.8]]
  10: [B3.9].value
  11: [B3.10]()
  12: [B3.11] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  13: [B3.2]([B3.4], [B3.12])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: this
   2: [B5.1]->back_cast
   3: [B5.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: x
   6: [B5.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
   7: [B5.6].length
   8: [B5.7]()
   9: int len = x.length();
  10: 0
  11: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &assign_(const sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_v_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_bv_base> &, const class sc_dt::sc_unsigned &))
   3: this
   4: *[B1.3]
   5: a
   6: [B1.2]([B1.4], [B1.5])
   7: this
   8: [B1.7]->back_cast
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_v_<sc_dt::sc_bv_base>(sc_proxy<sc_dt::sc_bv_base> &px, const sc_dt::sc_unsigned &a)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: x
   2: [B2.1].set_bit
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: false
   6: sc_dt::sc_logic_value_t([B2.5]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
   7: [B2.6] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   8: [B2.2]([B2.4], [B2.7])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_x
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (; [B3.5]; ...)
   Preds (2): B1 B6
   Succs (2): B2 B0

 [B4]
   1: i
   2: ++[B4.1]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: x
   2: [B5.1].set_bit
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: operator[]
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned_bitref_r &(*)(int) const)
   7: a
   8: i
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B5.7][[B5.9]] (OperatorCall)
  11: [B5.10].operator unsigned long long
  12: [B5.10]
  13: [B5.12] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  14: [B5.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  15: (bool)[B5.14] (CStyleCastExpr, NoOp, _Bool)
  16: sc_dt::sc_logic_value_t([B5.15]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  17: [B5.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  18: [B5.2]([B5.4], [B5.17])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: i
   3: [B7.2] = [B7.1]
   Preds (2): B8 B9
   Succs (1): B6

 [B8]
   1: len_x
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B8.3] = [B8.2]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: px
   2: [B9.1].back_cast
   3: [B9.2]()
   4: sc_dt::sc_bv_base &x = px.back_cast();
   5: int i;
   6: x
   7: [B9.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
   8: [B9.7].length
   9: [B9.8]()
  10: int len_x = x.length();
  11: a
  12: [B9.11].length
  13: [B9.12]()
  14: int len_a = a.length();
  15: len_a
  16: [B9.15] (ImplicitCastExpr, LValueToRValue, int)
  17: len_x
  18: [B9.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B9.16] > [B9.18]
   T: if [B9.19]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_bv_base &assign_(const sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_v_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_bv_base> &, const class sc_dt::sc_signed &))
   3: this
   4: *[B1.3]
   5: a
   6: [B1.2]([B1.4], [B1.5])
   7: this
   8: [B1.7]->back_cast
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_v_<sc_dt::sc_bv_base>(sc_proxy<sc_dt::sc_bv_base> &px, const sc_dt::sc_signed &a)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: x
   2: [B2.1].set_bit
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: sign
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: sc_dt::sc_logic_value_t([B2.6]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
   8: [B2.7] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   9: [B2.2]([B2.4], [B2.8])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_x
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (; [B3.5]; ...)
   Preds (2): B1 B6
   Succs (2): B2 B0

 [B4]
   1: i
   2: ++[B4.1]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: x
   2: [B5.1].set_bit
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: operator[]
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_signed_bitref_r &(*)(int) const)
   7: a
   8: i
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B5.7][[B5.9]] (OperatorCall)
  11: [B5.10].operator unsigned long long
  12: [B5.10]
  13: [B5.12] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  14: [B5.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  15: (bool)[B5.14] (CStyleCastExpr, NoOp, _Bool)
  16: sc_dt::sc_logic_value_t([B5.15]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  17: [B5.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  18: [B5.2]([B5.4], [B5.17])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: i
   3: [B7.2] = [B7.1]
   Preds (2): B8 B9
   Succs (1): B6

 [B8]
   1: len_x
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B8.3] = [B8.2]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: px
   2: [B9.1].back_cast
   3: [B9.2]()
   4: sc_dt::sc_bv_base &x = px.back_cast();
   5: int i;
   6: operator<
   7: [B9.6] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, int))
   8: a
   9: 0
  10: [B9.8] < [B9.9] (OperatorCall)
  11: bool sign = a < 0;
  12: x
  13: [B9.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  14: [B9.13].length
  15: [B9.14]()
  16: int len_x = x.length();
  17: a
  18: [B9.17].length
  19: [B9.18]()
  20: int len_a = a.length();
  21: len_a
  22: [B9.21] (ImplicitCastExpr, LValueToRValue, int)
  23: len_x
  24: [B9.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B9.22] > [B9.24]
   T: if [B9.25]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_bv_base &assign_(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->assign_
   3: a
   4: [B1.3].operator unsigned long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   7: (sc_dt::uint64)[B1.6] (CStyleCastExpr, NoOp, sc_dt::uint64)
   8: [B1.2]([B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(sc_dt::uint64 a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: SC_DIGIT_SIZE
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.6] >> [B2.8]
  10: ([B2.9]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  11: (sc_dt::sc_digit)[B2.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: ~[B2.13]
  15: [B2.11] & [B2.14]
  16: SC_DIGIT_ZERO
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  18: [B2.2]([B2.3], [B2.4], ([B2.15]), [B2.17])
  19: extend_sign_w_
  20: [B2.19] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  21: x
  22: 2
  23: false
  24: [B2.20]([B2.21], [B2.22], [B2.23])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &assign_(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->assign_
   3: a
   4: [B1.3].operator long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::int_type)
   7: (sc_dt::int64)[B1.6] (CStyleCastExpr, NoOp, sc_dt::int64)
   8: [B1.2]([B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(sc_dt::int64 a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   7: [B2.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B2.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: SC_DIGIT_SIZE
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.8] >> [B2.10]
  12: ([B2.11]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  13: (sc_dt::sc_digit)[B2.12] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  14: SC_DIGIT_ZERO
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  16: ~[B2.15]
  17: [B2.13] & [B2.16]
  18: SC_DIGIT_ZERO
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: [B2.2]([B2.3], [B2.4], ([B2.17]), [B2.19])
  21: extend_sign_w_
  22: [B2.21] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  23: x
  24: 2
  25: a
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  27: 0
  28: [B2.27] (ImplicitCastExpr, IntegralCast, long long)
  29: [B2.26] < [B2.28]
  30: [B2.22]([B2.23], [B2.24], ([B2.29]))
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(unsigned long a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, unsigned long)
   7: SC_DIGIT_SIZE
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.6] >> [B2.8]
  10: ([B2.9]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  11: (sc_dt::sc_digit)[B2.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: ~[B2.13]
  15: [B2.11] & [B2.14]
  16: SC_DIGIT_ZERO
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  18: [B2.2]([B2.3], [B2.4], ([B2.15]), [B2.17])
  19: extend_sign_w_
  20: [B2.19] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  21: x
  22: 2
  23: false
  24: [B2.20]([B2.21], [B2.22], [B2.23])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, unsigned long)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(long a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, long)
   7: [B2.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B2.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: SC_DIGIT_SIZE
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.8] >> [B2.10]
  12: ([B2.11]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  13: (sc_dt::sc_digit)[B2.12] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  14: SC_DIGIT_ZERO
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  16: ~[B2.15]
  17: [B2.13] & [B2.16]
  18: SC_DIGIT_ZERO
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: [B2.2]([B2.3], [B2.4], ([B2.17]), [B2.19])
  21: extend_sign_w_
  22: [B2.21] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  23: x
  24: 2
  25: a
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, long)
  27: 0
  28: [B2.27] (ImplicitCastExpr, IntegralCast, long)
  29: [B2.26] < [B2.28]
  30: [B2.22]([B2.23], [B2.24], ([B2.29]))
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, long)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_bv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->back_cast
   3: [B1.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, unsigned int)
  11: (sc_dt::sc_digit)[B1.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: [B1.6]([B1.7], [B1.8], [B1.11], [B1.13])
  15: extend_sign_w_
  16: [B1.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  17: x
  18: 1
  19: false
  20: [B1.16]([B1.17], [B1.18], [B1.19])
  21: x
  22: [B1.21].clean_tail
  23: [B1.22]()
  24: x
  25: return [B1.24];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_bv_base &sc_proxy<sc_bv_base>::assign_(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->back_cast
   3: [B1.2]()
   4: sc_dt::sc_bv_base &x = this->back_cast();
   5: set_words_
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B1.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: [B1.6]([B1.7], [B1.8], [B1.12], [B1.14])
  16: extend_sign_w_
  17: [B1.16] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_bv_base &, int, _Bool))
  18: x
  19: 1
  20: a
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: 0
  23: [B1.21] < [B1.22]
  24: [B1.17]([B1.18], [B1.19], ([B1.23]))
  25: x
  26: [B1.25].clean_tail
  27: [B1.26]()
  28: x
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_proxy<sc_lv_base>() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_p_<sc_dt::sc_lv_base, sc_dt::sc_lv_base>(sc_proxy<sc_dt::sc_lv_base> &px, const sc_proxy<sc_dt::sc_lv_base> &py)
 [B7 (ENTRY)]
   Succs (1): B6

 [B1]
   1: extend_sign_w_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
   3: x
   4: i
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: false
   7: [B1.2]([B1.3], [B1.5], [B1.6])
   8: x
   9: [B1.8].clean_tail
  10: [B1.9]()
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: set_words_
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: i
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: y
   7: [B3.6].get_word
   8: i
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B3.7]([B3.9])
  11: y
  12: [B3.11].get_cword
  13: i
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B3.12]([B3.14])
  16: [B3.2]([B3.3], [B3.5], [B3.10], [B3.15])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: min_sz
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: px
   2: [B5.1].back_cast
   3: [B5.2]()
   4: sc_dt::sc_lv_base &x = px.back_cast();
   5: py
   6: [B5.5].back_cast
   7: [B5.6]()
   8: const sc_dt::sc_lv_base &y = py.back_cast();
   9: x
  10: [B5.9] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  11: [B5.10].size
  12: [B5.11]()
  13: int sz = x.size();
  14: sc_min
  15: [B5.14] (ImplicitCastExpr, FunctionToPointerDecay, const int (*)(const int &, const int &))
  16: sz
  17: [B5.16] (ImplicitCastExpr, NoOp, const int)
  18: y
  19: [B5.18].size
  20: [B5.19]()
  21: [B5.20]
  22: [B5.15]([B5.17], [B5.21])
  23: int min_sz = sc_min(sz, y.size());
  24: 0
  25: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: px
   2: &[B6.1]
   3: [B6.2] (ImplicitCastExpr, BitCast, void *)
   4: (void *)[B6.3] (CStyleCastExpr, NoOp, void *)
   5: py
   6: &[B6.5]
   7: [B6.6] (ImplicitCastExpr, BitCast, void *)
   8: (void *)[B6.7] (CStyleCastExpr, NoOp, void *)
   9: [B6.4] != [B6.8]
   T: if [B6.9]
   Preds (1): B7
   Succs (2): B5 B0

 [B0 (EXIT)]
   Preds (2): B1 B6

sc_dt::sc_lv_base &back_cast()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: static_cast<sc_dt::sc_lv_base &>([B1.2]) (CXXStaticCastExpr, BaseToDerived, class sc_dt::sc_lv_base)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const sc_dt::sc_lv_base &back_cast() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: *[B1.1]
   3: static_cast<const sc_dt::sc_lv_base &>([B1.2]) (CXXStaticCastExpr, BaseToDerived, const class sc_dt::sc_lv_base)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void set_words_<sc_dt::sc_lv_base>(sc_dt::sc_lv_base &x, int wi, sc_dt::sc_digit x_dw, sc_dt::sc_digit x_cw)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: x
   2: [B1.1].set_word
   3: wi
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: x_dw
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   7: [B1.2]([B1.4], [B1.6])
   8: x
   9: [B1.8].set_cword
  10: wi
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, int)
  12: x_cw
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: [B1.9]([B1.11], [B1.13])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void extend_sign_w_<sc_dt::sc_lv_base>(sc_dt::sc_lv_base &x, int wi, bool sign)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: i
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: sgn
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, unsigned int)
   8: SC_DIGIT_ZERO
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  10: [B2.2]([B2.3], [B2.5], [B2.7], [B2.9])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: sz
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (...; [B3.5]; ...)
   Preds (2): B1 B4
   Succs (2): B2 B0

 [B4]
   1: [B7.7] ? [B5.3] : [B6.2]
   2: unsigned int sgn = (sign ? ~SC_DIGIT_ZERO : SC_DIGIT_ZERO);
   3: wi
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: int i = wi;
   Preds (2): B5 B6
   Succs (1): B3

 [B5]
   1: SC_DIGIT_ZERO
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   3: ~[B5.2]
   Preds (1): B7
   Succs (1): B4

 [B6]
   1: SC_DIGIT_ZERO
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
   Preds (1): B7
   Succs (1): B4

 [B7]
   1: x
   2: [B7.1] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
   3: [B7.2].size
   4: [B7.3]()
   5: int sz = x.size();
   6: sign
   7: [B7.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B7.7] ? ... : ...
   Preds (1): B8
   Succs (2): B5 B6

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(const bool *a)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: x
   2: return [B1.1];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: x
   2: [B3.1].set_bit
   3: i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: a
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   7: i
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B3.6][[B3.8]]
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: sc_dt::sc_logic_value_t([B3.10]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  12: [B3.2]([B3.4], [B3.11])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: this
   2: [B5.1]->back_cast
   3: [B5.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: x
   6: [B5.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
   7: [B5.6].length
   8: [B5.7]()
   9: int len = x.length();
  10: 0
  11: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(const sc_dt::sc_logic *a)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: x
   2: return [B1.1];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i
   2: ++[B2.1]
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: x
   2: [B3.1].set_bit
   3: i
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: a
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const class sc_dt::sc_logic *)
   7: i
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B3.6][[B3.8]]
  10: [B3.9].value
  11: [B3.10]()
  12: [B3.2]([B3.4], [B3.11])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: this
   2: [B5.1]->back_cast
   3: [B5.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: x
   6: [B5.5] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
   7: [B5.6].length
   8: [B5.7]()
   9: int len = x.length();
  10: 0
  11: int i = 0;
   Preds (1): B6
   Succs (1): B4

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &assign_(const sc_dt::sc_unsigned &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_v_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_lv_base> &, const class sc_dt::sc_unsigned &))
   3: this
   4: *[B1.3]
   5: a
   6: [B1.2]([B1.4], [B1.5])
   7: this
   8: [B1.7]->back_cast
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_v_<sc_dt::sc_lv_base>(sc_proxy<sc_dt::sc_lv_base> &px, const sc_dt::sc_unsigned &a)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: x
   2: [B2.1].set_bit
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: false
   6: sc_dt::sc_logic_value_t([B2.5]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
   7: [B2.2]([B2.4], [B2.6])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_x
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (; [B3.5]; ...)
   Preds (2): B1 B6
   Succs (2): B2 B0

 [B4]
   1: i
   2: ++[B4.1]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: x
   2: [B5.1].set_bit
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: operator[]
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_unsigned_bitref_r &(*)(int) const)
   7: a
   8: i
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B5.7][[B5.9]] (OperatorCall)
  11: [B5.10].operator unsigned long long
  12: [B5.10]
  13: [B5.12] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  14: [B5.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  15: (bool)[B5.14] (CStyleCastExpr, NoOp, _Bool)
  16: sc_dt::sc_logic_value_t([B5.15]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  17: [B5.2]([B5.4], [B5.16])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: i
   3: [B7.2] = [B7.1]
   Preds (2): B8 B9
   Succs (1): B6

 [B8]
   1: len_x
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B8.3] = [B8.2]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: px
   2: [B9.1].back_cast
   3: [B9.2]()
   4: sc_dt::sc_lv_base &x = px.back_cast();
   5: int i;
   6: x
   7: [B9.6] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
   8: [B9.7].length
   9: [B9.8]()
  10: int len_x = x.length();
  11: a
  12: [B9.11].length
  13: [B9.12]()
  14: int len_a = a.length();
  15: len_a
  16: [B9.15] (ImplicitCastExpr, LValueToRValue, int)
  17: len_x
  18: [B9.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B9.16] > [B9.18]
   T: if [B9.19]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_lv_base &assign_(const sc_dt::sc_signed &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: assign_v_
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(sc_proxy<class sc_dt::sc_lv_base> &, const class sc_dt::sc_signed &))
   3: this
   4: *[B1.3]
   5: a
   6: [B1.2]([B1.4], [B1.5])
   7: this
   8: [B1.7]->back_cast
   9: [B1.8]()
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

template<> inline void assign_v_<sc_dt::sc_lv_base>(sc_proxy<sc_dt::sc_lv_base> &px, const sc_dt::sc_signed &a)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: i
   2: ++[B1.1]
   Preds (1): B2
   Succs (1): B3

 [B2]
   1: x
   2: [B2.1].set_bit
   3: i
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: sign
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: sc_dt::sc_logic_value_t([B2.6]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
   8: [B2.2]([B2.4], [B2.7])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: i
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_x
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2] < [B3.4]
   T: for (; [B3.5]; ...)
   Preds (2): B1 B6
   Succs (2): B2 B0

 [B4]
   1: i
   2: ++[B4.1]
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: x
   2: [B5.1].set_bit
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: operator[]
   6: [B5.5] (ImplicitCastExpr, FunctionToPointerDecay, const class sc_dt::sc_signed_bitref_r &(*)(int) const)
   7: a
   8: i
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, int)
  10: [B5.7][[B5.9]] (OperatorCall)
  11: [B5.10].operator unsigned long long
  12: [B5.10]
  13: [B5.12] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint64)
  14: [B5.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
  15: (bool)[B5.14] (CStyleCastExpr, NoOp, _Bool)
  16: sc_dt::sc_logic_value_t([B5.15]) (CXXFunctionalCastExpr, IntegralCast, enum sc_dt::sc_logic_value_t)
  17: [B5.2]([B5.4], [B5.16])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: i
   3: [B7.2] = [B7.1]
   Preds (2): B8 B9
   Succs (1): B6

 [B8]
   1: len_x
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: len_a
   4: [B8.3] = [B8.2]
   Preds (1): B9
   Succs (1): B7

 [B9]
   1: px
   2: [B9.1].back_cast
   3: [B9.2]()
   4: sc_dt::sc_lv_base &x = px.back_cast();
   5: int i;
   6: operator<
   7: [B9.6] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const class sc_dt::sc_signed &, int))
   8: a
   9: 0
  10: [B9.8] < [B9.9] (OperatorCall)
  11: bool sign = a < 0;
  12: x
  13: [B9.12] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  14: [B9.13].length
  15: [B9.14]()
  16: int len_x = x.length();
  17: a
  18: [B9.17].length
  19: [B9.18]()
  20: int len_a = a.length();
  21: len_a
  22: [B9.21] (ImplicitCastExpr, LValueToRValue, int)
  23: len_x
  24: [B9.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B9.22] > [B9.24]
   T: if [B9.25]
   Preds (1): B10
   Succs (2): B8 B7

 [B0 (EXIT)]
   Preds (1): B3

sc_dt::sc_lv_base &assign_(const sc_dt::sc_uint_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->assign_
   3: a
   4: [B1.3].operator unsigned long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::uint_type)
   7: (sc_dt::uint64)[B1.6] (CStyleCastExpr, NoOp, sc_dt::uint64)
   8: [B1.2]([B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(sc_dt::uint64 a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
   7: SC_DIGIT_SIZE
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.6] >> [B2.8]
  10: ([B2.9]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  11: (sc_dt::sc_digit)[B2.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: ~[B2.13]
  15: [B2.11] & [B2.14]
  16: SC_DIGIT_ZERO
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  18: [B2.2]([B2.3], [B2.4], ([B2.15]), [B2.17])
  19: extend_sign_w_
  20: [B2.19] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  21: x
  22: 2
  23: false
  24: [B2.20]([B2.21], [B2.22], [B2.23])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, sc_dt::uint64)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &assign_(const sc_dt::sc_int_base &a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->assign_
   3: a
   4: [B1.3].operator long long
   5: [B1.3]
   6: [B1.5] (ImplicitCastExpr, UserDefinedConversion, sc_dt::int_type)
   7: (sc_dt::int64)[B1.6] (CStyleCastExpr, NoOp, sc_dt::int64)
   8: [B1.2]([B1.7])
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(sc_dt::int64 a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
   7: [B2.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B2.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: SC_DIGIT_SIZE
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.8] >> [B2.10]
  12: ([B2.11]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  13: (sc_dt::sc_digit)[B2.12] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  14: SC_DIGIT_ZERO
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  16: ~[B2.15]
  17: [B2.13] & [B2.16]
  18: SC_DIGIT_ZERO
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: [B2.2]([B2.3], [B2.4], ([B2.17]), [B2.19])
  21: extend_sign_w_
  22: [B2.21] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  23: x
  24: 2
  25: a
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  27: 0
  28: [B2.27] (ImplicitCastExpr, IntegralCast, long long)
  29: [B2.26] < [B2.28]
  30: [B2.22]([B2.23], [B2.24], ([B2.29]))
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, sc_dt::int64)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(unsigned long a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, unsigned long)
   7: SC_DIGIT_SIZE
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.6] >> [B2.8]
  10: ([B2.9]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  11: (sc_dt::sc_digit)[B2.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: ~[B2.13]
  15: [B2.11] & [B2.14]
  16: SC_DIGIT_ZERO
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  18: [B2.2]([B2.3], [B2.4], ([B2.15]), [B2.17])
  19: extend_sign_w_
  20: [B2.19] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  21: x
  22: 2
  23: false
  24: [B2.20]([B2.21], [B2.22], [B2.23])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, unsigned long)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(long a)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: x
   2: [B1.1].clean_tail
   3: [B1.2]()
   4: x
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: set_words_
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   3: x
   4: 1
   5: a
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, long)
   7: [B2.6] (ImplicitCastExpr, IntegralCast, sc_dt::uint64)
   8: (sc_dt::uint64)[B2.7] (CStyleCastExpr, NoOp, sc_dt::uint64)
   9: SC_DIGIT_SIZE
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.8] >> [B2.10]
  12: ([B2.11]) (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  13: (sc_dt::sc_digit)[B2.12] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  14: SC_DIGIT_ZERO
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  16: ~[B2.15]
  17: [B2.13] & [B2.16]
  18: SC_DIGIT_ZERO
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  20: [B2.2]([B2.3], [B2.4], ([B2.17]), [B2.19])
  21: extend_sign_w_
  22: [B2.21] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  23: x
  24: 2
  25: a
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, long)
  27: 0
  28: [B2.27] (ImplicitCastExpr, IntegralCast, long)
  29: [B2.26] < [B2.28]
  30: [B2.22]([B2.23], [B2.24], ([B2.29]))
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1]->back_cast
   3: [B3.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B3.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, long)
  11: [B3.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B3.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: ~[B3.14]
  16: [B3.12] & [B3.15]
  17: SC_DIGIT_ZERO
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  19: [B3.6]([B3.7], [B3.8], ([B3.16]), [B3.18])
  20: x
  21: [B3.20] (ImplicitCastExpr, NoOp, const class sc_dt::sc_lv_base)
  22: [B3.21].size
  23: [B3.22]()
  24: 1
  25: [B3.23] > [B3.24]
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(unsigned int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->back_cast
   3: [B1.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, unsigned int)
  11: (sc_dt::sc_digit)[B1.10] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  12: SC_DIGIT_ZERO
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  14: [B1.6]([B1.7], [B1.8], [B1.11], [B1.13])
  15: extend_sign_w_
  16: [B1.15] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  17: x
  18: 1
  19: false
  20: [B1.16]([B1.17], [B1.18], [B1.19])
  21: x
  22: [B1.21].clean_tail
  23: [B1.22]()
  24: x
  25: return [B1.24];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_dt::sc_lv_base &sc_proxy<sc_lv_base>::assign_(int a)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->back_cast
   3: [B1.2]()
   4: sc_dt::sc_lv_base &x = this->back_cast();
   5: set_words_
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, sc_dt::sc_digit, sc_dt::sc_digit))
   7: x
   8: 0
   9: a
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.10] (ImplicitCastExpr, IntegralCast, sc_dt::sc_digit)
  12: (sc_dt::sc_digit)[B1.11] (CStyleCastExpr, NoOp, sc_dt::sc_digit)
  13: SC_DIGIT_ZERO
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, sc_dt::sc_digit)
  15: [B1.6]([B1.7], [B1.8], [B1.12], [B1.14])
  16: extend_sign_w_
  17: [B1.16] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(class sc_dt::sc_lv_base &, int, _Bool))
  18: x
  19: 1
  20: a
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: 0
  23: [B1.21] < [B1.22]
  24: [B1.17]([B1.18], [B1.19], ([B1.23]))
  25: x
  26: [B1.25].clean_tail
  27: [B1.26]()
  28: x
  29: return [B1.28];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_unsigned *sc_vpool<sc_unsigned>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_unsigned *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_unsigned *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_concat_bool *sc_vpool<sc_concat_bool>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concat_bool *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concat_bool *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concat_bool *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline sc_dt::sc_concatref *sc_vpool<sc_concatref>::allocate()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: sc_dt::sc_concatref *result_p;
   2: this
   3: [B1.2]->m_pool_p
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concatref *)
   5: this
   6: [B1.5]->m_pool_i
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, std::size_t)
   8: [B1.4][[B1.7]]
   9: &[B1.8]
  10: result_p
  11: [B1.10] = [B1.9]
  12: this
  13: [B1.12]->m_pool_i
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, std::size_t)
  15: 1
  16: [B1.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B1.14] + [B1.16]
  18: this
  19: [B1.18]->m_wrap
  20: [B1.19] (ImplicitCastExpr, LValueToRValue, std::size_t)
  21: ([B1.17]) & [B1.20]
  22: this
  23: [B1.22]->m_pool_i
  24: [B1.23] = [B1.21]
  25: result_p
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, class sc_dt::sc_concatref *)
  27: return [B1.26];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal(const char *name_, const sc_core::sc_signal<bool, POL>::value_type &initial_value_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: initial_value_
   4: [B1.2], [B1.3] (CXXConstructExpr, sc_signal_t([B1.2], [B1.3]) (Base initializer), sc_signal_t<_Bool, (enum sc_core::sc_writer_policy)0U>)
   5: sc_signal_t([B1.4]) (Base initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
   8: m_negedge_event_p([B1.7]) (Member initializer)
   9: 0
  10: [B1.9] (ImplicitCastExpr, NullToPointer, class sc_core::sc_event *)
  11: m_posedge_event_p([B1.10]) (Member initializer)
  12: 0
  13: [B1.12] (ImplicitCastExpr, NullToPointer, class sc_core::sc_reset *)
  14: m_reset_p([B1.13]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_t(const char *name_, const bool &initial_value_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signal_inout_if() (Base initializer), sc_signal_inout_if<_Bool>)
   2: sc_signal_inout_if([B1.1]) (Base initializer)
   3: name_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B1.4] (CXXConstructExpr, sc_signal_channel([B1.4]) (Base initializer), class sc_core::sc_signal_channel)
   6: sc_signal_channel([B1.5]) (Base initializer)
   7:  (CXXConstructExpr, sc_writer_policy_check() (Base initializer), sc_writer_policy_check<(enum sc_core::sc_writer_policy)0U>)
   8: sc_writer_policy_check([B1.7]) (Base initializer)
   9: initial_value_
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, _Bool)
  11: m_cur_val([B1.10]) (Member initializer)
  12: initial_value_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, _Bool)
  14: m_new_val([B1.13]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_inout_if()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signal_in_if() (Base initializer), sc_signal_in_if<_Bool>)
   2: sc_signal_in_if([B1.1]) (Base initializer)
   3:  (CXXConstructExpr, sc_signal_write_if() (Base initializer), sc_signal_write_if<_Bool>)
   4: sc_signal_write_if([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_write_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signal_t<bool, SC_ONE_WRITER>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_writer_policy_check() (Base object destructor)
   2: ~sc_signal_channel() (Base object destructor)
   3: ~sc_signal_inout_if() (Base object destructor)
   4: ~sc_interface() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<bool, (sc_writer_policy)0U>::register_port(sc_core::sc_port_base &port_, const char *if_typename_)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: 0
   2: (void)[B1.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: operator==
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const basic_string<char> &, const char *))
   3: if_typename_
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: 
   6: [B2.4] (CXXConstructExpr, [B2.7], [B2.10], std::string)
   7: [B2.6] (BindTemporary)
   8: std::string([B2.7]) (CXXFunctionalCastExpr, ConstructorConversion, std::string)
   9: [B2.8] (ImplicitCastExpr, NoOp, const std::string)
  10: [B2.9]
  11: typeid(sc_core::sc_signal_t<bool, sc_core::SC_ONE_WRITER>::if_type)
  12: [B2.11].name
  13: [B2.12]()
  14: [B2.10] == [B2.13] (OperatorCall)
  15: bool is_output = std::string(if_typename_) == typeid(sc_core::sc_signal_t<bool, sc_core::SC_ONE_WRITER>::if_type).name();
  16: ~std::string() (Temporary object destructor)
  17: ~std::allocator<char>() (Temporary object destructor)
  18: this
  19: [B2.18] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<_Bool, sc_core::SC_ONE_WRITER>::policy_type *)
  20: [B2.19] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_port *)
  21: [B2.20]->policy_type::check_port
  22: this
  23: [B2.22] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  24: port_
  25: &[B2.24]
  26: is_output
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, _Bool)
  28: [B2.21]([B2.23], [B2.25], [B2.27])
  29: ![B2.28]
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value_changed_event
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::value_changed_event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const bool &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cur_val
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const bool &get_data_ref() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B1.2]->deprecated_get_data_ref
   4: [B1.3]()
   5: this
   6: [B1.5]->m_cur_val
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool posedge() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.4] && [B2.4]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
   3: [B2.2]->m_cur_val
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
   3: [B3.2]->event
   4: [B3.3]()
   T: [B3.4] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool negedge() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: [B3.4] && [B2.5]
   2: return ([B1.1]);
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
   3: [B2.2]->m_cur_val
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, _Bool)
   5: ![B2.4]
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_t<_Bool, SC_ONE_WRITER> *)
   3: [B3.2]->event
   4: [B3.3]()
   T: [B3.4] && ...
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<bool, (sc_writer_policy)0U>::write(const bool &value_)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_prim_channel *)
   3: [B1.2]->request_update
   4: [B1.3]()
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<_Bool, sc_core::SC_ONE_WRITER>::policy_type *)
   3: [B2.2] (ImplicitCastExpr, UncheckedDerivedToBase, const struct sc_core::sc_writer_policy_check_write *)
   4: [B2.3]->policy_type::needs_update
   5: [B2.4]()
   T: if [B3.7] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: value_
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, _Bool)
   3: this
   4: [B3.3]->m_new_val
   5: [B3.4] = [B3.2]
   6: value_changed
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.7] || ...
   Preds (1): B5
   Succs (2): B1 B2

 [B4]
   1: return;
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_new_val
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B5.3] (ImplicitCastExpr, IntegralCast, int)
   5: value_
   6: [B5.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B5.6] (ImplicitCastExpr, IntegralCast, int)
   8: [B5.4] == [B5.7]
   9: !([B5.8])
  10: bool value_changed = !(this->m_new_val == value_);
  11: this
  12: [B5.11] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<_Bool, sc_core::SC_ONE_WRITER>::policy_type *)
  13: [B5.12] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_write *)
  14: [B5.13]->policy_type::check_write
  15: this
  16: [B5.15] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  17: value_changed
  18: [B5.17] (ImplicitCastExpr, LValueToRValue, _Bool)
  19: [B5.14]([B5.16], [B5.18])
  20: ![B5.19]
   T: if [B5.20]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (3): B1 B2 B4

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0U
   2: (sc_core::sc_writer_policy)[B1.1] (CStyleCastExpr, IntegralCast, enum sc_core::sc_writer_policy)
   3: [B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<bool, (sc_writer_policy)0U>::print(::std::ostream &os) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(_Bool))
   3: os
   4: this
   5: [B1.4]->m_cur_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void trace(sc_core::sc_trace_file *tf) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B2.2]->deprecated_trace
   4: [B2.3]()
   5: tf
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   7: [B2.6] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.7]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_signal"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool is_clock() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: false
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SC_ONE_WRITER
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

explicit sc_signal(const char *name_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: name_
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: sc_core::sc_signal<int, sc_core::SC_ONE_WRITER>::value_type()
   4: [B1.3]
   5: [B1.2], [B1.4] (CXXConstructExpr, sc_signal_t([B1.2], [B1.4]) (Base initializer), sc_signal_t<int, (enum sc_core::sc_writer_policy)0U>)
   6: sc_signal_t([B1.5]) (Base initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_t(const char *name_, const int &initial_value_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1:  (CXXConstructExpr, sc_signal_inout_if() (Base initializer), sc_signal_inout_if<int>)
   2: sc_signal_inout_if([B1.1]) (Base initializer)
   3: name_
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: [B1.4] (CXXConstructExpr, sc_signal_channel([B1.4]) (Base initializer), class sc_core::sc_signal_channel)
   6: sc_signal_channel([B1.5]) (Base initializer)
   7:  (CXXConstructExpr, sc_writer_policy_check() (Base initializer), sc_writer_policy_check<(enum sc_core::sc_writer_policy)0U>)
   8: sc_writer_policy_check([B1.7]) (Base initializer)
   9: initial_value_
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: m_cur_val([B1.10]) (Member initializer)
  12: initial_value_
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, int)
  14: m_new_val([B1.13]) (Member initializer)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1:  (CXXConstructExpr, sc_interface() (Base initializer), class sc_core::sc_interface)
   2: sc_interface([B2.1]) (Base initializer)
   Preds (1): B3
   Succs (1): B1

 [B3]
   T: (See if most derived ctor has already initialized vbases)
   Preds (1): B4
   Succs (2): B1 B2

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_inout_if()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, sc_signal_in_if() (Base initializer), sc_signal_in_if<int>)
   2: sc_signal_in_if([B1.1]) (Base initializer)
   3:  (CXXConstructExpr, sc_signal_write_if() (Base initializer), sc_signal_write_if<int>)
   4: sc_signal_write_if([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_in_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

sc_signal_write_if()
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signal_t<int, sc_core::SC_ONE_WRITER>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_writer_policy_check() (Base object destructor)
   2: ~sc_signal_channel() (Base object destructor)
   3: ~sc_signal_inout_if() (Base object destructor)
   4: ~sc_interface() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<int, (sc_writer_policy)0U>::register_port(sc_core::sc_port_base &port_, const char *if_typename_)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: 0
   2: (void)[B1.1] (CStyleCastExpr, ToVoid, void)
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: operator==
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, _Bool (*)(const basic_string<char> &, const char *))
   3: if_typename_
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: 
   6: [B2.4] (CXXConstructExpr, [B2.7], [B2.10], std::string)
   7: [B2.6] (BindTemporary)
   8: std::string([B2.7]) (CXXFunctionalCastExpr, ConstructorConversion, std::string)
   9: [B2.8] (ImplicitCastExpr, NoOp, const std::string)
  10: [B2.9]
  11: typeid(sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::if_type)
  12: [B2.11].name
  13: [B2.12]()
  14: [B2.10] == [B2.13] (OperatorCall)
  15: bool is_output = std::string(if_typename_) == typeid(sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::if_type).name();
  16: ~std::string() (Temporary object destructor)
  17: ~std::allocator<char>() (Temporary object destructor)
  18: this
  19: [B2.18] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::policy_type *)
  20: [B2.19] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_port *)
  21: [B2.20]->policy_type::check_port
  22: this
  23: [B2.22] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  24: port_
  25: &[B2.24]
  26: is_output
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, _Bool)
  28: [B2.21]([B2.23], [B2.25], [B2.27])
  29: ![B2.28]
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const sc_core::sc_event &default_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->value_changed_event
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_event &value_changed_event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::value_changed_event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const int &read() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_cur_val
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const int &get_data_ref() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B1.2]->deprecated_get_data_ref
   4: [B1.3]()
   5: this
   6: [B1.5]->m_cur_val
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool event() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_signal_channel *)
   4: [B1.3]->base_type::event
   5: [B1.4]()
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<int, (sc_writer_policy)0U>::write(const int &value_)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_prim_channel *)
   3: [B1.2]->request_update
   4: [B1.3]()
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::policy_type *)
   3: [B2.2] (ImplicitCastExpr, UncheckedDerivedToBase, const struct sc_core::sc_writer_policy_check_write *)
   4: [B2.3]->policy_type::needs_update
   5: [B2.4]()
   T: if [B3.7] || [B2.5]
   Preds (1): B3
   Succs (2): B1 B0

 [B3]
   1: value_
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B3.3]->m_new_val
   5: [B3.4] = [B3.2]
   6: value_changed
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, _Bool)
   T: [B3.7] || ...
   Preds (1): B5
   Succs (2): B1 B2

 [B4]
   1: return;
   Preds (1): B5
   Succs (1): B0

 [B5]
   1: this
   2: [B5.1]->m_new_val
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, int)
   4: value_
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.3] == [B5.5]
   7: !([B5.6])
   8: bool value_changed = !(this->m_new_val == value_);
   9: this
  10: [B5.9] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::policy_type *)
  11: [B5.10] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_write *)
  12: [B5.11]->policy_type::check_write
  13: this
  14: [B5.13] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_object *)
  15: value_changed
  16: [B5.15] (ImplicitCastExpr, LValueToRValue, _Bool)
  17: [B5.12]([B5.14], [B5.16])
  18: ![B5.17]
   T: if [B5.18]
   Preds (1): B6
   Succs (2): B4 B3

 [B0 (EXIT)]
   Preds (3): B1 B2 B4

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0U
   2: (sc_core::sc_writer_policy)[B1.1] (CStyleCastExpr, IntegralCast, enum sc_core::sc_writer_policy)
   3: [B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<int, (sc_writer_policy)0U>::print(::std::ostream &os) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(int))
   3: os
   4: this
   5: [B1.4]->m_cur_val
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] << [B1.6] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<int, (sc_writer_policy)0U>::dump(::std::ostream &os) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &)))
   3: operator<<
   4: [B1.3] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const char *))
   5: operator<<
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const char *))
   7: os
   8: "     name = "
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  10: [B1.7] << [B1.9] (OperatorCall)
  11: this
  12: [B1.11] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_object *)
  13: [B1.12]->name
  14: [B1.13]()
  15: [B1.10] << [B1.14] (OperatorCall)
  16: ::std::endl
  17: [B1.16] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &))
  18: [B1.15] << [B1.17] (OperatorCall)
  19: operator<<
  20: [B1.19] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &)))
  21: operator<<
  22: [B1.21] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(int))
  23: operator<<
  24: [B1.23] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const char *))
  25: os
  26: "    value = "
  27: [B1.26] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  28: [B1.25] << [B1.27] (OperatorCall)
  29: this
  30: [B1.29]->m_cur_val
  31: [B1.30] (ImplicitCastExpr, LValueToRValue, int)
  32: [B1.28] << [B1.31] (OperatorCall)
  33: ::std::endl
  34: [B1.33] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &))
  35: [B1.32] << [B1.34] (OperatorCall)
  36: operator<<
  37: [B1.36] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &(*)(std::basic_ostream<char>::__ostream_type &)))
  38: operator<<
  39: [B1.38] (ImplicitCastExpr, FunctionToPointerDecay, std::basic_ostream<char>::__ostream_type &(*)(int))
  40: operator<<
  41: [B1.40] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &, const char *))
  42: os
  43: "new value = "
  44: [B1.43] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  45: [B1.42] << [B1.44] (OperatorCall)
  46: this
  47: [B1.46]->m_new_val
  48: [B1.47] (ImplicitCastExpr, LValueToRValue, int)
  49: [B1.45] << [B1.48] (OperatorCall)
  50: ::std::endl
  51: [B1.50] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char> &(*)(basic_ostream<char> &))
  52: [B1.49] << [B1.51] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void trace(sc_core::sc_trace_file *tf) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_signal_channel *)
   3: [B2.2]->deprecated_trace
   4: [B2.3]()
   5: tf
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_trace_file *)
   7: [B2.6] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B2.7]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual const char *kind() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: "sc_signal"
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   3: return [B1.2];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_signal_t<int, (sc_writer_policy)0U>::update()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: [B1.1]->do_update
   3: [B1.2]()
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: this
   2: [B2.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t<int, sc_core::SC_ONE_WRITER>::policy_type *)
   3: [B2.2] (ImplicitCastExpr, UncheckedDerivedToBase, struct sc_core::sc_writer_policy_check_write *)
   4: [B2.3]->policy_type::update
   5: [B2.4]()
   6: this
   7: [B2.6]->m_new_val
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B2.9]->m_cur_val
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.8] == [B2.11]
  13: !([B2.12])
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

void sc_signal_t<int, (sc_writer_policy)0U>::do_update()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_signal_t::base_type *)
   3: [B1.2]->base_type::do_update
   4: [B1.3]()
   5: this
   6: [B1.5]->m_new_val
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B1.8]->m_cur_val
  10: [B1.9] = [B1.7]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_writer_policy get_writer_policy() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: SC_ONE_WRITER
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~sc_signal<int, sc_core::SC_ONE_WRITER>() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~sc_signal_t() (Base object destructor)
   2: ~sc_interface() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

operator const int &() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->read
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_interface *get_interface()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual const sc_core::sc_interface *get_interface() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: [B1.3] (ImplicitCastExpr, DerivedToBase, const class sc_core::sc_interface *)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual sc_core::sc_type_index sc_port_b<sc_signal_inout_if<sc_logic>>::get_interface_type() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: typeid(sc_core::sc_signal_inout_if<sc_dt::sc_logic>)
   2: [B1.1] (CXXConstructExpr, [B1.4], [B1.5], sc_core::sc_type_index)
   3: [B1.2] (ImplicitCastExpr, ConstructorConversion, sc_core::sc_type_index)
   4: [B1.3]
   5: [B1.4] (CXXConstructExpr, [B1.6], sc_core::sc_type_index)
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_inout_if<sc_logic>>::vbind(sc_core::sc_interface &interface_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: iface
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: interface_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_signal_inout_if<sc_dt::sc_logic> *>([B3.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: sc_core::sc_signal_inout_if<sc_dt::sc_logic> *iface = dynamic_cast<sc_core::sc_signal_inout_if<sc_dt::sc_logic> *>(&interface_);
   5: iface
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int sc_port_b<sc_signal_inout_if<sc_logic>>::vbind(sc_core::sc_port_base &parent_)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::this_type *)
   6: *[B1.5]
   7: [B1.6] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   8: [B1.3]([B1.7])
   9: 0
  10: return [B1.9];
   Preds (1): B3
   Succs (1): B0

 [B2]
   1: 2
   2: return [B2.1];
   Preds (1): B3
   Succs (1): B0

 [B3]
   1: parent_
   2: &[B3.1]
   3: dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_logic>>::this_type *>([B3.2]) (CXXDynamicCastExpr, Dynamic, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::this_type *)
   4: sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_logic>>::this_type *parent = dynamic_cast<sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_logic>>::this_type *>(&parent_);
   5: parent
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::this_type *)
   7: 0
   8: [B3.7] (ImplicitCastExpr, NullToPointer, sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> >::this_type *)
   9: [B3.6] == [B3.8]
   T: if [B3.9]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void sc_port_b<sc_signal_inout_if<sc_logic>>::add_interface(sc_core::sc_interface *interface_)
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].push_back
   4: iface
   5: [B1.4] (ImplicitCastExpr, NoOp, const std::vector<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::value_type)
   6: [B1.3]([B1.5])
   7: operator[]
   8: [B1.7] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::reference (*)(std::vector::size_type) noexcept)
   9: this
  10: [B1.9]->m_interface_vec
  11: 0
  12: [B1.11] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  13: [B1.10][[B1.12]] (OperatorCall)
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::value_type)
  15: this
  16: [B1.15]->m_interface
  17: [B1.16] = [B1.14]
   Preds (1): B5
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (2): B3 B4
   Succs (1): B5

 [B3]
   1: this
   2: [B3.1] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   3: [B3.2]->report_error
   4: SC_ID_BIND_IF_TO_PORT_
   5: [B3.4] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   6: "interface already bound to port"
   7: [B3.6] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   8: [B3.3]([B3.5], [B3.7])
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: iface
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   3: operator[]
   4: [B4.3] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::reference (*)(std::vector::size_type) noexcept)
   5: this
   6: [B4.5]->m_interface_vec
   7: i
   8: [B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B4.8] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
  10: [B4.6][[B4.9]] (OperatorCall)
  11: [B4.10] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::value_type)
  12: [B4.2] == [B4.11]
   T: if [B4.12]
   Preds (1): B5
   Succs (2): B3 B2

 [B5]
   1: i
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2] < [B5.4]
   T: for (...; [B5.5]; ...)
   Preds (2): B2 B6
   Succs (2): B4 B1

 [B6]
   1: ([B10.9]) ? [B7.1] : ([B8.2])
   2: (void)([B6.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B6.3] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_b<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> > *)
   5: [B6.4]->size
   6: [B6.5]()
   7: int if_n = this->size();
   8: 0
   9: int i = 0;
   Preds (2): B7 B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B10
   Succs (1): B6

 [B8]
   1: 0
   2: ... , [B8.1]
   Preds (1): B9(Unreachable)
   Succs (1): B6

 [B9 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B9.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface != 0"
   4: [B9.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B9.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 553
   8: [B9.2]([B9.4], [B9.6], [B9.7])
   Preds (1): B10
   Succs (1): B0

 [B10]
   1: interface_
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_interface *)
   3: dynamic_cast<sc_core::sc_signal_inout_if<sc_dt::sc_logic> *>([B10.2]) (CXXDynamicCastExpr, Dynamic, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   4: sc_core::sc_signal_inout_if<sc_dt::sc_logic> *iface = dynamic_cast<sc_core::sc_signal_inout_if<sc_dt::sc_logic> *>(interface_);
   5: iface
   6: [B10.5] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   7: 0
   8: [B10.7] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
   9: [B10.6] != [B10.8]
   T: ([B10.9]) ? ... : ...
   Preds (1): B11
   Succs (2): B7 B9

 [B0 (EXIT)]
   Preds (2): B1 B9

int size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->m_interface_vec
   3: [B1.2].size
   4: [B1.3]()
   5: [B1.4] (ImplicitCastExpr, IntegralCast, int)
   6: static_cast<int>([B1.5]) (CXXStaticCastExpr, NoOp, int)
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual int sc_port_b<sc_signal_inout_if<sc_logic>>::interface_count() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->size
   3: [B1.2]()
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void sc_port_b<sc_signal_inout_if<sc_logic>>::make_sensitive(sc_core::sc_thread_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_thread_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 601
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::value_type)
  10: sc_core::sc_signal_inout_if<sc_dt::sc_logic> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void sc_port_b<sc_signal_inout_if<sc_logic>>::make_sensitive(sc_core::sc_method_handle handle_p, sc_core::sc_event_finder *event_finder_) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B1.2] (ImplicitCastExpr, NoOp, const class sc_core::sc_port_base *)
   4: [B1.3]->sc_port_base::make_sensitive
   5: handle_p
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   7: event_finder_
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_event_finder *)
   9: [B1.4]([B1.6], [B1.8])
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: if_i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: ([B7.15]) ? [B4.1] : ([B5.2])
   2: (void)([B3.1]) (CStyleCastExpr, ToVoid, void)
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_port_base *)
   5: [B3.4]->add_static_event
   6: handle_p
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, sc_core::sc_method_handle)
   8: iface_p
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  10: [B3.9] (ImplicitCastExpr, UncheckedDerivedToBase, const class sc_core::sc_interface *)
  11: [B3.10]->default_event
  12: [B3.11]()
  13: [B3.5]([B3.7], [B3.12])
   Preds (2): B4 B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B7
   Succs (1): B3

 [B5]
   1: 0
   2: ... , [B5.1]
   Preds (1): B6(Unreachable)
   Succs (1): B3

 [B6 (NORETURN)]
   1: ::sc_core::sc_assertion_failed
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, int))
   3: "iface_p != 0"
   4: [B6.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "/home/twiga/code/systemc-2.3.3/systemc/include/sysc/communication/sc_port.h"
   6: [B6.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 622
   8: [B6.2]([B6.4], [B6.6], [B6.7])
   Preds (1): B7
   Succs (1): B0

 [B7]
   1: operator[]
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, std::vector<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::const_reference (*)(std::vector::size_type) const noexcept)
   3: this
   4: [B7.3]->m_interface_vec
   5: if_i
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B7.6] (ImplicitCastExpr, IntegralCast, std::vector::size_type)
   8: [B7.4][[B7.7]] (OperatorCall)
   9: [B7.8] (ImplicitCastExpr, LValueToRValue, __gnu_cxx::__alloc_traits<class std::allocator<class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *>::value_type)
  10: sc_core::sc_signal_inout_if<sc_dt::sc_logic> *iface_p = this->m_interface_vec[if_i];
  11: iface_p
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  13: 0
  14: [B7.13] (ImplicitCastExpr, NullToPointer, class sc_core::sc_signal_inout_if<class sc_dt::sc_logic> *)
  15: [B7.12] != [B7.14]
   T: ([B7.15]) ? ... : ...
   Preds (1): B8
   Succs (2): B4 B6

 [B8]
   1: if_i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: if_n
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B0

 [B9]
   1: this
   2: [B9.1]->size
   3: [B9.2]()
   4: int if_n = this->size();
   5: 0
   6: int if_i = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: this
   2: [B10.1] (ImplicitCastExpr, UncheckedDerivedToBase, class sc_core::sc_port_base *)
   3: [B10.2]->m_bind_info
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, struct sc_core::sc_bind_info *)
   5: 0
   6: [B10.5] (ImplicitCastExpr, NullToPointer, struct sc_core::sc_bind_info *)
   7: [B10.4] == [B10.6]
   T: if [B10.7]
   Preds (1): B11
   Succs (2): B9 B1

 [B0 (EXIT)]
   Preds (3): B1 B6 B8

virtual void bind(sc_core::sc_signal_inout_if<sc_dt::sc_logic> &interface_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: interface_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, class sc_core::sc_interface)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void bind(sc_core::sc_port_b<sc_core::sc_signal_inout_if<sc_dt::sc_logic>>::port_type &parent_)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, sc_core::sc_port_b::base_type *)
   3: [B1.2]->base_type::bind
   4: parent_
   5: [B1.4] (ImplicitCastExpr, DerivedToBase, sc_core::sc_port_base::this_type)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

